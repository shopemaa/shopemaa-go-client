// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package client

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/shopemaa/shopemaa-go-client/models"
)

type ShopemaaGraphQLClient interface {
	AbandonedCarts(ctx context.Context, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*AbandonedCarts, error)
	BlogPost(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*BlogPost, error)
	BlogPostByAdmin(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*BlogPostByAdmin, error)
	BlogPostBySlug(ctx context.Context, slug string, interceptors ...clientv2.RequestInterceptor) (*BlogPostBySlug, error)
	BlogPosts(ctx context.Context, search models.Search, pagination models.Pagination, sort models.Sort, interceptors ...clientv2.RequestInterceptor) (*BlogPosts, error)
	BlogPostsByAdmin(ctx context.Context, search models.Search, pagination models.Pagination, sort models.Sort, interceptors ...clientv2.RequestInterceptor) (*BlogPostsByAdmin, error)
	Cart(ctx context.Context, cartID string, interceptors ...clientv2.RequestInterceptor) (*Cart, error)
	Categories(ctx context.Context, query *string, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*Categories, error)
	CategoriesByAdmin(ctx context.Context, query *string, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*CategoriesByAdmin, error)
	Category(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*Category, error)
	CategoryByAdmin(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*CategoryByAdmin, error)
	CheckDiscount(ctx context.Context, couponCode string, cartID string, shippingMethodID *string, interceptors ...clientv2.RequestInterceptor) (*CheckDiscount, error)
	CheckDiscountByAdmin(ctx context.Context, couponCode string, cartID string, shippingMethodID *string, customerID *string, interceptors ...clientv2.RequestInterceptor) (*CheckDiscountByAdmin, error)
	CheckDiscountForGuests(ctx context.Context, couponCode string, cartID string, shippingMethodID *string, interceptors ...clientv2.RequestInterceptor) (*CheckDiscountForGuests, error)
	CheckPaymentProcessingFee(ctx context.Context, cartID string, paymentMethodID string, shippingMethodID *string, interceptors ...clientv2.RequestInterceptor) (*CheckPaymentProcessingFee, error)
	CheckShippingCharge(ctx context.Context, cartID string, shippingMethodID string, interceptors ...clientv2.RequestInterceptor) (*CheckShippingCharge, error)
	Collection(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*Collection, error)
	CollectionByAdmin(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*CollectionByAdmin, error)
	Collections(ctx context.Context, query *string, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*Collections, error)
	CollectionsByAdmin(ctx context.Context, query *string, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*CollectionsByAdmin, error)
	CouponCode(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*CouponCode, error)
	CouponCodes(ctx context.Context, search models.Search, sort *models.Sort, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*CouponCodes, error)
	CustomerProfile(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*CustomerProfile, error)
	CustomersByAdmin(ctx context.Context, params models.Search, sort models.Sort, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*CustomersByAdmin, error)
	LocationByID(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*LocationByID, error)
	Locations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*Locations, error)
	MediaByAdmin(ctx context.Context, sort models.Sort, pagination *models.Pagination, interceptors ...clientv2.RequestInterceptor) (*MediaByAdmin, error)
	Order(ctx context.Context, hash string, interceptors ...clientv2.RequestInterceptor) (*Order, error)
	OrderByAdmin(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*OrderByAdmin, error)
	OrderByCustomerEmail(ctx context.Context, hash string, email string, interceptors ...clientv2.RequestInterceptor) (*OrderByCustomerEmail, error)
	Orders(ctx context.Context, params models.POrderSearchParams, sort models.Sort, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*Orders, error)
	OrdersByAdmin(ctx context.Context, params models.OrderSearchParams, sort models.Sort, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*OrdersByAdmin, error)
	PaymentMethods(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*PaymentMethods, error)
	Product(ctx context.Context, productID string, interceptors ...clientv2.RequestInterceptor) (*Product, error)
	ProductByAdmin(ctx context.Context, productID string, interceptors ...clientv2.RequestInterceptor) (*ProductByAdmin, error)
	ProductBySlug(ctx context.Context, productSlug string, interceptors ...clientv2.RequestInterceptor) (*ProductBySlug, error)
	ProductSearch(ctx context.Context, search models.Search, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*ProductSearch, error)
	ProductSearchByAdmin(ctx context.Context, search models.Search, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*ProductSearchByAdmin, error)
	Products(ctx context.Context, search models.Search, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*Products, error)
	ProductsByAdmin(ctx context.Context, search models.Search, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*ProductsByAdmin, error)
	ShippingMethods(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ShippingMethods, error)
	StoreBySecret(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*StoreBySecret, error)
	OrderGuestCheckout(ctx context.Context, params models.GuestCheckoutPlaceOrderParams, interceptors ...clientv2.RequestInterceptor) (*OrderGuestCheckout, error)
	OrderGeneratePaymentNonceForGuest(ctx context.Context, orderID string, customerEmail string, overrides *models.PaymentRequestOverrides, interceptors ...clientv2.RequestInterceptor) (*OrderGeneratePaymentNonceForGuest, error)
	NewCart(ctx context.Context, params models.NewCartParams, interceptors ...clientv2.RequestInterceptor) (*NewCart, error)
	UpdateCart(ctx context.Context, id string, params models.UpdateCartParams, interceptors ...clientv2.RequestInterceptor) (*UpdateCart, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) ShopemaaGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type Query struct {
	Cart                                models.PCart                                   "json:\"cart\" graphql:\"cart\""
	PaymentMethods                      []*models.PaymentMethod                        "json:\"paymentMethods\" graphql:\"paymentMethods\""
	CheckPaymentProcessingFee           int                                            "json:\"checkPaymentProcessingFee\" graphql:\"checkPaymentProcessingFee\""
	AbandonedCarts                      []*models.Cart                                 "json:\"abandonedCarts\" graphql:\"abandonedCarts\""
	BlogPostsByAdmin                    []*models.BlogPost                             "json:\"blogPostsByAdmin\" graphql:\"blogPostsByAdmin\""
	BlogPostByAdmin                     models.BlogPost                                "json:\"blogPostByAdmin\" graphql:\"blogPostByAdmin\""
	BlogPosts                           []*models.PBlogPost                            "json:\"blogPosts\" graphql:\"blogPosts\""
	BlogPost                            models.PBlogPost                               "json:\"blogPost\" graphql:\"blogPost\""
	BlogPostBySlug                      models.PBlogPost                               "json:\"blogPostBySlug\" graphql:\"blogPostBySlug\""
	CategoriesByAdmin                   []*models.Category                             "json:\"categoriesByAdmin\" graphql:\"categoriesByAdmin\""
	CategoryByAdmin                     models.Category                                "json:\"categoryByAdmin\" graphql:\"categoryByAdmin\""
	Categories                          []*models.PCategory                            "json:\"categories\" graphql:\"categories\""
	Category                            models.PCategory                               "json:\"category\" graphql:\"category\""
	CollectionsByAdmin                  []*models.Collection                           "json:\"collectionsByAdmin\" graphql:\"collectionsByAdmin\""
	CollectionByAdmin                   models.Collection                              "json:\"collectionByAdmin\" graphql:\"collectionByAdmin\""
	Collections                         []*models.PCollection                          "json:\"collections\" graphql:\"collections\""
	Collection                          models.PCollection                             "json:\"collection\" graphql:\"collection\""
	CouponCode                          models.CouponCode                              "json:\"couponCode\" graphql:\"couponCode\""
	CouponCodes                         []*models.CouponCode                           "json:\"couponCodes\" graphql:\"couponCodes\""
	CheckDiscount                       int                                            "json:\"checkDiscount\" graphql:\"checkDiscount\""
	CheckDiscountForGuests              int                                            "json:\"checkDiscountForGuests\" graphql:\"checkDiscountForGuests\""
	CheckDiscountByAdmin                int                                            "json:\"checkDiscountByAdmin\" graphql:\"checkDiscountByAdmin\""
	CustomerProfile                     models.Customer                                "json:\"customerProfile\" graphql:\"customerProfile\""
	CustomersByAdmin                    []*models.SCustomer                            "json:\"customersByAdmin\" graphql:\"customersByAdmin\""
	MediaByAdmin                        []*models.ShopMedia                            "json:\"mediaByAdmin\" graphql:\"mediaByAdmin\""
	OrderByAdmin                        models.Order                                   "json:\"orderByAdmin\" graphql:\"orderByAdmin\""
	Order                               models.POrder                                  "json:\"order\" graphql:\"order\""
	OrderByCustomerEmail                models.POrder                                  "json:\"orderByCustomerEmail\" graphql:\"orderByCustomerEmail\""
	OrdersByAdmin                       []*models.Order                                "json:\"ordersByAdmin\" graphql:\"ordersByAdmin\""
	Orders                              []*models.POrder                               "json:\"orders\" graphql:\"orders\""
	Locations                           []*models.Location                             "json:\"locations\" graphql:\"locations\""
	LocationByID                        models.Location                                "json:\"locationById\" graphql:\"locationById\""
	ProductSearch                       []*models.PProduct                             "json:\"productSearch\" graphql:\"productSearch\""
	ProductSearchByAdmin                []*models.Product                              "json:\"productSearchByAdmin\" graphql:\"productSearchByAdmin\""
	ProductsByAdmin                     []*models.Product                              "json:\"productsByAdmin\" graphql:\"productsByAdmin\""
	ProductByAdmin                      models.Product                                 "json:\"productByAdmin\" graphql:\"productByAdmin\""
	Products                            []*models.PProduct                             "json:\"products\" graphql:\"products\""
	Product                             models.PProduct                                "json:\"product\" graphql:\"product\""
	ProductBySlug                       models.PProduct                                "json:\"productBySlug\" graphql:\"productBySlug\""
	ProductDigitalContentsForPreview    []*models.DigitalContent                       "json:\"productDigitalContentsForPreview\" graphql:\"productDigitalContentsForPreview\""
	ProductDigitalContents              []*models.DigitalContent                       "json:\"productDigitalContents\" graphql:\"productDigitalContents\""
	ProductDigitalContentsByCustomer    []*models.DigitalContent                       "json:\"productDigitalContentsByCustomer\" graphql:\"productDigitalContentsByCustomer\""
	ProductDigitalContentByAdmin        models.DigitalContent                          "json:\"productDigitalContentByAdmin\" graphql:\"productDigitalContentByAdmin\""
	ProductDigitalItemsByCustomer       []*models.DigitalItem                          "json:\"productDigitalItemsByCustomer\" graphql:\"productDigitalItemsByCustomer\""
	IsDigitalProductPurchasedByCustomer models.IsDigitalProductPurchasedByCustomerResp "json:\"isDigitalProductPurchasedByCustomer\" graphql:\"isDigitalProductPurchasedByCustomer\""
	Report                              models.Report                                  "json:\"report\" graphql:\"report\""
	ShippingMethodsByAdmin              []*models.ShippingMethod                       "json:\"shippingMethodsByAdmin\" graphql:\"shippingMethodsByAdmin\""
	ShippingMethodByAdmin               models.ShippingMethod                          "json:\"shippingMethodByAdmin\" graphql:\"shippingMethodByAdmin\""
	ShippingMethods                     []*models.ShippingMethod                       "json:\"shippingMethods\" graphql:\"shippingMethods\""
	ShippingMethod                      models.ShippingMethod                          "json:\"shippingMethod\" graphql:\"shippingMethod\""
	CheckShippingCharge                 int                                            "json:\"checkShippingCharge\" graphql:\"checkShippingCharge\""
	Stores                              []*models.Store                                "json:\"stores\" graphql:\"stores\""
	StoreSecrets                        []*models.StoreSecret                          "json:\"storeSecrets\" graphql:\"storeSecrets\""
	StoreByID                           models.Store                                   "json:\"storeById\" graphql:\"storeById\""
	StoreBySecret                       models.PStore                                  "json:\"storeBySecret\" graphql:\"storeBySecret\""
	StoreAppSecretByQuickLink           models.StoreSecret                             "json:\"storeAppSecretByQuickLink\" graphql:\"storeAppSecretByQuickLink\""
	StoreBanners                        []*models.PStoreBanner                         "json:\"storeBanners\" graphql:\"storeBanners\""
	StoreBannersByAdmin                 []*models.StoreBanner                          "json:\"storeBannersByAdmin\" graphql:\"storeBannersByAdmin\""
	StoreBannerByAdmin                  models.StoreBanner                             "json:\"storeBannerByAdmin\" graphql:\"storeBannerByAdmin\""
	StoreMenus                          []*models.PStoreMenu                           "json:\"storeMenus\" graphql:\"storeMenus\""
	StoreMenusByAdmin                   []*models.StoreMenu                            "json:\"storeMenusByAdmin\" graphql:\"storeMenusByAdmin\""
	StoreMenuByAdmin                    models.StoreMenu                               "json:\"storeMenuByAdmin\" graphql:\"storeMenuByAdmin\""
	StorePagesByAdmin                   []*models.StorePage                            "json:\"storePagesByAdmin\" graphql:\"storePagesByAdmin\""
	StorePageByAdmin                    models.StorePage                               "json:\"storePageByAdmin\" graphql:\"storePageByAdmin\""
	StorePages                          []*models.PStorePage                           "json:\"storePages\" graphql:\"storePages\""
	StorePage                           models.PStorePage                              "json:\"storePage\" graphql:\"storePage\""
	StorePageBySlug                     models.PStorePage                              "json:\"storePageBySlug\" graphql:\"storePageBySlug\""
}
type Mutation struct {
	NewCart                           models.PCart                       "json:\"newCart\" graphql:\"newCart\""
	UpdateCart                        models.PCart                       "json:\"updateCart\" graphql:\"updateCart\""
	NewBlogPost                       models.BlogPost                    "json:\"newBlogPost\" graphql:\"newBlogPost\""
	UpdateBlogPost                    models.BlogPost                    "json:\"updateBlogPost\" graphql:\"updateBlogPost\""
	DeleteBlogPost                    bool                               "json:\"deleteBlogPost\" graphql:\"deleteBlogPost\""
	BlogPostAddComment                models.BlogPostComment             "json:\"blogPostAddComment\" graphql:\"blogPostAddComment\""
	BlogPostUpdateComment             models.BlogPostComment             "json:\"blogPostUpdateComment\" graphql:\"blogPostUpdateComment\""
	BlogPostDeleteComment             bool                               "json:\"blogPostDeleteComment\" graphql:\"blogPostDeleteComment\""
	NewCategory                       models.Category                    "json:\"newCategory\" graphql:\"newCategory\""
	UpdateCategory                    models.Category                    "json:\"updateCategory\" graphql:\"updateCategory\""
	DeleteCategory                    bool                               "json:\"deleteCategory\" graphql:\"deleteCategory\""
	NewCollection                     models.Collection                  "json:\"newCollection\" graphql:\"newCollection\""
	UpdateCollection                  models.Collection                  "json:\"updateCollection\" graphql:\"updateCollection\""
	DeleteCollection                  bool                               "json:\"deleteCollection\" graphql:\"deleteCollection\""
	CollectionAddProducts             bool                               "json:\"collectionAddProducts\" graphql:\"collectionAddProducts\""
	CollectionRemoveProducts          bool                               "json:\"collectionRemoveProducts\" graphql:\"collectionRemoveProducts\""
	NewCouponCode                     models.CouponCode                  "json:\"newCouponCode\" graphql:\"newCouponCode\""
	UpdateCouponCode                  models.CouponCode                  "json:\"updateCouponCode\" graphql:\"updateCouponCode\""
	DeleteCouponCode                  bool                               "json:\"deleteCouponCode\" graphql:\"deleteCouponCode\""
	CustomerRegister                  models.RegisterCustomerResponse    "json:\"customerRegister\" graphql:\"customerRegister\""
	CustomerLogin                     models.LoginCustomerResponse       "json:\"customerLogin\" graphql:\"customerLogin\""
	CustomerMagicLoginRequest         bool                               "json:\"customerMagicLoginRequest\" graphql:\"customerMagicLoginRequest\""
	CustomerMagicLogin                models.LoginCustomerResponse       "json:\"customerMagicLogin\" graphql:\"customerMagicLogin\""
	CustomerResetPasswordRequest      bool                               "json:\"customerResetPasswordRequest\" graphql:\"customerResetPasswordRequest\""
	CustomerResetPassword             bool                               "json:\"customerResetPassword\" graphql:\"customerResetPassword\""
	CustomerChangePassword            bool                               "json:\"customerChangePassword\" graphql:\"customerChangePassword\""
	CustomerUpdateProfile             models.Customer                    "json:\"customerUpdateProfile\" graphql:\"customerUpdateProfile\""
	NewMedia                          string                             "json:\"newMedia\" graphql:\"newMedia\""
	DeleteMedia                       bool                               "json:\"deleteMedia\" graphql:\"deleteMedia\""
	OrderGuestCheckout                models.POrder                      "json:\"orderGuestCheckout\" graphql:\"orderGuestCheckout\""
	OrderCheckout                     models.POrder                      "json:\"orderCheckout\" graphql:\"orderCheckout\""
	OrderCheckoutByAdmin              models.Order                       "json:\"orderCheckoutByAdmin\" graphql:\"orderCheckoutByAdmin\""
	OrderGeneratePaymentNonce         models.GeneratePaymentNoneResponse "json:\"orderGeneratePaymentNonce\" graphql:\"orderGeneratePaymentNonce\""
	OrderGeneratePaymentNonceForGuest models.GeneratePaymentNoneResponse "json:\"orderGeneratePaymentNonceForGuest\" graphql:\"orderGeneratePaymentNonceForGuest\""
	OrderGenerateDigitalContent       models.OrderGenerateDigitalContent "json:\"orderGenerateDigitalContent\" graphql:\"orderGenerateDigitalContent\""
	OrderAddFeedback                  models.Feedback                    "json:\"orderAddFeedback\" graphql:\"orderAddFeedback\""
	OrderUpdateByAdmin                models.Order                       "json:\"orderUpdateByAdmin\" graphql:\"orderUpdateByAdmin\""
	UserRegister                      *models.RegisterUserResponse       "json:\"userRegister,omitempty\" graphql:\"userRegister\""
	UserLogin                         *models.LoginUserResponse          "json:\"userLogin,omitempty\" graphql:\"userLogin\""
	NewProduct                        models.Product                     "json:\"newProduct\" graphql:\"newProduct\""
	UpdateProduct                     models.Product                     "json:\"updateProduct\" graphql:\"updateProduct\""
	DeleteProduct                     bool                               "json:\"deleteProduct\" graphql:\"deleteProduct\""
	ProductAddVariation               models.ProductVariation            "json:\"productAddVariation\" graphql:\"productAddVariation\""
	ProductUpdateVariation            models.ProductVariation            "json:\"productUpdateVariation\" graphql:\"productUpdateVariation\""
	ProductRemoveVariation            bool                               "json:\"productRemoveVariation\" graphql:\"productRemoveVariation\""
	ProductAddAttribute               models.ProductAttribute            "json:\"productAddAttribute\" graphql:\"productAddAttribute\""
	ProductUpdateAttribute            models.ProductAttribute            "json:\"productUpdateAttribute\" graphql:\"productUpdateAttribute\""
	ProductRemoveAttribute            bool                               "json:\"productRemoveAttribute\" graphql:\"productRemoveAttribute\""
	ProductAddDigitalItem             models.DigitalItem                 "json:\"productAddDigitalItem\" graphql:\"productAddDigitalItem\""
	ProductUpdateDigitalItem          models.DigitalItem                 "json:\"productUpdateDigitalItem\" graphql:\"productUpdateDigitalItem\""
	ProductRemoveDigitalItem          bool                               "json:\"productRemoveDigitalItem\" graphql:\"productRemoveDigitalItem\""
	ProductAddDigitalContent          models.DigitalContent              "json:\"productAddDigitalContent\" graphql:\"productAddDigitalContent\""
	ProductUpdateDigitalContent       models.DigitalContent              "json:\"productUpdateDigitalContent\" graphql:\"productUpdateDigitalContent\""
	ProductRemoveDigitalContent       bool                               "json:\"productRemoveDigitalContent\" graphql:\"productRemoveDigitalContent\""
	NewShippingMethod                 models.ShippingMethod              "json:\"newShippingMethod\" graphql:\"newShippingMethod\""
	UpdateShippingMethod              models.ShippingMethod              "json:\"updateShippingMethod\" graphql:\"updateShippingMethod\""
	DeleteShippingMethod              bool                               "json:\"deleteShippingMethod\" graphql:\"deleteShippingMethod\""
	NewStore                          models.Store                       "json:\"newStore\" graphql:\"newStore\""
	UpdateStore                       bool                               "json:\"updateStore\" graphql:\"updateStore\""
	UpdateStoreBySecret               bool                               "json:\"updateStoreBySecret\" graphql:\"updateStoreBySecret\""
	ToggleQuickLink                   bool                               "json:\"toggleQuickLink\" graphql:\"toggleQuickLink\""
	DeleteStore                       bool                               "json:\"deleteStore\" graphql:\"deleteStore\""
	NewStoreSecret                    models.StoreSecret                 "json:\"newStoreSecret\" graphql:\"newStoreSecret\""
	DeleteStoreSecret                 bool                               "json:\"deleteStoreSecret\" graphql:\"deleteStoreSecret\""
	NewStoreBanner                    models.StoreBanner                 "json:\"newStoreBanner\" graphql:\"newStoreBanner\""
	UpdateStoreBanner                 models.StoreBanner                 "json:\"updateStoreBanner\" graphql:\"updateStoreBanner\""
	DeleteStoreBanner                 bool                               "json:\"deleteStoreBanner\" graphql:\"deleteStoreBanner\""
	NewStoreMenu                      models.StoreMenu                   "json:\"newStoreMenu\" graphql:\"newStoreMenu\""
	UpdateStoreMenu                   models.StoreMenu                   "json:\"updateStoreMenu\" graphql:\"updateStoreMenu\""
	DeleteStoreMenu                   bool                               "json:\"deleteStoreMenu\" graphql:\"deleteStoreMenu\""
	NewStorePage                      models.StorePage                   "json:\"newStorePage\" graphql:\"newStorePage\""
	UpdateStorePage                   models.StorePage                   "json:\"updateStorePage\" graphql:\"updateStorePage\""
	DeleteStorePage                   bool                               "json:\"deleteStorePage\" graphql:\"deleteStorePage\""
}
type AbandonedCarts_AbandonedCarts_CartItems_Product struct {
	ID                      string              "json:\"id\" graphql:\"id\""
	Slug                    string              "json:\"slug\" graphql:\"slug\""
	Description             string              "json:\"description\" graphql:\"description\""
	Name                    string              "json:\"name\" graphql:\"name\""
	Price                   int                 "json:\"price\" graphql:\"price\""
	ProductSpecificDiscount int                 "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	ProductUnit             *models.ProductUnit "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	IsDigitalProduct        bool                "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	IsPublished             bool                "json:\"isPublished\" graphql:\"isPublished\""
}

func (t *AbandonedCarts_AbandonedCarts_CartItems_Product) GetID() string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Product{}
	}
	return t.ID
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Product{}
	}
	return t.Slug
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Product) GetDescription() string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Product{}
	}
	return t.Description
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Product) GetName() string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Product{}
	}
	return t.Name
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Product) GetPrice() int {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Product{}
	}
	return t.Price
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Product) GetProductSpecificDiscount() int {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Product{}
	}
	return t.ProductSpecificDiscount
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Product) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Product{}
	}
	return t.ProductUnit
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Product) GetIsDigitalProduct() bool {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Product{}
	}
	return t.IsDigitalProduct
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Product) GetIsPublished() bool {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Product{}
	}
	return t.IsPublished
}

type AbandonedCarts_AbandonedCarts_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *AbandonedCarts_AbandonedCarts_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Attributes{}
	}
	return t.Name
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type AbandonedCarts_AbandonedCarts_CartItems_Variation struct {
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	ID    string  "json:\"id\" graphql:\"id\""
	Cost  int     "json:\"cost\" graphql:\"cost\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *AbandonedCarts_AbandonedCarts_CartItems_Variation) GetName() string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Variation{}
	}
	return t.Name
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Variation{}
	}
	return t.Price
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Variation) GetID() string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Variation{}
	}
	return t.ID
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Variation) GetCost() int {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Variation{}
	}
	return t.Cost
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Variation{}
	}
	return t.Sku
}
func (t *AbandonedCarts_AbandonedCarts_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems_Variation{}
	}
	return t.Stock
}

type AbandonedCarts_AbandonedCarts_CartItems struct {
	ID               int                                                   "json:\"id\" graphql:\"id\""
	PurchasePrice    int                                                   "json:\"purchasePrice\" graphql:\"purchasePrice\""
	PurchaseTimeCost int                                                   "json:\"purchaseTimeCost\" graphql:\"purchaseTimeCost\""
	Quantity         int                                                   "json:\"quantity\" graphql:\"quantity\""
	Product          AbandonedCarts_AbandonedCarts_CartItems_Product       "json:\"product\" graphql:\"product\""
	Attributes       []*AbandonedCarts_AbandonedCarts_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation        *AbandonedCarts_AbandonedCarts_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *AbandonedCarts_AbandonedCarts_CartItems) GetID() int {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems{}
	}
	return t.ID
}
func (t *AbandonedCarts_AbandonedCarts_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems{}
	}
	return t.PurchasePrice
}
func (t *AbandonedCarts_AbandonedCarts_CartItems) GetPurchaseTimeCost() int {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems{}
	}
	return t.PurchaseTimeCost
}
func (t *AbandonedCarts_AbandonedCarts_CartItems) GetQuantity() int {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems{}
	}
	return t.Quantity
}
func (t *AbandonedCarts_AbandonedCarts_CartItems) GetProduct() *AbandonedCarts_AbandonedCarts_CartItems_Product {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems{}
	}
	return &t.Product
}
func (t *AbandonedCarts_AbandonedCarts_CartItems) GetAttributes() []*AbandonedCarts_AbandonedCarts_CartItems_Attributes {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems{}
	}
	return t.Attributes
}
func (t *AbandonedCarts_AbandonedCarts_CartItems) GetVariation() *AbandonedCarts_AbandonedCarts_CartItems_Variation {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts_CartItems{}
	}
	return t.Variation
}

type AbandonedCarts_AbandonedCarts struct {
	ID                 string                                     "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                                       "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*AbandonedCarts_AbandonedCarts_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *AbandonedCarts_AbandonedCarts) GetID() string {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts{}
	}
	return t.ID
}
func (t *AbandonedCarts_AbandonedCarts) GetIsShippingRequired() bool {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts{}
	}
	return t.IsShippingRequired
}
func (t *AbandonedCarts_AbandonedCarts) GetCartItems() []*AbandonedCarts_AbandonedCarts_CartItems {
	if t == nil {
		t = &AbandonedCarts_AbandonedCarts{}
	}
	return t.CartItems
}

type BlogPost_BlogPost_Comments_Customer struct {
	Email              string  "json:\"email\" graphql:\"email\""
	FirstName          string  "json:\"firstName\" graphql:\"firstName\""
	LastName           string  "json:\"lastName\" graphql:\"lastName\""
	Phone              *string "json:\"phone,omitempty\" graphql:\"phone\""
	ProfilePicture     *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
	ProfilePictureFull *string "json:\"profilePictureFull,omitempty\" graphql:\"profilePictureFull\""
}

func (t *BlogPost_BlogPost_Comments_Customer) GetEmail() string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments_Customer{}
	}
	return t.Email
}
func (t *BlogPost_BlogPost_Comments_Customer) GetFirstName() string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments_Customer{}
	}
	return t.FirstName
}
func (t *BlogPost_BlogPost_Comments_Customer) GetLastName() string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments_Customer{}
	}
	return t.LastName
}
func (t *BlogPost_BlogPost_Comments_Customer) GetPhone() *string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments_Customer{}
	}
	return t.Phone
}
func (t *BlogPost_BlogPost_Comments_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments_Customer{}
	}
	return t.ProfilePicture
}
func (t *BlogPost_BlogPost_Comments_Customer) GetProfilePictureFull() *string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments_Customer{}
	}
	return t.ProfilePictureFull
}

type BlogPost_BlogPost_Comments struct {
	ID        string                              "json:\"id\" graphql:\"id\""
	Customer  BlogPost_BlogPost_Comments_Customer "json:\"customer\" graphql:\"customer\""
	CreatedAt string                              "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt *string                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Content   string                              "json:\"content\" graphql:\"content\""
}

func (t *BlogPost_BlogPost_Comments) GetID() string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments{}
	}
	return t.ID
}
func (t *BlogPost_BlogPost_Comments) GetCustomer() *BlogPost_BlogPost_Comments_Customer {
	if t == nil {
		t = &BlogPost_BlogPost_Comments{}
	}
	return &t.Customer
}
func (t *BlogPost_BlogPost_Comments) GetCreatedAt() string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments{}
	}
	return t.CreatedAt
}
func (t *BlogPost_BlogPost_Comments) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments{}
	}
	return t.UpdatedAt
}
func (t *BlogPost_BlogPost_Comments) GetContent() string {
	if t == nil {
		t = &BlogPost_BlogPost_Comments{}
	}
	return t.Content
}

type BlogPost_BlogPost struct {
	ID              string                        "json:\"id\" graphql:\"id\""
	Slug            *string                       "json:\"slug,omitempty\" graphql:\"slug\""
	Title           string                        "json:\"title\" graphql:\"title\""
	IsPublished     bool                          "json:\"isPublished\" graphql:\"isPublished\""
	BannerImage     *string                       "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	BannerImageFull *string                       "json:\"bannerImageFull,omitempty\" graphql:\"bannerImageFull\""
	Content         string                        "json:\"content\" graphql:\"content\""
	CreatedAt       string                        "json:\"createdAt\" graphql:\"createdAt\""
	Favourites      int                           "json:\"favourites\" graphql:\"favourites\""
	IsFeatured      bool                          "json:\"isFeatured\" graphql:\"isFeatured\""
	Views           int                           "json:\"views\" graphql:\"views\""
	UpdatedAt       *string                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Comments        []*BlogPost_BlogPost_Comments "json:\"comments\" graphql:\"comments\""
	Tags            []string                      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *BlogPost_BlogPost) GetID() string {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.ID
}
func (t *BlogPost_BlogPost) GetSlug() *string {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.Slug
}
func (t *BlogPost_BlogPost) GetTitle() string {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.Title
}
func (t *BlogPost_BlogPost) GetIsPublished() bool {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.IsPublished
}
func (t *BlogPost_BlogPost) GetBannerImage() *string {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.BannerImage
}
func (t *BlogPost_BlogPost) GetBannerImageFull() *string {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.BannerImageFull
}
func (t *BlogPost_BlogPost) GetContent() string {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.Content
}
func (t *BlogPost_BlogPost) GetCreatedAt() string {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.CreatedAt
}
func (t *BlogPost_BlogPost) GetFavourites() int {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.Favourites
}
func (t *BlogPost_BlogPost) GetIsFeatured() bool {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.IsFeatured
}
func (t *BlogPost_BlogPost) GetViews() int {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.Views
}
func (t *BlogPost_BlogPost) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.UpdatedAt
}
func (t *BlogPost_BlogPost) GetComments() []*BlogPost_BlogPost_Comments {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.Comments
}
func (t *BlogPost_BlogPost) GetTags() []string {
	if t == nil {
		t = &BlogPost_BlogPost{}
	}
	return t.Tags
}

type BlogPostByAdmin_BlogPostByAdmin_Comments_Customer struct {
	Email              string  "json:\"email\" graphql:\"email\""
	FirstName          string  "json:\"firstName\" graphql:\"firstName\""
	LastName           string  "json:\"lastName\" graphql:\"lastName\""
	Phone              *string "json:\"phone,omitempty\" graphql:\"phone\""
	ProfilePicture     *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
	ProfilePictureFull *string "json:\"profilePictureFull,omitempty\" graphql:\"profilePictureFull\""
}

func (t *BlogPostByAdmin_BlogPostByAdmin_Comments_Customer) GetEmail() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments_Customer{}
	}
	return t.Email
}
func (t *BlogPostByAdmin_BlogPostByAdmin_Comments_Customer) GetFirstName() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments_Customer{}
	}
	return t.FirstName
}
func (t *BlogPostByAdmin_BlogPostByAdmin_Comments_Customer) GetLastName() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments_Customer{}
	}
	return t.LastName
}
func (t *BlogPostByAdmin_BlogPostByAdmin_Comments_Customer) GetPhone() *string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments_Customer{}
	}
	return t.Phone
}
func (t *BlogPostByAdmin_BlogPostByAdmin_Comments_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments_Customer{}
	}
	return t.ProfilePicture
}
func (t *BlogPostByAdmin_BlogPostByAdmin_Comments_Customer) GetProfilePictureFull() *string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments_Customer{}
	}
	return t.ProfilePictureFull
}

type BlogPostByAdmin_BlogPostByAdmin_Comments struct {
	ID        string                                            "json:\"id\" graphql:\"id\""
	Customer  BlogPostByAdmin_BlogPostByAdmin_Comments_Customer "json:\"customer\" graphql:\"customer\""
	CreatedAt string                                            "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt *string                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Content   string                                            "json:\"content\" graphql:\"content\""
}

func (t *BlogPostByAdmin_BlogPostByAdmin_Comments) GetID() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments{}
	}
	return t.ID
}
func (t *BlogPostByAdmin_BlogPostByAdmin_Comments) GetCustomer() *BlogPostByAdmin_BlogPostByAdmin_Comments_Customer {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments{}
	}
	return &t.Customer
}
func (t *BlogPostByAdmin_BlogPostByAdmin_Comments) GetCreatedAt() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments{}
	}
	return t.CreatedAt
}
func (t *BlogPostByAdmin_BlogPostByAdmin_Comments) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments{}
	}
	return t.UpdatedAt
}
func (t *BlogPostByAdmin_BlogPostByAdmin_Comments) GetContent() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin_Comments{}
	}
	return t.Content
}

type BlogPostByAdmin_BlogPostByAdmin struct {
	ID              string                                      "json:\"id\" graphql:\"id\""
	Slug            *string                                     "json:\"slug,omitempty\" graphql:\"slug\""
	Title           string                                      "json:\"title\" graphql:\"title\""
	IsPublished     bool                                        "json:\"isPublished\" graphql:\"isPublished\""
	BannerImage     *string                                     "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	BannerImageFull *string                                     "json:\"bannerImageFull,omitempty\" graphql:\"bannerImageFull\""
	Content         string                                      "json:\"content\" graphql:\"content\""
	CreatedAt       string                                      "json:\"createdAt\" graphql:\"createdAt\""
	Favourites      int                                         "json:\"favourites\" graphql:\"favourites\""
	IsFeatured      bool                                        "json:\"isFeatured\" graphql:\"isFeatured\""
	Views           int                                         "json:\"views\" graphql:\"views\""
	UpdatedAt       *string                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Comments        []*BlogPostByAdmin_BlogPostByAdmin_Comments "json:\"comments\" graphql:\"comments\""
	Tags            []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *BlogPostByAdmin_BlogPostByAdmin) GetID() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.ID
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetSlug() *string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.Slug
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetTitle() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.Title
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetIsPublished() bool {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.IsPublished
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetBannerImage() *string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.BannerImage
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetBannerImageFull() *string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.BannerImageFull
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetContent() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.Content
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetCreatedAt() string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.CreatedAt
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetFavourites() int {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.Favourites
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetIsFeatured() bool {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.IsFeatured
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetViews() int {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.Views
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.UpdatedAt
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetComments() []*BlogPostByAdmin_BlogPostByAdmin_Comments {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.Comments
}
func (t *BlogPostByAdmin_BlogPostByAdmin) GetTags() []string {
	if t == nil {
		t = &BlogPostByAdmin_BlogPostByAdmin{}
	}
	return t.Tags
}

type BlogPostBySlug_BlogPostBySlug_Comments_Customer struct {
	Email              string  "json:\"email\" graphql:\"email\""
	FirstName          string  "json:\"firstName\" graphql:\"firstName\""
	LastName           string  "json:\"lastName\" graphql:\"lastName\""
	Phone              *string "json:\"phone,omitempty\" graphql:\"phone\""
	ProfilePicture     *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
	ProfilePictureFull *string "json:\"profilePictureFull,omitempty\" graphql:\"profilePictureFull\""
}

func (t *BlogPostBySlug_BlogPostBySlug_Comments_Customer) GetEmail() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments_Customer{}
	}
	return t.Email
}
func (t *BlogPostBySlug_BlogPostBySlug_Comments_Customer) GetFirstName() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments_Customer{}
	}
	return t.FirstName
}
func (t *BlogPostBySlug_BlogPostBySlug_Comments_Customer) GetLastName() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments_Customer{}
	}
	return t.LastName
}
func (t *BlogPostBySlug_BlogPostBySlug_Comments_Customer) GetPhone() *string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments_Customer{}
	}
	return t.Phone
}
func (t *BlogPostBySlug_BlogPostBySlug_Comments_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments_Customer{}
	}
	return t.ProfilePicture
}
func (t *BlogPostBySlug_BlogPostBySlug_Comments_Customer) GetProfilePictureFull() *string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments_Customer{}
	}
	return t.ProfilePictureFull
}

type BlogPostBySlug_BlogPostBySlug_Comments struct {
	ID        string                                          "json:\"id\" graphql:\"id\""
	Customer  BlogPostBySlug_BlogPostBySlug_Comments_Customer "json:\"customer\" graphql:\"customer\""
	CreatedAt string                                          "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt *string                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Content   string                                          "json:\"content\" graphql:\"content\""
}

func (t *BlogPostBySlug_BlogPostBySlug_Comments) GetID() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments{}
	}
	return t.ID
}
func (t *BlogPostBySlug_BlogPostBySlug_Comments) GetCustomer() *BlogPostBySlug_BlogPostBySlug_Comments_Customer {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments{}
	}
	return &t.Customer
}
func (t *BlogPostBySlug_BlogPostBySlug_Comments) GetCreatedAt() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments{}
	}
	return t.CreatedAt
}
func (t *BlogPostBySlug_BlogPostBySlug_Comments) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments{}
	}
	return t.UpdatedAt
}
func (t *BlogPostBySlug_BlogPostBySlug_Comments) GetContent() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug_Comments{}
	}
	return t.Content
}

type BlogPostBySlug_BlogPostBySlug struct {
	ID              string                                    "json:\"id\" graphql:\"id\""
	Slug            *string                                   "json:\"slug,omitempty\" graphql:\"slug\""
	Title           string                                    "json:\"title\" graphql:\"title\""
	IsPublished     bool                                      "json:\"isPublished\" graphql:\"isPublished\""
	BannerImage     *string                                   "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	BannerImageFull *string                                   "json:\"bannerImageFull,omitempty\" graphql:\"bannerImageFull\""
	Content         string                                    "json:\"content\" graphql:\"content\""
	CreatedAt       string                                    "json:\"createdAt\" graphql:\"createdAt\""
	Favourites      int                                       "json:\"favourites\" graphql:\"favourites\""
	IsFeatured      bool                                      "json:\"isFeatured\" graphql:\"isFeatured\""
	Views           int                                       "json:\"views\" graphql:\"views\""
	UpdatedAt       *string                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Comments        []*BlogPostBySlug_BlogPostBySlug_Comments "json:\"comments\" graphql:\"comments\""
	Tags            []string                                  "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *BlogPostBySlug_BlogPostBySlug) GetID() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.ID
}
func (t *BlogPostBySlug_BlogPostBySlug) GetSlug() *string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.Slug
}
func (t *BlogPostBySlug_BlogPostBySlug) GetTitle() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.Title
}
func (t *BlogPostBySlug_BlogPostBySlug) GetIsPublished() bool {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.IsPublished
}
func (t *BlogPostBySlug_BlogPostBySlug) GetBannerImage() *string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.BannerImage
}
func (t *BlogPostBySlug_BlogPostBySlug) GetBannerImageFull() *string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.BannerImageFull
}
func (t *BlogPostBySlug_BlogPostBySlug) GetContent() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.Content
}
func (t *BlogPostBySlug_BlogPostBySlug) GetCreatedAt() string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.CreatedAt
}
func (t *BlogPostBySlug_BlogPostBySlug) GetFavourites() int {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.Favourites
}
func (t *BlogPostBySlug_BlogPostBySlug) GetIsFeatured() bool {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.IsFeatured
}
func (t *BlogPostBySlug_BlogPostBySlug) GetViews() int {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.Views
}
func (t *BlogPostBySlug_BlogPostBySlug) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.UpdatedAt
}
func (t *BlogPostBySlug_BlogPostBySlug) GetComments() []*BlogPostBySlug_BlogPostBySlug_Comments {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.Comments
}
func (t *BlogPostBySlug_BlogPostBySlug) GetTags() []string {
	if t == nil {
		t = &BlogPostBySlug_BlogPostBySlug{}
	}
	return t.Tags
}

type BlogPosts_BlogPosts_Comments_Customer struct {
	Email              string  "json:\"email\" graphql:\"email\""
	FirstName          string  "json:\"firstName\" graphql:\"firstName\""
	LastName           string  "json:\"lastName\" graphql:\"lastName\""
	Phone              *string "json:\"phone,omitempty\" graphql:\"phone\""
	ProfilePicture     *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
	ProfilePictureFull *string "json:\"profilePictureFull,omitempty\" graphql:\"profilePictureFull\""
}

func (t *BlogPosts_BlogPosts_Comments_Customer) GetEmail() string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments_Customer{}
	}
	return t.Email
}
func (t *BlogPosts_BlogPosts_Comments_Customer) GetFirstName() string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments_Customer{}
	}
	return t.FirstName
}
func (t *BlogPosts_BlogPosts_Comments_Customer) GetLastName() string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments_Customer{}
	}
	return t.LastName
}
func (t *BlogPosts_BlogPosts_Comments_Customer) GetPhone() *string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments_Customer{}
	}
	return t.Phone
}
func (t *BlogPosts_BlogPosts_Comments_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments_Customer{}
	}
	return t.ProfilePicture
}
func (t *BlogPosts_BlogPosts_Comments_Customer) GetProfilePictureFull() *string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments_Customer{}
	}
	return t.ProfilePictureFull
}

type BlogPosts_BlogPosts_Comments struct {
	ID        string                                "json:\"id\" graphql:\"id\""
	Customer  BlogPosts_BlogPosts_Comments_Customer "json:\"customer\" graphql:\"customer\""
	CreatedAt string                                "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt *string                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Content   string                                "json:\"content\" graphql:\"content\""
}

func (t *BlogPosts_BlogPosts_Comments) GetID() string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments{}
	}
	return t.ID
}
func (t *BlogPosts_BlogPosts_Comments) GetCustomer() *BlogPosts_BlogPosts_Comments_Customer {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments{}
	}
	return &t.Customer
}
func (t *BlogPosts_BlogPosts_Comments) GetCreatedAt() string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments{}
	}
	return t.CreatedAt
}
func (t *BlogPosts_BlogPosts_Comments) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments{}
	}
	return t.UpdatedAt
}
func (t *BlogPosts_BlogPosts_Comments) GetContent() string {
	if t == nil {
		t = &BlogPosts_BlogPosts_Comments{}
	}
	return t.Content
}

type BlogPosts_BlogPosts struct {
	ID              string                          "json:\"id\" graphql:\"id\""
	Slug            *string                         "json:\"slug,omitempty\" graphql:\"slug\""
	Title           string                          "json:\"title\" graphql:\"title\""
	IsPublished     bool                            "json:\"isPublished\" graphql:\"isPublished\""
	BannerImage     *string                         "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	BannerImageFull *string                         "json:\"bannerImageFull,omitempty\" graphql:\"bannerImageFull\""
	Content         string                          "json:\"content\" graphql:\"content\""
	CreatedAt       string                          "json:\"createdAt\" graphql:\"createdAt\""
	Favourites      int                             "json:\"favourites\" graphql:\"favourites\""
	IsFeatured      bool                            "json:\"isFeatured\" graphql:\"isFeatured\""
	Views           int                             "json:\"views\" graphql:\"views\""
	UpdatedAt       *string                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Comments        []*BlogPosts_BlogPosts_Comments "json:\"comments\" graphql:\"comments\""
	Tags            []string                        "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *BlogPosts_BlogPosts) GetID() string {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.ID
}
func (t *BlogPosts_BlogPosts) GetSlug() *string {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.Slug
}
func (t *BlogPosts_BlogPosts) GetTitle() string {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.Title
}
func (t *BlogPosts_BlogPosts) GetIsPublished() bool {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.IsPublished
}
func (t *BlogPosts_BlogPosts) GetBannerImage() *string {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.BannerImage
}
func (t *BlogPosts_BlogPosts) GetBannerImageFull() *string {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.BannerImageFull
}
func (t *BlogPosts_BlogPosts) GetContent() string {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.Content
}
func (t *BlogPosts_BlogPosts) GetCreatedAt() string {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.CreatedAt
}
func (t *BlogPosts_BlogPosts) GetFavourites() int {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.Favourites
}
func (t *BlogPosts_BlogPosts) GetIsFeatured() bool {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.IsFeatured
}
func (t *BlogPosts_BlogPosts) GetViews() int {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.Views
}
func (t *BlogPosts_BlogPosts) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.UpdatedAt
}
func (t *BlogPosts_BlogPosts) GetComments() []*BlogPosts_BlogPosts_Comments {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.Comments
}
func (t *BlogPosts_BlogPosts) GetTags() []string {
	if t == nil {
		t = &BlogPosts_BlogPosts{}
	}
	return t.Tags
}

type BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer struct {
	Email              string  "json:\"email\" graphql:\"email\""
	FirstName          string  "json:\"firstName\" graphql:\"firstName\""
	LastName           string  "json:\"lastName\" graphql:\"lastName\""
	Phone              *string "json:\"phone,omitempty\" graphql:\"phone\""
	ProfilePicture     *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
	ProfilePictureFull *string "json:\"profilePictureFull,omitempty\" graphql:\"profilePictureFull\""
}

func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer) GetEmail() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer{}
	}
	return t.Email
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer) GetFirstName() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer{}
	}
	return t.FirstName
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer) GetLastName() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer{}
	}
	return t.LastName
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer) GetPhone() *string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer{}
	}
	return t.Phone
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer{}
	}
	return t.ProfilePicture
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer) GetProfilePictureFull() *string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer{}
	}
	return t.ProfilePictureFull
}

type BlogPostsByAdmin_BlogPostsByAdmin_Comments struct {
	ID        string                                              "json:\"id\" graphql:\"id\""
	Customer  BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer "json:\"customer\" graphql:\"customer\""
	CreatedAt string                                              "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt *string                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Content   string                                              "json:\"content\" graphql:\"content\""
}

func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments) GetID() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments{}
	}
	return t.ID
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments) GetCustomer() *BlogPostsByAdmin_BlogPostsByAdmin_Comments_Customer {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments{}
	}
	return &t.Customer
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments) GetCreatedAt() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments{}
	}
	return t.CreatedAt
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments{}
	}
	return t.UpdatedAt
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin_Comments) GetContent() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin_Comments{}
	}
	return t.Content
}

type BlogPostsByAdmin_BlogPostsByAdmin struct {
	ID              string                                        "json:\"id\" graphql:\"id\""
	Slug            *string                                       "json:\"slug,omitempty\" graphql:\"slug\""
	Title           string                                        "json:\"title\" graphql:\"title\""
	IsPublished     bool                                          "json:\"isPublished\" graphql:\"isPublished\""
	BannerImage     *string                                       "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	BannerImageFull *string                                       "json:\"bannerImageFull,omitempty\" graphql:\"bannerImageFull\""
	Content         string                                        "json:\"content\" graphql:\"content\""
	CreatedAt       string                                        "json:\"createdAt\" graphql:\"createdAt\""
	Favourites      int                                           "json:\"favourites\" graphql:\"favourites\""
	IsFeatured      bool                                          "json:\"isFeatured\" graphql:\"isFeatured\""
	Views           int                                           "json:\"views\" graphql:\"views\""
	UpdatedAt       *string                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Comments        []*BlogPostsByAdmin_BlogPostsByAdmin_Comments "json:\"comments\" graphql:\"comments\""
	Tags            []string                                      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetID() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.ID
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetSlug() *string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.Slug
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetTitle() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.Title
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetIsPublished() bool {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.IsPublished
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetBannerImage() *string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.BannerImage
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetBannerImageFull() *string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.BannerImageFull
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetContent() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.Content
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetCreatedAt() string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.CreatedAt
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetFavourites() int {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.Favourites
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetIsFeatured() bool {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.IsFeatured
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetViews() int {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.Views
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetUpdatedAt() *string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.UpdatedAt
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetComments() []*BlogPostsByAdmin_BlogPostsByAdmin_Comments {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.Comments
}
func (t *BlogPostsByAdmin_BlogPostsByAdmin) GetTags() []string {
	if t == nil {
		t = &BlogPostsByAdmin_BlogPostsByAdmin{}
	}
	return t.Tags
}

type Cart_Cart_CartItems_Product struct {
	ID                      string              "json:\"id\" graphql:\"id\""
	Slug                    string              "json:\"slug\" graphql:\"slug\""
	Description             string              "json:\"description\" graphql:\"description\""
	Name                    string              "json:\"name\" graphql:\"name\""
	Price                   int                 "json:\"price\" graphql:\"price\""
	ProductSpecificDiscount int                 "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	ProductUnit             *models.ProductUnit "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	IsDigitalProduct        bool                "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
}

func (t *Cart_Cart_CartItems_Product) GetID() string {
	if t == nil {
		t = &Cart_Cart_CartItems_Product{}
	}
	return t.ID
}
func (t *Cart_Cart_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &Cart_Cart_CartItems_Product{}
	}
	return t.Slug
}
func (t *Cart_Cart_CartItems_Product) GetDescription() string {
	if t == nil {
		t = &Cart_Cart_CartItems_Product{}
	}
	return t.Description
}
func (t *Cart_Cart_CartItems_Product) GetName() string {
	if t == nil {
		t = &Cart_Cart_CartItems_Product{}
	}
	return t.Name
}
func (t *Cart_Cart_CartItems_Product) GetPrice() int {
	if t == nil {
		t = &Cart_Cart_CartItems_Product{}
	}
	return t.Price
}
func (t *Cart_Cart_CartItems_Product) GetProductSpecificDiscount() int {
	if t == nil {
		t = &Cart_Cart_CartItems_Product{}
	}
	return t.ProductSpecificDiscount
}
func (t *Cart_Cart_CartItems_Product) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &Cart_Cart_CartItems_Product{}
	}
	return t.ProductUnit
}
func (t *Cart_Cart_CartItems_Product) GetIsDigitalProduct() bool {
	if t == nil {
		t = &Cart_Cart_CartItems_Product{}
	}
	return t.IsDigitalProduct
}

type Cart_Cart_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *Cart_Cart_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &Cart_Cart_CartItems_Attributes{}
	}
	return t.Name
}
func (t *Cart_Cart_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &Cart_Cart_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type Cart_Cart_CartItems_Variation struct {
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	ID    string  "json:\"id\" graphql:\"id\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *Cart_Cart_CartItems_Variation) GetName() string {
	if t == nil {
		t = &Cart_Cart_CartItems_Variation{}
	}
	return t.Name
}
func (t *Cart_Cart_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &Cart_Cart_CartItems_Variation{}
	}
	return t.Price
}
func (t *Cart_Cart_CartItems_Variation) GetID() string {
	if t == nil {
		t = &Cart_Cart_CartItems_Variation{}
	}
	return t.ID
}
func (t *Cart_Cart_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &Cart_Cart_CartItems_Variation{}
	}
	return t.Sku
}
func (t *Cart_Cart_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &Cart_Cart_CartItems_Variation{}
	}
	return t.Stock
}

type Cart_Cart_CartItems struct {
	ID            int                               "json:\"id\" graphql:\"id\""
	PurchasePrice int                               "json:\"purchasePrice\" graphql:\"purchasePrice\""
	Quantity      int                               "json:\"quantity\" graphql:\"quantity\""
	Product       Cart_Cart_CartItems_Product       "json:\"product\" graphql:\"product\""
	Attributes    []*Cart_Cart_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation     *Cart_Cart_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *Cart_Cart_CartItems) GetID() int {
	if t == nil {
		t = &Cart_Cart_CartItems{}
	}
	return t.ID
}
func (t *Cart_Cart_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &Cart_Cart_CartItems{}
	}
	return t.PurchasePrice
}
func (t *Cart_Cart_CartItems) GetQuantity() int {
	if t == nil {
		t = &Cart_Cart_CartItems{}
	}
	return t.Quantity
}
func (t *Cart_Cart_CartItems) GetProduct() *Cart_Cart_CartItems_Product {
	if t == nil {
		t = &Cart_Cart_CartItems{}
	}
	return &t.Product
}
func (t *Cart_Cart_CartItems) GetAttributes() []*Cart_Cart_CartItems_Attributes {
	if t == nil {
		t = &Cart_Cart_CartItems{}
	}
	return t.Attributes
}
func (t *Cart_Cart_CartItems) GetVariation() *Cart_Cart_CartItems_Variation {
	if t == nil {
		t = &Cart_Cart_CartItems{}
	}
	return t.Variation
}

type Cart_Cart struct {
	ID                 string                 "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                   "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*Cart_Cart_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *Cart_Cart) GetID() string {
	if t == nil {
		t = &Cart_Cart{}
	}
	return t.ID
}
func (t *Cart_Cart) GetIsShippingRequired() bool {
	if t == nil {
		t = &Cart_Cart{}
	}
	return t.IsShippingRequired
}
func (t *Cart_Cart) GetCartItems() []*Cart_Cart_CartItems {
	if t == nil {
		t = &Cart_Cart{}
	}
	return t.CartItems
}

type Categories_Categories struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Name         string  "json:\"name\" graphql:\"name\""
	Slug         string  "json:\"slug\" graphql:\"slug\""
	Description  *string "json:\"description,omitempty\" graphql:\"description\""
	Image        *string "json:\"image,omitempty\" graphql:\"image\""
	FullImage    *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
	ProductCount int     "json:\"productCount\" graphql:\"productCount\""
	Position     int     "json:\"position\" graphql:\"position\""
}

func (t *Categories_Categories) GetID() string {
	if t == nil {
		t = &Categories_Categories{}
	}
	return t.ID
}
func (t *Categories_Categories) GetName() string {
	if t == nil {
		t = &Categories_Categories{}
	}
	return t.Name
}
func (t *Categories_Categories) GetSlug() string {
	if t == nil {
		t = &Categories_Categories{}
	}
	return t.Slug
}
func (t *Categories_Categories) GetDescription() *string {
	if t == nil {
		t = &Categories_Categories{}
	}
	return t.Description
}
func (t *Categories_Categories) GetImage() *string {
	if t == nil {
		t = &Categories_Categories{}
	}
	return t.Image
}
func (t *Categories_Categories) GetFullImage() *string {
	if t == nil {
		t = &Categories_Categories{}
	}
	return t.FullImage
}
func (t *Categories_Categories) GetProductCount() int {
	if t == nil {
		t = &Categories_Categories{}
	}
	return t.ProductCount
}
func (t *Categories_Categories) GetPosition() int {
	if t == nil {
		t = &Categories_Categories{}
	}
	return t.Position
}

type CategoriesByAdmin_CategoriesByAdmin struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Name         string  "json:\"name\" graphql:\"name\""
	Slug         string  "json:\"slug\" graphql:\"slug\""
	Description  *string "json:\"description,omitempty\" graphql:\"description\""
	Image        *string "json:\"image,omitempty\" graphql:\"image\""
	FullImage    *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
	ProductCount int     "json:\"productCount\" graphql:\"productCount\""
	Position     int     "json:\"position\" graphql:\"position\""
	IsPublished  bool    "json:\"isPublished\" graphql:\"isPublished\""
}

func (t *CategoriesByAdmin_CategoriesByAdmin) GetID() string {
	if t == nil {
		t = &CategoriesByAdmin_CategoriesByAdmin{}
	}
	return t.ID
}
func (t *CategoriesByAdmin_CategoriesByAdmin) GetName() string {
	if t == nil {
		t = &CategoriesByAdmin_CategoriesByAdmin{}
	}
	return t.Name
}
func (t *CategoriesByAdmin_CategoriesByAdmin) GetSlug() string {
	if t == nil {
		t = &CategoriesByAdmin_CategoriesByAdmin{}
	}
	return t.Slug
}
func (t *CategoriesByAdmin_CategoriesByAdmin) GetDescription() *string {
	if t == nil {
		t = &CategoriesByAdmin_CategoriesByAdmin{}
	}
	return t.Description
}
func (t *CategoriesByAdmin_CategoriesByAdmin) GetImage() *string {
	if t == nil {
		t = &CategoriesByAdmin_CategoriesByAdmin{}
	}
	return t.Image
}
func (t *CategoriesByAdmin_CategoriesByAdmin) GetFullImage() *string {
	if t == nil {
		t = &CategoriesByAdmin_CategoriesByAdmin{}
	}
	return t.FullImage
}
func (t *CategoriesByAdmin_CategoriesByAdmin) GetProductCount() int {
	if t == nil {
		t = &CategoriesByAdmin_CategoriesByAdmin{}
	}
	return t.ProductCount
}
func (t *CategoriesByAdmin_CategoriesByAdmin) GetPosition() int {
	if t == nil {
		t = &CategoriesByAdmin_CategoriesByAdmin{}
	}
	return t.Position
}
func (t *CategoriesByAdmin_CategoriesByAdmin) GetIsPublished() bool {
	if t == nil {
		t = &CategoriesByAdmin_CategoriesByAdmin{}
	}
	return t.IsPublished
}

type Category_Category struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Name         string  "json:\"name\" graphql:\"name\""
	Slug         string  "json:\"slug\" graphql:\"slug\""
	Description  *string "json:\"description,omitempty\" graphql:\"description\""
	Image        *string "json:\"image,omitempty\" graphql:\"image\""
	FullImage    *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
	ProductCount int     "json:\"productCount\" graphql:\"productCount\""
	Position     int     "json:\"position\" graphql:\"position\""
}

func (t *Category_Category) GetID() string {
	if t == nil {
		t = &Category_Category{}
	}
	return t.ID
}
func (t *Category_Category) GetName() string {
	if t == nil {
		t = &Category_Category{}
	}
	return t.Name
}
func (t *Category_Category) GetSlug() string {
	if t == nil {
		t = &Category_Category{}
	}
	return t.Slug
}
func (t *Category_Category) GetDescription() *string {
	if t == nil {
		t = &Category_Category{}
	}
	return t.Description
}
func (t *Category_Category) GetImage() *string {
	if t == nil {
		t = &Category_Category{}
	}
	return t.Image
}
func (t *Category_Category) GetFullImage() *string {
	if t == nil {
		t = &Category_Category{}
	}
	return t.FullImage
}
func (t *Category_Category) GetProductCount() int {
	if t == nil {
		t = &Category_Category{}
	}
	return t.ProductCount
}
func (t *Category_Category) GetPosition() int {
	if t == nil {
		t = &Category_Category{}
	}
	return t.Position
}

type CategoryByAdmin_CategoryByAdmin struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Name         string  "json:\"name\" graphql:\"name\""
	Slug         string  "json:\"slug\" graphql:\"slug\""
	Description  *string "json:\"description,omitempty\" graphql:\"description\""
	Image        *string "json:\"image,omitempty\" graphql:\"image\""
	FullImage    *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
	ProductCount int     "json:\"productCount\" graphql:\"productCount\""
	Position     int     "json:\"position\" graphql:\"position\""
	IsPublished  bool    "json:\"isPublished\" graphql:\"isPublished\""
}

func (t *CategoryByAdmin_CategoryByAdmin) GetID() string {
	if t == nil {
		t = &CategoryByAdmin_CategoryByAdmin{}
	}
	return t.ID
}
func (t *CategoryByAdmin_CategoryByAdmin) GetName() string {
	if t == nil {
		t = &CategoryByAdmin_CategoryByAdmin{}
	}
	return t.Name
}
func (t *CategoryByAdmin_CategoryByAdmin) GetSlug() string {
	if t == nil {
		t = &CategoryByAdmin_CategoryByAdmin{}
	}
	return t.Slug
}
func (t *CategoryByAdmin_CategoryByAdmin) GetDescription() *string {
	if t == nil {
		t = &CategoryByAdmin_CategoryByAdmin{}
	}
	return t.Description
}
func (t *CategoryByAdmin_CategoryByAdmin) GetImage() *string {
	if t == nil {
		t = &CategoryByAdmin_CategoryByAdmin{}
	}
	return t.Image
}
func (t *CategoryByAdmin_CategoryByAdmin) GetFullImage() *string {
	if t == nil {
		t = &CategoryByAdmin_CategoryByAdmin{}
	}
	return t.FullImage
}
func (t *CategoryByAdmin_CategoryByAdmin) GetProductCount() int {
	if t == nil {
		t = &CategoryByAdmin_CategoryByAdmin{}
	}
	return t.ProductCount
}
func (t *CategoryByAdmin_CategoryByAdmin) GetPosition() int {
	if t == nil {
		t = &CategoryByAdmin_CategoryByAdmin{}
	}
	return t.Position
}
func (t *CategoryByAdmin_CategoryByAdmin) GetIsPublished() bool {
	if t == nil {
		t = &CategoryByAdmin_CategoryByAdmin{}
	}
	return t.IsPublished
}

type Collection_Collection struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Name         string  "json:\"name\" graphql:\"name\""
	Slug         string  "json:\"slug\" graphql:\"slug\""
	Description  *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage    *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
	Image        *string "json:\"image,omitempty\" graphql:\"image\""
	Position     int     "json:\"position\" graphql:\"position\""
	ProductCount int     "json:\"productCount\" graphql:\"productCount\""
}

func (t *Collection_Collection) GetID() string {
	if t == nil {
		t = &Collection_Collection{}
	}
	return t.ID
}
func (t *Collection_Collection) GetName() string {
	if t == nil {
		t = &Collection_Collection{}
	}
	return t.Name
}
func (t *Collection_Collection) GetSlug() string {
	if t == nil {
		t = &Collection_Collection{}
	}
	return t.Slug
}
func (t *Collection_Collection) GetDescription() *string {
	if t == nil {
		t = &Collection_Collection{}
	}
	return t.Description
}
func (t *Collection_Collection) GetFullImage() *string {
	if t == nil {
		t = &Collection_Collection{}
	}
	return t.FullImage
}
func (t *Collection_Collection) GetImage() *string {
	if t == nil {
		t = &Collection_Collection{}
	}
	return t.Image
}
func (t *Collection_Collection) GetPosition() int {
	if t == nil {
		t = &Collection_Collection{}
	}
	return t.Position
}
func (t *Collection_Collection) GetProductCount() int {
	if t == nil {
		t = &Collection_Collection{}
	}
	return t.ProductCount
}

type CollectionByAdmin_CollectionByAdmin struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Name         string  "json:\"name\" graphql:\"name\""
	Slug         string  "json:\"slug\" graphql:\"slug\""
	Description  *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage    *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
	Image        *string "json:\"image,omitempty\" graphql:\"image\""
	Position     int     "json:\"position\" graphql:\"position\""
	ProductCount int     "json:\"productCount\" graphql:\"productCount\""
	IsPublished  bool    "json:\"isPublished\" graphql:\"isPublished\""
}

func (t *CollectionByAdmin_CollectionByAdmin) GetID() string {
	if t == nil {
		t = &CollectionByAdmin_CollectionByAdmin{}
	}
	return t.ID
}
func (t *CollectionByAdmin_CollectionByAdmin) GetName() string {
	if t == nil {
		t = &CollectionByAdmin_CollectionByAdmin{}
	}
	return t.Name
}
func (t *CollectionByAdmin_CollectionByAdmin) GetSlug() string {
	if t == nil {
		t = &CollectionByAdmin_CollectionByAdmin{}
	}
	return t.Slug
}
func (t *CollectionByAdmin_CollectionByAdmin) GetDescription() *string {
	if t == nil {
		t = &CollectionByAdmin_CollectionByAdmin{}
	}
	return t.Description
}
func (t *CollectionByAdmin_CollectionByAdmin) GetFullImage() *string {
	if t == nil {
		t = &CollectionByAdmin_CollectionByAdmin{}
	}
	return t.FullImage
}
func (t *CollectionByAdmin_CollectionByAdmin) GetImage() *string {
	if t == nil {
		t = &CollectionByAdmin_CollectionByAdmin{}
	}
	return t.Image
}
func (t *CollectionByAdmin_CollectionByAdmin) GetPosition() int {
	if t == nil {
		t = &CollectionByAdmin_CollectionByAdmin{}
	}
	return t.Position
}
func (t *CollectionByAdmin_CollectionByAdmin) GetProductCount() int {
	if t == nil {
		t = &CollectionByAdmin_CollectionByAdmin{}
	}
	return t.ProductCount
}
func (t *CollectionByAdmin_CollectionByAdmin) GetIsPublished() bool {
	if t == nil {
		t = &CollectionByAdmin_CollectionByAdmin{}
	}
	return t.IsPublished
}

type Collections_Collections struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Name         string  "json:\"name\" graphql:\"name\""
	Slug         string  "json:\"slug\" graphql:\"slug\""
	Description  *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage    *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
	Image        *string "json:\"image,omitempty\" graphql:\"image\""
	Position     int     "json:\"position\" graphql:\"position\""
	ProductCount int     "json:\"productCount\" graphql:\"productCount\""
}

func (t *Collections_Collections) GetID() string {
	if t == nil {
		t = &Collections_Collections{}
	}
	return t.ID
}
func (t *Collections_Collections) GetName() string {
	if t == nil {
		t = &Collections_Collections{}
	}
	return t.Name
}
func (t *Collections_Collections) GetSlug() string {
	if t == nil {
		t = &Collections_Collections{}
	}
	return t.Slug
}
func (t *Collections_Collections) GetDescription() *string {
	if t == nil {
		t = &Collections_Collections{}
	}
	return t.Description
}
func (t *Collections_Collections) GetFullImage() *string {
	if t == nil {
		t = &Collections_Collections{}
	}
	return t.FullImage
}
func (t *Collections_Collections) GetImage() *string {
	if t == nil {
		t = &Collections_Collections{}
	}
	return t.Image
}
func (t *Collections_Collections) GetPosition() int {
	if t == nil {
		t = &Collections_Collections{}
	}
	return t.Position
}
func (t *Collections_Collections) GetProductCount() int {
	if t == nil {
		t = &Collections_Collections{}
	}
	return t.ProductCount
}

type CollectionsByAdmin_CollectionsByAdmin struct {
	ID           string  "json:\"id\" graphql:\"id\""
	Name         string  "json:\"name\" graphql:\"name\""
	Slug         string  "json:\"slug\" graphql:\"slug\""
	Description  *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage    *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
	Image        *string "json:\"image,omitempty\" graphql:\"image\""
	Position     int     "json:\"position\" graphql:\"position\""
	ProductCount int     "json:\"productCount\" graphql:\"productCount\""
	IsPublished  bool    "json:\"isPublished\" graphql:\"isPublished\""
}

func (t *CollectionsByAdmin_CollectionsByAdmin) GetID() string {
	if t == nil {
		t = &CollectionsByAdmin_CollectionsByAdmin{}
	}
	return t.ID
}
func (t *CollectionsByAdmin_CollectionsByAdmin) GetName() string {
	if t == nil {
		t = &CollectionsByAdmin_CollectionsByAdmin{}
	}
	return t.Name
}
func (t *CollectionsByAdmin_CollectionsByAdmin) GetSlug() string {
	if t == nil {
		t = &CollectionsByAdmin_CollectionsByAdmin{}
	}
	return t.Slug
}
func (t *CollectionsByAdmin_CollectionsByAdmin) GetDescription() *string {
	if t == nil {
		t = &CollectionsByAdmin_CollectionsByAdmin{}
	}
	return t.Description
}
func (t *CollectionsByAdmin_CollectionsByAdmin) GetFullImage() *string {
	if t == nil {
		t = &CollectionsByAdmin_CollectionsByAdmin{}
	}
	return t.FullImage
}
func (t *CollectionsByAdmin_CollectionsByAdmin) GetImage() *string {
	if t == nil {
		t = &CollectionsByAdmin_CollectionsByAdmin{}
	}
	return t.Image
}
func (t *CollectionsByAdmin_CollectionsByAdmin) GetPosition() int {
	if t == nil {
		t = &CollectionsByAdmin_CollectionsByAdmin{}
	}
	return t.Position
}
func (t *CollectionsByAdmin_CollectionsByAdmin) GetProductCount() int {
	if t == nil {
		t = &CollectionsByAdmin_CollectionsByAdmin{}
	}
	return t.ProductCount
}
func (t *CollectionsByAdmin_CollectionsByAdmin) GetIsPublished() bool {
	if t == nil {
		t = &CollectionsByAdmin_CollectionsByAdmin{}
	}
	return t.IsPublished
}

type CouponCode_CouponCode_Customers struct {
	Email              string  "json:\"email\" graphql:\"email\""
	FirstName          string  "json:\"firstName\" graphql:\"firstName\""
	LastName           string  "json:\"lastName\" graphql:\"lastName\""
	ProfilePictureFull *string "json:\"profilePictureFull,omitempty\" graphql:\"profilePictureFull\""
	ProfilePicture     *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
	Phone              *string "json:\"phone,omitempty\" graphql:\"phone\""
}

func (t *CouponCode_CouponCode_Customers) GetEmail() string {
	if t == nil {
		t = &CouponCode_CouponCode_Customers{}
	}
	return t.Email
}
func (t *CouponCode_CouponCode_Customers) GetFirstName() string {
	if t == nil {
		t = &CouponCode_CouponCode_Customers{}
	}
	return t.FirstName
}
func (t *CouponCode_CouponCode_Customers) GetLastName() string {
	if t == nil {
		t = &CouponCode_CouponCode_Customers{}
	}
	return t.LastName
}
func (t *CouponCode_CouponCode_Customers) GetProfilePictureFull() *string {
	if t == nil {
		t = &CouponCode_CouponCode_Customers{}
	}
	return t.ProfilePictureFull
}
func (t *CouponCode_CouponCode_Customers) GetProfilePicture() *string {
	if t == nil {
		t = &CouponCode_CouponCode_Customers{}
	}
	return t.ProfilePicture
}
func (t *CouponCode_CouponCode_Customers) GetPhone() *string {
	if t == nil {
		t = &CouponCode_CouponCode_Customers{}
	}
	return t.Phone
}

type CouponCode_CouponCode struct {
	ID                string                             "json:\"id\" graphql:\"id\""
	UpdatedAt         *string                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedAt         string                             "json:\"createdAt\" graphql:\"createdAt\""
	Description       *string                            "json:\"description,omitempty\" graphql:\"description\""
	Image             *string                            "json:\"image,omitempty\" graphql:\"image\""
	Amount            int                                "json:\"amount\" graphql:\"amount\""
	Code              string                             "json:\"code\" graphql:\"code\""
	Customers         []*CouponCode_CouponCode_Customers "json:\"customers,omitempty\" graphql:\"customers\""
	DiscountType      models.DiscountType                "json:\"discountType\" graphql:\"discountType\""
	EndAt             *string                            "json:\"endAt,omitempty\" graphql:\"endAt\""
	IsActive          bool                               "json:\"isActive\" graphql:\"isActive\""
	IsFlatDiscount    bool                               "json:\"isFlatDiscount\" graphql:\"isFlatDiscount\""
	IsForNewUsersOnly bool                               "json:\"isForNewUsersOnly\" graphql:\"isForNewUsersOnly\""
	IsUserSpecific    bool                               "json:\"isUserSpecific\" graphql:\"isUserSpecific\""
	MaxDiscountAmount *int                               "json:\"maxDiscountAmount,omitempty\" graphql:\"maxDiscountAmount\""
	MaxUsage          *int                               "json:\"maxUsage,omitempty\" graphql:\"maxUsage\""
	MaxUsagePerUser   *int                               "json:\"maxUsagePerUser,omitempty\" graphql:\"maxUsagePerUser\""
	MinOrderAmount    *int                               "json:\"minOrderAmount,omitempty\" graphql:\"minOrderAmount\""
	StartAt           *string                            "json:\"startAt,omitempty\" graphql:\"startAt\""
}

func (t *CouponCode_CouponCode) GetID() string {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.ID
}
func (t *CouponCode_CouponCode) GetUpdatedAt() *string {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.UpdatedAt
}
func (t *CouponCode_CouponCode) GetCreatedAt() string {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.CreatedAt
}
func (t *CouponCode_CouponCode) GetDescription() *string {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.Description
}
func (t *CouponCode_CouponCode) GetImage() *string {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.Image
}
func (t *CouponCode_CouponCode) GetAmount() int {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.Amount
}
func (t *CouponCode_CouponCode) GetCode() string {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.Code
}
func (t *CouponCode_CouponCode) GetCustomers() []*CouponCode_CouponCode_Customers {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.Customers
}
func (t *CouponCode_CouponCode) GetDiscountType() *models.DiscountType {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return &t.DiscountType
}
func (t *CouponCode_CouponCode) GetEndAt() *string {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.EndAt
}
func (t *CouponCode_CouponCode) GetIsActive() bool {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.IsActive
}
func (t *CouponCode_CouponCode) GetIsFlatDiscount() bool {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.IsFlatDiscount
}
func (t *CouponCode_CouponCode) GetIsForNewUsersOnly() bool {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.IsForNewUsersOnly
}
func (t *CouponCode_CouponCode) GetIsUserSpecific() bool {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.IsUserSpecific
}
func (t *CouponCode_CouponCode) GetMaxDiscountAmount() *int {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.MaxDiscountAmount
}
func (t *CouponCode_CouponCode) GetMaxUsage() *int {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.MaxUsage
}
func (t *CouponCode_CouponCode) GetMaxUsagePerUser() *int {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.MaxUsagePerUser
}
func (t *CouponCode_CouponCode) GetMinOrderAmount() *int {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.MinOrderAmount
}
func (t *CouponCode_CouponCode) GetStartAt() *string {
	if t == nil {
		t = &CouponCode_CouponCode{}
	}
	return t.StartAt
}

type CouponCodes_CouponCodes_Customers struct {
	Email              string  "json:\"email\" graphql:\"email\""
	FirstName          string  "json:\"firstName\" graphql:\"firstName\""
	LastName           string  "json:\"lastName\" graphql:\"lastName\""
	ProfilePictureFull *string "json:\"profilePictureFull,omitempty\" graphql:\"profilePictureFull\""
	ProfilePicture     *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
	Phone              *string "json:\"phone,omitempty\" graphql:\"phone\""
}

func (t *CouponCodes_CouponCodes_Customers) GetEmail() string {
	if t == nil {
		t = &CouponCodes_CouponCodes_Customers{}
	}
	return t.Email
}
func (t *CouponCodes_CouponCodes_Customers) GetFirstName() string {
	if t == nil {
		t = &CouponCodes_CouponCodes_Customers{}
	}
	return t.FirstName
}
func (t *CouponCodes_CouponCodes_Customers) GetLastName() string {
	if t == nil {
		t = &CouponCodes_CouponCodes_Customers{}
	}
	return t.LastName
}
func (t *CouponCodes_CouponCodes_Customers) GetProfilePictureFull() *string {
	if t == nil {
		t = &CouponCodes_CouponCodes_Customers{}
	}
	return t.ProfilePictureFull
}
func (t *CouponCodes_CouponCodes_Customers) GetProfilePicture() *string {
	if t == nil {
		t = &CouponCodes_CouponCodes_Customers{}
	}
	return t.ProfilePicture
}
func (t *CouponCodes_CouponCodes_Customers) GetPhone() *string {
	if t == nil {
		t = &CouponCodes_CouponCodes_Customers{}
	}
	return t.Phone
}

type CouponCodes_CouponCodes struct {
	ID                string                               "json:\"id\" graphql:\"id\""
	UpdatedAt         *string                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedAt         string                               "json:\"createdAt\" graphql:\"createdAt\""
	Description       *string                              "json:\"description,omitempty\" graphql:\"description\""
	Image             *string                              "json:\"image,omitempty\" graphql:\"image\""
	Amount            int                                  "json:\"amount\" graphql:\"amount\""
	Code              string                               "json:\"code\" graphql:\"code\""
	Customers         []*CouponCodes_CouponCodes_Customers "json:\"customers,omitempty\" graphql:\"customers\""
	DiscountType      models.DiscountType                  "json:\"discountType\" graphql:\"discountType\""
	EndAt             *string                              "json:\"endAt,omitempty\" graphql:\"endAt\""
	IsActive          bool                                 "json:\"isActive\" graphql:\"isActive\""
	IsFlatDiscount    bool                                 "json:\"isFlatDiscount\" graphql:\"isFlatDiscount\""
	IsForNewUsersOnly bool                                 "json:\"isForNewUsersOnly\" graphql:\"isForNewUsersOnly\""
	IsUserSpecific    bool                                 "json:\"isUserSpecific\" graphql:\"isUserSpecific\""
	MaxDiscountAmount *int                                 "json:\"maxDiscountAmount,omitempty\" graphql:\"maxDiscountAmount\""
	MaxUsage          *int                                 "json:\"maxUsage,omitempty\" graphql:\"maxUsage\""
	MaxUsagePerUser   *int                                 "json:\"maxUsagePerUser,omitempty\" graphql:\"maxUsagePerUser\""
	MinOrderAmount    *int                                 "json:\"minOrderAmount,omitempty\" graphql:\"minOrderAmount\""
	StartAt           *string                              "json:\"startAt,omitempty\" graphql:\"startAt\""
}

func (t *CouponCodes_CouponCodes) GetID() string {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.ID
}
func (t *CouponCodes_CouponCodes) GetUpdatedAt() *string {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.UpdatedAt
}
func (t *CouponCodes_CouponCodes) GetCreatedAt() string {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.CreatedAt
}
func (t *CouponCodes_CouponCodes) GetDescription() *string {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.Description
}
func (t *CouponCodes_CouponCodes) GetImage() *string {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.Image
}
func (t *CouponCodes_CouponCodes) GetAmount() int {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.Amount
}
func (t *CouponCodes_CouponCodes) GetCode() string {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.Code
}
func (t *CouponCodes_CouponCodes) GetCustomers() []*CouponCodes_CouponCodes_Customers {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.Customers
}
func (t *CouponCodes_CouponCodes) GetDiscountType() *models.DiscountType {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return &t.DiscountType
}
func (t *CouponCodes_CouponCodes) GetEndAt() *string {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.EndAt
}
func (t *CouponCodes_CouponCodes) GetIsActive() bool {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.IsActive
}
func (t *CouponCodes_CouponCodes) GetIsFlatDiscount() bool {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.IsFlatDiscount
}
func (t *CouponCodes_CouponCodes) GetIsForNewUsersOnly() bool {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.IsForNewUsersOnly
}
func (t *CouponCodes_CouponCodes) GetIsUserSpecific() bool {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.IsUserSpecific
}
func (t *CouponCodes_CouponCodes) GetMaxDiscountAmount() *int {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.MaxDiscountAmount
}
func (t *CouponCodes_CouponCodes) GetMaxUsage() *int {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.MaxUsage
}
func (t *CouponCodes_CouponCodes) GetMaxUsagePerUser() *int {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.MaxUsagePerUser
}
func (t *CouponCodes_CouponCodes) GetMinOrderAmount() *int {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.MinOrderAmount
}
func (t *CouponCodes_CouponCodes) GetStartAt() *string {
	if t == nil {
		t = &CouponCodes_CouponCodes{}
	}
	return t.StartAt
}

type CustomerProfile_CustomerProfile struct {
	Phone              *string "json:\"phone,omitempty\" graphql:\"phone\""
	ProfilePicture     *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
	ProfilePictureFull *string "json:\"profilePictureFull,omitempty\" graphql:\"profilePictureFull\""
	LastName           string  "json:\"lastName\" graphql:\"lastName\""
	FirstName          string  "json:\"firstName\" graphql:\"firstName\""
	Email              string  "json:\"email\" graphql:\"email\""
}

func (t *CustomerProfile_CustomerProfile) GetPhone() *string {
	if t == nil {
		t = &CustomerProfile_CustomerProfile{}
	}
	return t.Phone
}
func (t *CustomerProfile_CustomerProfile) GetProfilePicture() *string {
	if t == nil {
		t = &CustomerProfile_CustomerProfile{}
	}
	return t.ProfilePicture
}
func (t *CustomerProfile_CustomerProfile) GetProfilePictureFull() *string {
	if t == nil {
		t = &CustomerProfile_CustomerProfile{}
	}
	return t.ProfilePictureFull
}
func (t *CustomerProfile_CustomerProfile) GetLastName() string {
	if t == nil {
		t = &CustomerProfile_CustomerProfile{}
	}
	return t.LastName
}
func (t *CustomerProfile_CustomerProfile) GetFirstName() string {
	if t == nil {
		t = &CustomerProfile_CustomerProfile{}
	}
	return t.FirstName
}
func (t *CustomerProfile_CustomerProfile) GetEmail() string {
	if t == nil {
		t = &CustomerProfile_CustomerProfile{}
	}
	return t.Email
}

type CustomersByAdmin_CustomersByAdmin struct {
	Phone              *string "json:\"phone,omitempty\" graphql:\"phone\""
	ProfilePicture     *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
	ProfilePictureFull *string "json:\"profilePictureFull,omitempty\" graphql:\"profilePictureFull\""
	LastName           string  "json:\"lastName\" graphql:\"lastName\""
	FirstName          string  "json:\"firstName\" graphql:\"firstName\""
	Email              string  "json:\"email\" graphql:\"email\""
}

func (t *CustomersByAdmin_CustomersByAdmin) GetPhone() *string {
	if t == nil {
		t = &CustomersByAdmin_CustomersByAdmin{}
	}
	return t.Phone
}
func (t *CustomersByAdmin_CustomersByAdmin) GetProfilePicture() *string {
	if t == nil {
		t = &CustomersByAdmin_CustomersByAdmin{}
	}
	return t.ProfilePicture
}
func (t *CustomersByAdmin_CustomersByAdmin) GetProfilePictureFull() *string {
	if t == nil {
		t = &CustomersByAdmin_CustomersByAdmin{}
	}
	return t.ProfilePictureFull
}
func (t *CustomersByAdmin_CustomersByAdmin) GetLastName() string {
	if t == nil {
		t = &CustomersByAdmin_CustomersByAdmin{}
	}
	return t.LastName
}
func (t *CustomersByAdmin_CustomersByAdmin) GetFirstName() string {
	if t == nil {
		t = &CustomersByAdmin_CustomersByAdmin{}
	}
	return t.FirstName
}
func (t *CustomersByAdmin_CustomersByAdmin) GetEmail() string {
	if t == nil {
		t = &CustomersByAdmin_CustomersByAdmin{}
	}
	return t.Email
}

type LocationById_LocationByID struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *LocationById_LocationByID) GetID() string {
	if t == nil {
		t = &LocationById_LocationByID{}
	}
	return t.ID
}
func (t *LocationById_LocationByID) GetName() string {
	if t == nil {
		t = &LocationById_LocationByID{}
	}
	return t.Name
}
func (t *LocationById_LocationByID) GetShortCode() string {
	if t == nil {
		t = &LocationById_LocationByID{}
	}
	return t.ShortCode
}

type Locations_Locations struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *Locations_Locations) GetID() string {
	if t == nil {
		t = &Locations_Locations{}
	}
	return t.ID
}
func (t *Locations_Locations) GetName() string {
	if t == nil {
		t = &Locations_Locations{}
	}
	return t.Name
}
func (t *Locations_Locations) GetShortCode() string {
	if t == nil {
		t = &Locations_Locations{}
	}
	return t.ShortCode
}

type MediaByAdmin_MediaByAdmin struct {
	Path         string "json:\"path\" graphql:\"path\""
	PermanentURL string "json:\"permanentUrl\" graphql:\"permanentUrl\""
	URL          string "json:\"url\" graphql:\"url\""
}

func (t *MediaByAdmin_MediaByAdmin) GetPath() string {
	if t == nil {
		t = &MediaByAdmin_MediaByAdmin{}
	}
	return t.Path
}
func (t *MediaByAdmin_MediaByAdmin) GetPermanentURL() string {
	if t == nil {
		t = &MediaByAdmin_MediaByAdmin{}
	}
	return t.PermanentURL
}
func (t *MediaByAdmin_MediaByAdmin) GetURL() string {
	if t == nil {
		t = &MediaByAdmin_MediaByAdmin{}
	}
	return t.URL
}

type Order_Order_BillingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *Order_Order_BillingAddress_Location) GetID() string {
	if t == nil {
		t = &Order_Order_BillingAddress_Location{}
	}
	return t.ID
}
func (t *Order_Order_BillingAddress_Location) GetName() string {
	if t == nil {
		t = &Order_Order_BillingAddress_Location{}
	}
	return t.Name
}
func (t *Order_Order_BillingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &Order_Order_BillingAddress_Location{}
	}
	return t.ShortCode
}

type Order_Order_BillingAddress struct {
	ID        string                              "json:\"id\" graphql:\"id\""
	Street    string                              "json:\"street\" graphql:\"street\""
	StreetTwo *string                             "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                              "json:\"city\" graphql:\"city\""
	State     *string                             "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                              "json:\"postcode\" graphql:\"postcode\""
	Email     *string                             "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                             "json:\"phone,omitempty\" graphql:\"phone\""
	Location  Order_Order_BillingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *Order_Order_BillingAddress) GetID() string {
	if t == nil {
		t = &Order_Order_BillingAddress{}
	}
	return t.ID
}
func (t *Order_Order_BillingAddress) GetStreet() string {
	if t == nil {
		t = &Order_Order_BillingAddress{}
	}
	return t.Street
}
func (t *Order_Order_BillingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &Order_Order_BillingAddress{}
	}
	return t.StreetTwo
}
func (t *Order_Order_BillingAddress) GetCity() string {
	if t == nil {
		t = &Order_Order_BillingAddress{}
	}
	return t.City
}
func (t *Order_Order_BillingAddress) GetState() *string {
	if t == nil {
		t = &Order_Order_BillingAddress{}
	}
	return t.State
}
func (t *Order_Order_BillingAddress) GetPostcode() string {
	if t == nil {
		t = &Order_Order_BillingAddress{}
	}
	return t.Postcode
}
func (t *Order_Order_BillingAddress) GetEmail() *string {
	if t == nil {
		t = &Order_Order_BillingAddress{}
	}
	return t.Email
}
func (t *Order_Order_BillingAddress) GetPhone() *string {
	if t == nil {
		t = &Order_Order_BillingAddress{}
	}
	return t.Phone
}
func (t *Order_Order_BillingAddress) GetLocation() *Order_Order_BillingAddress_Location {
	if t == nil {
		t = &Order_Order_BillingAddress{}
	}
	return &t.Location
}

type Order_Order_ShippingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *Order_Order_ShippingAddress_Location) GetID() string {
	if t == nil {
		t = &Order_Order_ShippingAddress_Location{}
	}
	return t.ID
}
func (t *Order_Order_ShippingAddress_Location) GetName() string {
	if t == nil {
		t = &Order_Order_ShippingAddress_Location{}
	}
	return t.Name
}
func (t *Order_Order_ShippingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &Order_Order_ShippingAddress_Location{}
	}
	return t.ShortCode
}

type Order_Order_ShippingAddress struct {
	ID        string                               "json:\"id\" graphql:\"id\""
	Street    string                               "json:\"street\" graphql:\"street\""
	StreetTwo *string                              "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                               "json:\"city\" graphql:\"city\""
	State     *string                              "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                               "json:\"postcode\" graphql:\"postcode\""
	Email     *string                              "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                              "json:\"phone,omitempty\" graphql:\"phone\""
	Location  Order_Order_ShippingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *Order_Order_ShippingAddress) GetID() string {
	if t == nil {
		t = &Order_Order_ShippingAddress{}
	}
	return t.ID
}
func (t *Order_Order_ShippingAddress) GetStreet() string {
	if t == nil {
		t = &Order_Order_ShippingAddress{}
	}
	return t.Street
}
func (t *Order_Order_ShippingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &Order_Order_ShippingAddress{}
	}
	return t.StreetTwo
}
func (t *Order_Order_ShippingAddress) GetCity() string {
	if t == nil {
		t = &Order_Order_ShippingAddress{}
	}
	return t.City
}
func (t *Order_Order_ShippingAddress) GetState() *string {
	if t == nil {
		t = &Order_Order_ShippingAddress{}
	}
	return t.State
}
func (t *Order_Order_ShippingAddress) GetPostcode() string {
	if t == nil {
		t = &Order_Order_ShippingAddress{}
	}
	return t.Postcode
}
func (t *Order_Order_ShippingAddress) GetEmail() *string {
	if t == nil {
		t = &Order_Order_ShippingAddress{}
	}
	return t.Email
}
func (t *Order_Order_ShippingAddress) GetPhone() *string {
	if t == nil {
		t = &Order_Order_ShippingAddress{}
	}
	return t.Phone
}
func (t *Order_Order_ShippingAddress) GetLocation() *Order_Order_ShippingAddress_Location {
	if t == nil {
		t = &Order_Order_ShippingAddress{}
	}
	return &t.Location
}

type Order_Order_Cart_CartItems_Product struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Slug       string   "json:\"slug\" graphql:\"slug\""
	FullImages []string "json:\"fullImages\" graphql:\"fullImages\""
}

func (t *Order_Order_Cart_CartItems_Product) GetID() string {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Product{}
	}
	return t.ID
}
func (t *Order_Order_Cart_CartItems_Product) GetName() string {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Product{}
	}
	return t.Name
}
func (t *Order_Order_Cart_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Product{}
	}
	return t.Slug
}
func (t *Order_Order_Cart_CartItems_Product) GetFullImages() []string {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Product{}
	}
	return t.FullImages
}

type Order_Order_Cart_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *Order_Order_Cart_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Attributes{}
	}
	return t.Name
}
func (t *Order_Order_Cart_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type Order_Order_Cart_CartItems_Variation struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *Order_Order_Cart_CartItems_Variation) GetID() string {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Variation{}
	}
	return t.ID
}
func (t *Order_Order_Cart_CartItems_Variation) GetName() string {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Variation{}
	}
	return t.Name
}
func (t *Order_Order_Cart_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Variation{}
	}
	return t.Price
}
func (t *Order_Order_Cart_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Variation{}
	}
	return t.Sku
}
func (t *Order_Order_Cart_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &Order_Order_Cart_CartItems_Variation{}
	}
	return t.Stock
}

type Order_Order_Cart_CartItems struct {
	ID            int                                      "json:\"id\" graphql:\"id\""
	Product       Order_Order_Cart_CartItems_Product       "json:\"product\" graphql:\"product\""
	Quantity      int                                      "json:\"quantity\" graphql:\"quantity\""
	PurchasePrice int                                      "json:\"purchasePrice\" graphql:\"purchasePrice\""
	Attributes    []*Order_Order_Cart_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation     *Order_Order_Cart_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *Order_Order_Cart_CartItems) GetID() int {
	if t == nil {
		t = &Order_Order_Cart_CartItems{}
	}
	return t.ID
}
func (t *Order_Order_Cart_CartItems) GetProduct() *Order_Order_Cart_CartItems_Product {
	if t == nil {
		t = &Order_Order_Cart_CartItems{}
	}
	return &t.Product
}
func (t *Order_Order_Cart_CartItems) GetQuantity() int {
	if t == nil {
		t = &Order_Order_Cart_CartItems{}
	}
	return t.Quantity
}
func (t *Order_Order_Cart_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &Order_Order_Cart_CartItems{}
	}
	return t.PurchasePrice
}
func (t *Order_Order_Cart_CartItems) GetAttributes() []*Order_Order_Cart_CartItems_Attributes {
	if t == nil {
		t = &Order_Order_Cart_CartItems{}
	}
	return t.Attributes
}
func (t *Order_Order_Cart_CartItems) GetVariation() *Order_Order_Cart_CartItems_Variation {
	if t == nil {
		t = &Order_Order_Cart_CartItems{}
	}
	return t.Variation
}

type Order_Order_Cart struct {
	ID                 string                        "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                          "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*Order_Order_Cart_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *Order_Order_Cart) GetID() string {
	if t == nil {
		t = &Order_Order_Cart{}
	}
	return t.ID
}
func (t *Order_Order_Cart) GetIsShippingRequired() bool {
	if t == nil {
		t = &Order_Order_Cart{}
	}
	return t.IsShippingRequired
}
func (t *Order_Order_Cart) GetCartItems() []*Order_Order_Cart_CartItems {
	if t == nil {
		t = &Order_Order_Cart{}
	}
	return t.CartItems
}

type Order_Order_Customer struct {
	Email          string  "json:\"email\" graphql:\"email\""
	Phone          *string "json:\"phone,omitempty\" graphql:\"phone\""
	FirstName      string  "json:\"firstName\" graphql:\"firstName\""
	LastName       string  "json:\"lastName\" graphql:\"lastName\""
	ProfilePicture *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
}

func (t *Order_Order_Customer) GetEmail() string {
	if t == nil {
		t = &Order_Order_Customer{}
	}
	return t.Email
}
func (t *Order_Order_Customer) GetPhone() *string {
	if t == nil {
		t = &Order_Order_Customer{}
	}
	return t.Phone
}
func (t *Order_Order_Customer) GetFirstName() string {
	if t == nil {
		t = &Order_Order_Customer{}
	}
	return t.FirstName
}
func (t *Order_Order_Customer) GetLastName() string {
	if t == nil {
		t = &Order_Order_Customer{}
	}
	return t.LastName
}
func (t *Order_Order_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &Order_Order_Customer{}
	}
	return t.ProfilePicture
}

type Order_Order_PaymentMethod struct {
	ID               string "json:\"id\" graphql:\"id\""
	DisplayName      string "json:\"displayName\" graphql:\"displayName\""
	CurrencyName     string "json:\"currencyName\" graphql:\"currencyName\""
	CurrencySymbol   string "json:\"currencySymbol\" graphql:\"currencySymbol\""
	IsDigitalPayment bool   "json:\"isDigitalPayment\" graphql:\"isDigitalPayment\""
}

func (t *Order_Order_PaymentMethod) GetID() string {
	if t == nil {
		t = &Order_Order_PaymentMethod{}
	}
	return t.ID
}
func (t *Order_Order_PaymentMethod) GetDisplayName() string {
	if t == nil {
		t = &Order_Order_PaymentMethod{}
	}
	return t.DisplayName
}
func (t *Order_Order_PaymentMethod) GetCurrencyName() string {
	if t == nil {
		t = &Order_Order_PaymentMethod{}
	}
	return t.CurrencyName
}
func (t *Order_Order_PaymentMethod) GetCurrencySymbol() string {
	if t == nil {
		t = &Order_Order_PaymentMethod{}
	}
	return t.CurrencySymbol
}
func (t *Order_Order_PaymentMethod) GetIsDigitalPayment() bool {
	if t == nil {
		t = &Order_Order_PaymentMethod{}
	}
	return t.IsDigitalPayment
}

type Order_Order_ShippingMethod struct {
	ID                 string            "json:\"id\" graphql:\"id\""
	DisplayName        string            "json:\"displayName\" graphql:\"displayName\""
	DeliveryCharge     int               "json:\"deliveryCharge\" graphql:\"deliveryCharge\""
	DeliveryTimeInDays int               "json:\"deliveryTimeInDays\" graphql:\"deliveryTimeInDays\""
	WeightUnit         models.WeightUnit "json:\"WeightUnit\" graphql:\"WeightUnit\""
	IsFlat             bool              "json:\"isFlat\" graphql:\"isFlat\""
	IsActive           bool              "json:\"isActive\" graphql:\"isActive\""
}

func (t *Order_Order_ShippingMethod) GetID() string {
	if t == nil {
		t = &Order_Order_ShippingMethod{}
	}
	return t.ID
}
func (t *Order_Order_ShippingMethod) GetDisplayName() string {
	if t == nil {
		t = &Order_Order_ShippingMethod{}
	}
	return t.DisplayName
}
func (t *Order_Order_ShippingMethod) GetDeliveryCharge() int {
	if t == nil {
		t = &Order_Order_ShippingMethod{}
	}
	return t.DeliveryCharge
}
func (t *Order_Order_ShippingMethod) GetDeliveryTimeInDays() int {
	if t == nil {
		t = &Order_Order_ShippingMethod{}
	}
	return t.DeliveryTimeInDays
}
func (t *Order_Order_ShippingMethod) GetWeightUnit() *models.WeightUnit {
	if t == nil {
		t = &Order_Order_ShippingMethod{}
	}
	return &t.WeightUnit
}
func (t *Order_Order_ShippingMethod) GetIsFlat() bool {
	if t == nil {
		t = &Order_Order_ShippingMethod{}
	}
	return t.IsFlat
}
func (t *Order_Order_ShippingMethod) GetIsActive() bool {
	if t == nil {
		t = &Order_Order_ShippingMethod{}
	}
	return t.IsActive
}

type Order_Order_CouponCode struct {
	Code         string              "json:\"code\" graphql:\"code\""
	DiscountType models.DiscountType "json:\"discountType\" graphql:\"discountType\""
}

func (t *Order_Order_CouponCode) GetCode() string {
	if t == nil {
		t = &Order_Order_CouponCode{}
	}
	return t.Code
}
func (t *Order_Order_CouponCode) GetDiscountType() *models.DiscountType {
	if t == nil {
		t = &Order_Order_CouponCode{}
	}
	return &t.DiscountType
}

type Order_Order_Payments struct {
	IsPaid        bool   "json:\"isPaid\" graphql:\"isPaid\""
	PayableAmount int    "json:\"payableAmount\" graphql:\"payableAmount\""
	GatewayName   string "json:\"gatewayName\" graphql:\"gatewayName\""
}

func (t *Order_Order_Payments) GetIsPaid() bool {
	if t == nil {
		t = &Order_Order_Payments{}
	}
	return t.IsPaid
}
func (t *Order_Order_Payments) GetPayableAmount() int {
	if t == nil {
		t = &Order_Order_Payments{}
	}
	return t.PayableAmount
}
func (t *Order_Order_Payments) GetGatewayName() string {
	if t == nil {
		t = &Order_Order_Payments{}
	}
	return t.GatewayName
}

type Order_Order struct {
	ID                   string                       "json:\"id\" graphql:\"id\""
	Hash                 string                       "json:\"hash\" graphql:\"hash\""
	ShippingCharge       int                          "json:\"shippingCharge\" graphql:\"shippingCharge\""
	PaymentProcessingFee int                          "json:\"paymentProcessingFee\" graphql:\"paymentProcessingFee\""
	Subtotal             int                          "json:\"subtotal\" graphql:\"subtotal\""
	GrandTotal           int                          "json:\"grandTotal\" graphql:\"grandTotal\""
	DiscountedAmount     int                          "json:\"discountedAmount\" graphql:\"discountedAmount\""
	Status               models.OrderStatus           "json:\"status\" graphql:\"status\""
	PaymentStatus        models.OrderPaymentStatus    "json:\"paymentStatus\" graphql:\"paymentStatus\""
	CreatedAt            string                       "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt            *string                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	BillingAddress       Order_Order_BillingAddress   "json:\"billingAddress\" graphql:\"billingAddress\""
	ShippingAddress      *Order_Order_ShippingAddress "json:\"shippingAddress,omitempty\" graphql:\"shippingAddress\""
	Cart                 Order_Order_Cart             "json:\"cart\" graphql:\"cart\""
	Customer             Order_Order_Customer         "json:\"customer\" graphql:\"customer\""
	PaymentMethod        *Order_Order_PaymentMethod   "json:\"paymentMethod,omitempty\" graphql:\"paymentMethod\""
	ShippingMethod       *Order_Order_ShippingMethod  "json:\"shippingMethod,omitempty\" graphql:\"shippingMethod\""
	CouponCode           *Order_Order_CouponCode      "json:\"couponCode,omitempty\" graphql:\"couponCode\""
	Payments             []*Order_Order_Payments      "json:\"payments\" graphql:\"payments\""
}

func (t *Order_Order) GetID() string {
	if t == nil {
		t = &Order_Order{}
	}
	return t.ID
}
func (t *Order_Order) GetHash() string {
	if t == nil {
		t = &Order_Order{}
	}
	return t.Hash
}
func (t *Order_Order) GetShippingCharge() int {
	if t == nil {
		t = &Order_Order{}
	}
	return t.ShippingCharge
}
func (t *Order_Order) GetPaymentProcessingFee() int {
	if t == nil {
		t = &Order_Order{}
	}
	return t.PaymentProcessingFee
}
func (t *Order_Order) GetSubtotal() int {
	if t == nil {
		t = &Order_Order{}
	}
	return t.Subtotal
}
func (t *Order_Order) GetGrandTotal() int {
	if t == nil {
		t = &Order_Order{}
	}
	return t.GrandTotal
}
func (t *Order_Order) GetDiscountedAmount() int {
	if t == nil {
		t = &Order_Order{}
	}
	return t.DiscountedAmount
}
func (t *Order_Order) GetStatus() *models.OrderStatus {
	if t == nil {
		t = &Order_Order{}
	}
	return &t.Status
}
func (t *Order_Order) GetPaymentStatus() *models.OrderPaymentStatus {
	if t == nil {
		t = &Order_Order{}
	}
	return &t.PaymentStatus
}
func (t *Order_Order) GetCreatedAt() string {
	if t == nil {
		t = &Order_Order{}
	}
	return t.CreatedAt
}
func (t *Order_Order) GetUpdatedAt() *string {
	if t == nil {
		t = &Order_Order{}
	}
	return t.UpdatedAt
}
func (t *Order_Order) GetBillingAddress() *Order_Order_BillingAddress {
	if t == nil {
		t = &Order_Order{}
	}
	return &t.BillingAddress
}
func (t *Order_Order) GetShippingAddress() *Order_Order_ShippingAddress {
	if t == nil {
		t = &Order_Order{}
	}
	return t.ShippingAddress
}
func (t *Order_Order) GetCart() *Order_Order_Cart {
	if t == nil {
		t = &Order_Order{}
	}
	return &t.Cart
}
func (t *Order_Order) GetCustomer() *Order_Order_Customer {
	if t == nil {
		t = &Order_Order{}
	}
	return &t.Customer
}
func (t *Order_Order) GetPaymentMethod() *Order_Order_PaymentMethod {
	if t == nil {
		t = &Order_Order{}
	}
	return t.PaymentMethod
}
func (t *Order_Order) GetShippingMethod() *Order_Order_ShippingMethod {
	if t == nil {
		t = &Order_Order{}
	}
	return t.ShippingMethod
}
func (t *Order_Order) GetCouponCode() *Order_Order_CouponCode {
	if t == nil {
		t = &Order_Order{}
	}
	return t.CouponCode
}
func (t *Order_Order) GetPayments() []*Order_Order_Payments {
	if t == nil {
		t = &Order_Order{}
	}
	return t.Payments
}

type OrderByAdmin_OrderByAdmin_BillingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *OrderByAdmin_OrderByAdmin_BillingAddress_Location) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress_Location{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress_Location) GetName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress_Location{}
	}
	return t.Name
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress_Location{}
	}
	return t.ShortCode
}

type OrderByAdmin_OrderByAdmin_BillingAddress struct {
	ID        string                                            "json:\"id\" graphql:\"id\""
	Street    string                                            "json:\"street\" graphql:\"street\""
	StreetTwo *string                                           "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                            "json:\"city\" graphql:\"city\""
	State     *string                                           "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                            "json:\"postcode\" graphql:\"postcode\""
	Email     *string                                           "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                                           "json:\"phone,omitempty\" graphql:\"phone\""
	Location  OrderByAdmin_OrderByAdmin_BillingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *OrderByAdmin_OrderByAdmin_BillingAddress) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress) GetStreet() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress{}
	}
	return t.Street
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress{}
	}
	return t.StreetTwo
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress) GetCity() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress{}
	}
	return t.City
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress) GetState() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress{}
	}
	return t.State
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress) GetPostcode() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress{}
	}
	return t.Postcode
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress) GetEmail() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress{}
	}
	return t.Email
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress) GetPhone() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress{}
	}
	return t.Phone
}
func (t *OrderByAdmin_OrderByAdmin_BillingAddress) GetLocation() *OrderByAdmin_OrderByAdmin_BillingAddress_Location {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_BillingAddress{}
	}
	return &t.Location
}

type OrderByAdmin_OrderByAdmin_ShippingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *OrderByAdmin_OrderByAdmin_ShippingAddress_Location) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress_Location{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress_Location) GetName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress_Location{}
	}
	return t.Name
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress_Location{}
	}
	return t.ShortCode
}

type OrderByAdmin_OrderByAdmin_ShippingAddress struct {
	ID        string                                             "json:\"id\" graphql:\"id\""
	Street    string                                             "json:\"street\" graphql:\"street\""
	StreetTwo *string                                            "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                             "json:\"city\" graphql:\"city\""
	State     *string                                            "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                             "json:\"postcode\" graphql:\"postcode\""
	Email     *string                                            "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                                            "json:\"phone,omitempty\" graphql:\"phone\""
	Location  OrderByAdmin_OrderByAdmin_ShippingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *OrderByAdmin_OrderByAdmin_ShippingAddress) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress) GetStreet() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress{}
	}
	return t.Street
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress{}
	}
	return t.StreetTwo
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress) GetCity() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress{}
	}
	return t.City
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress) GetState() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress{}
	}
	return t.State
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress) GetPostcode() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress{}
	}
	return t.Postcode
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress) GetEmail() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress{}
	}
	return t.Email
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress) GetPhone() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress{}
	}
	return t.Phone
}
func (t *OrderByAdmin_OrderByAdmin_ShippingAddress) GetLocation() *OrderByAdmin_OrderByAdmin_ShippingAddress_Location {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingAddress{}
	}
	return &t.Location
}

type OrderByAdmin_OrderByAdmin_Cart_CartItems_Product struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Slug       string   "json:\"slug\" graphql:\"slug\""
	FullImages []string "json:\"fullImages\" graphql:\"fullImages\""
}

func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Product) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Product{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Product) GetName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Product{}
	}
	return t.Name
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Product{}
	}
	return t.Slug
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Product) GetFullImages() []string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Product{}
	}
	return t.FullImages
}

type OrderByAdmin_OrderByAdmin_Cart_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Attributes{}
	}
	return t.Name
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation) GetName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation{}
	}
	return t.Name
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation{}
	}
	return t.Price
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation{}
	}
	return t.Sku
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation{}
	}
	return t.Stock
}

type OrderByAdmin_OrderByAdmin_Cart_CartItems struct {
	ID            int                                                    "json:\"id\" graphql:\"id\""
	Product       OrderByAdmin_OrderByAdmin_Cart_CartItems_Product       "json:\"product\" graphql:\"product\""
	Quantity      int                                                    "json:\"quantity\" graphql:\"quantity\""
	PurchasePrice int                                                    "json:\"purchasePrice\" graphql:\"purchasePrice\""
	Attributes    []*OrderByAdmin_OrderByAdmin_Cart_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation     *OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems) GetID() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems) GetProduct() *OrderByAdmin_OrderByAdmin_Cart_CartItems_Product {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems{}
	}
	return &t.Product
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems) GetQuantity() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems{}
	}
	return t.Quantity
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems{}
	}
	return t.PurchasePrice
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems) GetAttributes() []*OrderByAdmin_OrderByAdmin_Cart_CartItems_Attributes {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems{}
	}
	return t.Attributes
}
func (t *OrderByAdmin_OrderByAdmin_Cart_CartItems) GetVariation() *OrderByAdmin_OrderByAdmin_Cart_CartItems_Variation {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart_CartItems{}
	}
	return t.Variation
}

type OrderByAdmin_OrderByAdmin_Cart struct {
	ID                 string                                      "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                                        "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*OrderByAdmin_OrderByAdmin_Cart_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *OrderByAdmin_OrderByAdmin_Cart) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_Cart) GetIsShippingRequired() bool {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart{}
	}
	return t.IsShippingRequired
}
func (t *OrderByAdmin_OrderByAdmin_Cart) GetCartItems() []*OrderByAdmin_OrderByAdmin_Cart_CartItems {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Cart{}
	}
	return t.CartItems
}

type OrderByAdmin_OrderByAdmin_Customer struct {
	Email          string  "json:\"email\" graphql:\"email\""
	Phone          *string "json:\"phone,omitempty\" graphql:\"phone\""
	FirstName      string  "json:\"firstName\" graphql:\"firstName\""
	LastName       string  "json:\"lastName\" graphql:\"lastName\""
	ProfilePicture *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
}

func (t *OrderByAdmin_OrderByAdmin_Customer) GetEmail() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Customer{}
	}
	return t.Email
}
func (t *OrderByAdmin_OrderByAdmin_Customer) GetPhone() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Customer{}
	}
	return t.Phone
}
func (t *OrderByAdmin_OrderByAdmin_Customer) GetFirstName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Customer{}
	}
	return t.FirstName
}
func (t *OrderByAdmin_OrderByAdmin_Customer) GetLastName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Customer{}
	}
	return t.LastName
}
func (t *OrderByAdmin_OrderByAdmin_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Customer{}
	}
	return t.ProfilePicture
}

type OrderByAdmin_OrderByAdmin_PaymentMethod struct {
	ID               string "json:\"id\" graphql:\"id\""
	DisplayName      string "json:\"displayName\" graphql:\"displayName\""
	CurrencyName     string "json:\"currencyName\" graphql:\"currencyName\""
	CurrencySymbol   string "json:\"currencySymbol\" graphql:\"currencySymbol\""
	IsDigitalPayment bool   "json:\"isDigitalPayment\" graphql:\"isDigitalPayment\""
}

func (t *OrderByAdmin_OrderByAdmin_PaymentMethod) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_PaymentMethod{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_PaymentMethod) GetDisplayName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_PaymentMethod{}
	}
	return t.DisplayName
}
func (t *OrderByAdmin_OrderByAdmin_PaymentMethod) GetCurrencyName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_PaymentMethod{}
	}
	return t.CurrencyName
}
func (t *OrderByAdmin_OrderByAdmin_PaymentMethod) GetCurrencySymbol() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_PaymentMethod{}
	}
	return t.CurrencySymbol
}
func (t *OrderByAdmin_OrderByAdmin_PaymentMethod) GetIsDigitalPayment() bool {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_PaymentMethod{}
	}
	return t.IsDigitalPayment
}

type OrderByAdmin_OrderByAdmin_ShippingMethod struct {
	ID                 string            "json:\"id\" graphql:\"id\""
	DisplayName        string            "json:\"displayName\" graphql:\"displayName\""
	DeliveryCharge     int               "json:\"deliveryCharge\" graphql:\"deliveryCharge\""
	DeliveryTimeInDays int               "json:\"deliveryTimeInDays\" graphql:\"deliveryTimeInDays\""
	WeightUnit         models.WeightUnit "json:\"WeightUnit\" graphql:\"WeightUnit\""
	IsFlat             bool              "json:\"isFlat\" graphql:\"isFlat\""
	IsActive           bool              "json:\"isActive\" graphql:\"isActive\""
}

func (t *OrderByAdmin_OrderByAdmin_ShippingMethod) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingMethod{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin_ShippingMethod) GetDisplayName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingMethod{}
	}
	return t.DisplayName
}
func (t *OrderByAdmin_OrderByAdmin_ShippingMethod) GetDeliveryCharge() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingMethod{}
	}
	return t.DeliveryCharge
}
func (t *OrderByAdmin_OrderByAdmin_ShippingMethod) GetDeliveryTimeInDays() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingMethod{}
	}
	return t.DeliveryTimeInDays
}
func (t *OrderByAdmin_OrderByAdmin_ShippingMethod) GetWeightUnit() *models.WeightUnit {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingMethod{}
	}
	return &t.WeightUnit
}
func (t *OrderByAdmin_OrderByAdmin_ShippingMethod) GetIsFlat() bool {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingMethod{}
	}
	return t.IsFlat
}
func (t *OrderByAdmin_OrderByAdmin_ShippingMethod) GetIsActive() bool {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_ShippingMethod{}
	}
	return t.IsActive
}

type OrderByAdmin_OrderByAdmin_CouponCode struct {
	Code         string              "json:\"code\" graphql:\"code\""
	DiscountType models.DiscountType "json:\"discountType\" graphql:\"discountType\""
}

func (t *OrderByAdmin_OrderByAdmin_CouponCode) GetCode() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_CouponCode{}
	}
	return t.Code
}
func (t *OrderByAdmin_OrderByAdmin_CouponCode) GetDiscountType() *models.DiscountType {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_CouponCode{}
	}
	return &t.DiscountType
}

type OrderByAdmin_OrderByAdmin_Payments struct {
	IsPaid        bool   "json:\"isPaid\" graphql:\"isPaid\""
	PayableAmount int    "json:\"payableAmount\" graphql:\"payableAmount\""
	GatewayName   string "json:\"gatewayName\" graphql:\"gatewayName\""
}

func (t *OrderByAdmin_OrderByAdmin_Payments) GetIsPaid() bool {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Payments{}
	}
	return t.IsPaid
}
func (t *OrderByAdmin_OrderByAdmin_Payments) GetPayableAmount() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Payments{}
	}
	return t.PayableAmount
}
func (t *OrderByAdmin_OrderByAdmin_Payments) GetGatewayName() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin_Payments{}
	}
	return t.GatewayName
}

type OrderByAdmin_OrderByAdmin struct {
	ID                   string                                     "json:\"id\" graphql:\"id\""
	Hash                 string                                     "json:\"hash\" graphql:\"hash\""
	ShippingCharge       int                                        "json:\"shippingCharge\" graphql:\"shippingCharge\""
	PaymentProcessingFee int                                        "json:\"paymentProcessingFee\" graphql:\"paymentProcessingFee\""
	Subtotal             int                                        "json:\"subtotal\" graphql:\"subtotal\""
	GrandTotal           int                                        "json:\"grandTotal\" graphql:\"grandTotal\""
	DiscountedAmount     int                                        "json:\"discountedAmount\" graphql:\"discountedAmount\""
	Status               models.OrderStatus                         "json:\"status\" graphql:\"status\""
	PaymentStatus        models.OrderPaymentStatus                  "json:\"paymentStatus\" graphql:\"paymentStatus\""
	CreatedAt            string                                     "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt            *string                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	BillingAddress       OrderByAdmin_OrderByAdmin_BillingAddress   "json:\"billingAddress\" graphql:\"billingAddress\""
	ShippingAddress      *OrderByAdmin_OrderByAdmin_ShippingAddress "json:\"shippingAddress,omitempty\" graphql:\"shippingAddress\""
	Cart                 OrderByAdmin_OrderByAdmin_Cart             "json:\"cart\" graphql:\"cart\""
	Customer             OrderByAdmin_OrderByAdmin_Customer         "json:\"customer\" graphql:\"customer\""
	PaymentMethod        *OrderByAdmin_OrderByAdmin_PaymentMethod   "json:\"paymentMethod,omitempty\" graphql:\"paymentMethod\""
	ShippingMethod       *OrderByAdmin_OrderByAdmin_ShippingMethod  "json:\"shippingMethod,omitempty\" graphql:\"shippingMethod\""
	CouponCode           *OrderByAdmin_OrderByAdmin_CouponCode      "json:\"couponCode,omitempty\" graphql:\"couponCode\""
	Payments             []*OrderByAdmin_OrderByAdmin_Payments      "json:\"payments\" graphql:\"payments\""
}

func (t *OrderByAdmin_OrderByAdmin) GetID() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.ID
}
func (t *OrderByAdmin_OrderByAdmin) GetHash() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.Hash
}
func (t *OrderByAdmin_OrderByAdmin) GetShippingCharge() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.ShippingCharge
}
func (t *OrderByAdmin_OrderByAdmin) GetPaymentProcessingFee() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.PaymentProcessingFee
}
func (t *OrderByAdmin_OrderByAdmin) GetSubtotal() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.Subtotal
}
func (t *OrderByAdmin_OrderByAdmin) GetGrandTotal() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.GrandTotal
}
func (t *OrderByAdmin_OrderByAdmin) GetDiscountedAmount() int {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.DiscountedAmount
}
func (t *OrderByAdmin_OrderByAdmin) GetStatus() *models.OrderStatus {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return &t.Status
}
func (t *OrderByAdmin_OrderByAdmin) GetPaymentStatus() *models.OrderPaymentStatus {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return &t.PaymentStatus
}
func (t *OrderByAdmin_OrderByAdmin) GetCreatedAt() string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.CreatedAt
}
func (t *OrderByAdmin_OrderByAdmin) GetUpdatedAt() *string {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.UpdatedAt
}
func (t *OrderByAdmin_OrderByAdmin) GetBillingAddress() *OrderByAdmin_OrderByAdmin_BillingAddress {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return &t.BillingAddress
}
func (t *OrderByAdmin_OrderByAdmin) GetShippingAddress() *OrderByAdmin_OrderByAdmin_ShippingAddress {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.ShippingAddress
}
func (t *OrderByAdmin_OrderByAdmin) GetCart() *OrderByAdmin_OrderByAdmin_Cart {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return &t.Cart
}
func (t *OrderByAdmin_OrderByAdmin) GetCustomer() *OrderByAdmin_OrderByAdmin_Customer {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return &t.Customer
}
func (t *OrderByAdmin_OrderByAdmin) GetPaymentMethod() *OrderByAdmin_OrderByAdmin_PaymentMethod {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.PaymentMethod
}
func (t *OrderByAdmin_OrderByAdmin) GetShippingMethod() *OrderByAdmin_OrderByAdmin_ShippingMethod {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.ShippingMethod
}
func (t *OrderByAdmin_OrderByAdmin) GetCouponCode() *OrderByAdmin_OrderByAdmin_CouponCode {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.CouponCode
}
func (t *OrderByAdmin_OrderByAdmin) GetPayments() []*OrderByAdmin_OrderByAdmin_Payments {
	if t == nil {
		t = &OrderByAdmin_OrderByAdmin{}
	}
	return t.Payments
}

type OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress_Location) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress_Location{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress_Location) GetName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress_Location{}
	}
	return t.Name
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress_Location{}
	}
	return t.ShortCode
}

type OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress struct {
	ID        string                                                            "json:\"id\" graphql:\"id\""
	Street    string                                                            "json:\"street\" graphql:\"street\""
	StreetTwo *string                                                           "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                                            "json:\"city\" graphql:\"city\""
	State     *string                                                           "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                                            "json:\"postcode\" graphql:\"postcode\""
	Email     *string                                                           "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                                                           "json:\"phone,omitempty\" graphql:\"phone\""
	Location  OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress) GetStreet() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress{}
	}
	return t.Street
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress{}
	}
	return t.StreetTwo
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress) GetCity() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress{}
	}
	return t.City
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress) GetState() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress{}
	}
	return t.State
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress) GetPostcode() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress{}
	}
	return t.Postcode
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress) GetEmail() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress{}
	}
	return t.Email
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress) GetPhone() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress{}
	}
	return t.Phone
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress) GetLocation() *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress_Location {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress{}
	}
	return &t.Location
}

type OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress_Location) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress_Location{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress_Location) GetName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress_Location{}
	}
	return t.Name
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress_Location{}
	}
	return t.ShortCode
}

type OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress struct {
	ID        string                                                             "json:\"id\" graphql:\"id\""
	Street    string                                                             "json:\"street\" graphql:\"street\""
	StreetTwo *string                                                            "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                                             "json:\"city\" graphql:\"city\""
	State     *string                                                            "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                                             "json:\"postcode\" graphql:\"postcode\""
	Email     *string                                                            "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                                                            "json:\"phone,omitempty\" graphql:\"phone\""
	Location  OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress) GetStreet() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress{}
	}
	return t.Street
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress{}
	}
	return t.StreetTwo
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress) GetCity() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress{}
	}
	return t.City
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress) GetState() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress{}
	}
	return t.State
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress) GetPostcode() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress{}
	}
	return t.Postcode
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress) GetEmail() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress{}
	}
	return t.Email
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress) GetPhone() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress{}
	}
	return t.Phone
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress) GetLocation() *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress_Location {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress{}
	}
	return &t.Location
}

type OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Slug       string   "json:\"slug\" graphql:\"slug\""
	FullImages []string "json:\"fullImages\" graphql:\"fullImages\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product) GetName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product{}
	}
	return t.Name
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product{}
	}
	return t.Slug
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product) GetFullImages() []string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product{}
	}
	return t.FullImages
}

type OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Attributes{}
	}
	return t.Name
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation) GetName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation{}
	}
	return t.Name
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation{}
	}
	return t.Price
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation{}
	}
	return t.Sku
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation{}
	}
	return t.Stock
}

type OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems struct {
	ID            int                                                                    "json:\"id\" graphql:\"id\""
	Product       OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product       "json:\"product\" graphql:\"product\""
	Quantity      int                                                                    "json:\"quantity\" graphql:\"quantity\""
	PurchasePrice int                                                                    "json:\"purchasePrice\" graphql:\"purchasePrice\""
	Attributes    []*OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation     *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems) GetID() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems) GetProduct() *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Product {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems{}
	}
	return &t.Product
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems) GetQuantity() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems{}
	}
	return t.Quantity
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems{}
	}
	return t.PurchasePrice
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems) GetAttributes() []*OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Attributes {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems{}
	}
	return t.Attributes
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems) GetVariation() *OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems_Variation {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems{}
	}
	return t.Variation
}

type OrderByCustomerEmail_OrderByCustomerEmail_Cart struct {
	ID                 string                                                      "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                                                        "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart) GetIsShippingRequired() bool {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart{}
	}
	return t.IsShippingRequired
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Cart) GetCartItems() []*OrderByCustomerEmail_OrderByCustomerEmail_Cart_CartItems {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Cart{}
	}
	return t.CartItems
}

type OrderByCustomerEmail_OrderByCustomerEmail_Customer struct {
	Email          string  "json:\"email\" graphql:\"email\""
	Phone          *string "json:\"phone,omitempty\" graphql:\"phone\""
	FirstName      string  "json:\"firstName\" graphql:\"firstName\""
	LastName       string  "json:\"lastName\" graphql:\"lastName\""
	ProfilePicture *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_Customer) GetEmail() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Customer{}
	}
	return t.Email
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Customer) GetPhone() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Customer{}
	}
	return t.Phone
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Customer) GetFirstName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Customer{}
	}
	return t.FirstName
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Customer) GetLastName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Customer{}
	}
	return t.LastName
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Customer{}
	}
	return t.ProfilePicture
}

type OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod struct {
	ID               string "json:\"id\" graphql:\"id\""
	DisplayName      string "json:\"displayName\" graphql:\"displayName\""
	CurrencyName     string "json:\"currencyName\" graphql:\"currencyName\""
	CurrencySymbol   string "json:\"currencySymbol\" graphql:\"currencySymbol\""
	IsDigitalPayment bool   "json:\"isDigitalPayment\" graphql:\"isDigitalPayment\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod) GetDisplayName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod{}
	}
	return t.DisplayName
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod) GetCurrencyName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod{}
	}
	return t.CurrencyName
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod) GetCurrencySymbol() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod{}
	}
	return t.CurrencySymbol
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod) GetIsDigitalPayment() bool {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod{}
	}
	return t.IsDigitalPayment
}

type OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod struct {
	ID                 string            "json:\"id\" graphql:\"id\""
	DisplayName        string            "json:\"displayName\" graphql:\"displayName\""
	DeliveryCharge     int               "json:\"deliveryCharge\" graphql:\"deliveryCharge\""
	DeliveryTimeInDays int               "json:\"deliveryTimeInDays\" graphql:\"deliveryTimeInDays\""
	WeightUnit         models.WeightUnit "json:\"WeightUnit\" graphql:\"WeightUnit\""
	IsFlat             bool              "json:\"isFlat\" graphql:\"isFlat\""
	IsActive           bool              "json:\"isActive\" graphql:\"isActive\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod) GetDisplayName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod{}
	}
	return t.DisplayName
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod) GetDeliveryCharge() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod{}
	}
	return t.DeliveryCharge
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod) GetDeliveryTimeInDays() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod{}
	}
	return t.DeliveryTimeInDays
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod) GetWeightUnit() *models.WeightUnit {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod{}
	}
	return &t.WeightUnit
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod) GetIsFlat() bool {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod{}
	}
	return t.IsFlat
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod) GetIsActive() bool {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod{}
	}
	return t.IsActive
}

type OrderByCustomerEmail_OrderByCustomerEmail_CouponCode struct {
	Code         string              "json:\"code\" graphql:\"code\""
	DiscountType models.DiscountType "json:\"discountType\" graphql:\"discountType\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_CouponCode) GetCode() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_CouponCode{}
	}
	return t.Code
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_CouponCode) GetDiscountType() *models.DiscountType {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_CouponCode{}
	}
	return &t.DiscountType
}

type OrderByCustomerEmail_OrderByCustomerEmail_Payments struct {
	IsPaid        bool   "json:\"isPaid\" graphql:\"isPaid\""
	PayableAmount int    "json:\"payableAmount\" graphql:\"payableAmount\""
	GatewayName   string "json:\"gatewayName\" graphql:\"gatewayName\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail_Payments) GetIsPaid() bool {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Payments{}
	}
	return t.IsPaid
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Payments) GetPayableAmount() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Payments{}
	}
	return t.PayableAmount
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail_Payments) GetGatewayName() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail_Payments{}
	}
	return t.GatewayName
}

type OrderByCustomerEmail_OrderByCustomerEmail struct {
	ID                   string                                                     "json:\"id\" graphql:\"id\""
	Hash                 string                                                     "json:\"hash\" graphql:\"hash\""
	ShippingCharge       int                                                        "json:\"shippingCharge\" graphql:\"shippingCharge\""
	PaymentProcessingFee int                                                        "json:\"paymentProcessingFee\" graphql:\"paymentProcessingFee\""
	Subtotal             int                                                        "json:\"subtotal\" graphql:\"subtotal\""
	GrandTotal           int                                                        "json:\"grandTotal\" graphql:\"grandTotal\""
	DiscountedAmount     int                                                        "json:\"discountedAmount\" graphql:\"discountedAmount\""
	Status               models.OrderStatus                                         "json:\"status\" graphql:\"status\""
	PaymentStatus        models.OrderPaymentStatus                                  "json:\"paymentStatus\" graphql:\"paymentStatus\""
	CreatedAt            string                                                     "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt            *string                                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	BillingAddress       OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress   "json:\"billingAddress\" graphql:\"billingAddress\""
	ShippingAddress      *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress "json:\"shippingAddress,omitempty\" graphql:\"shippingAddress\""
	Cart                 OrderByCustomerEmail_OrderByCustomerEmail_Cart             "json:\"cart\" graphql:\"cart\""
	Customer             OrderByCustomerEmail_OrderByCustomerEmail_Customer         "json:\"customer\" graphql:\"customer\""
	PaymentMethod        *OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod   "json:\"paymentMethod,omitempty\" graphql:\"paymentMethod\""
	ShippingMethod       *OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod  "json:\"shippingMethod,omitempty\" graphql:\"shippingMethod\""
	CouponCode           *OrderByCustomerEmail_OrderByCustomerEmail_CouponCode      "json:\"couponCode,omitempty\" graphql:\"couponCode\""
	Payments             []*OrderByCustomerEmail_OrderByCustomerEmail_Payments      "json:\"payments\" graphql:\"payments\""
}

func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetID() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.ID
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetHash() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.Hash
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetShippingCharge() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.ShippingCharge
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetPaymentProcessingFee() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.PaymentProcessingFee
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetSubtotal() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.Subtotal
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetGrandTotal() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.GrandTotal
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetDiscountedAmount() int {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.DiscountedAmount
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetStatus() *models.OrderStatus {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return &t.Status
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetPaymentStatus() *models.OrderPaymentStatus {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return &t.PaymentStatus
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetCreatedAt() string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.CreatedAt
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetUpdatedAt() *string {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.UpdatedAt
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetBillingAddress() *OrderByCustomerEmail_OrderByCustomerEmail_BillingAddress {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return &t.BillingAddress
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetShippingAddress() *OrderByCustomerEmail_OrderByCustomerEmail_ShippingAddress {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.ShippingAddress
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetCart() *OrderByCustomerEmail_OrderByCustomerEmail_Cart {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return &t.Cart
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetCustomer() *OrderByCustomerEmail_OrderByCustomerEmail_Customer {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return &t.Customer
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetPaymentMethod() *OrderByCustomerEmail_OrderByCustomerEmail_PaymentMethod {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.PaymentMethod
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetShippingMethod() *OrderByCustomerEmail_OrderByCustomerEmail_ShippingMethod {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.ShippingMethod
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetCouponCode() *OrderByCustomerEmail_OrderByCustomerEmail_CouponCode {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.CouponCode
}
func (t *OrderByCustomerEmail_OrderByCustomerEmail) GetPayments() []*OrderByCustomerEmail_OrderByCustomerEmail_Payments {
	if t == nil {
		t = &OrderByCustomerEmail_OrderByCustomerEmail{}
	}
	return t.Payments
}

type Orders_Orders_BillingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *Orders_Orders_BillingAddress_Location) GetID() string {
	if t == nil {
		t = &Orders_Orders_BillingAddress_Location{}
	}
	return t.ID
}
func (t *Orders_Orders_BillingAddress_Location) GetName() string {
	if t == nil {
		t = &Orders_Orders_BillingAddress_Location{}
	}
	return t.Name
}
func (t *Orders_Orders_BillingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &Orders_Orders_BillingAddress_Location{}
	}
	return t.ShortCode
}

type Orders_Orders_BillingAddress struct {
	ID        string                                "json:\"id\" graphql:\"id\""
	Street    string                                "json:\"street\" graphql:\"street\""
	StreetTwo *string                               "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                "json:\"city\" graphql:\"city\""
	State     *string                               "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                "json:\"postcode\" graphql:\"postcode\""
	Email     *string                               "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                               "json:\"phone,omitempty\" graphql:\"phone\""
	Location  Orders_Orders_BillingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *Orders_Orders_BillingAddress) GetID() string {
	if t == nil {
		t = &Orders_Orders_BillingAddress{}
	}
	return t.ID
}
func (t *Orders_Orders_BillingAddress) GetStreet() string {
	if t == nil {
		t = &Orders_Orders_BillingAddress{}
	}
	return t.Street
}
func (t *Orders_Orders_BillingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &Orders_Orders_BillingAddress{}
	}
	return t.StreetTwo
}
func (t *Orders_Orders_BillingAddress) GetCity() string {
	if t == nil {
		t = &Orders_Orders_BillingAddress{}
	}
	return t.City
}
func (t *Orders_Orders_BillingAddress) GetState() *string {
	if t == nil {
		t = &Orders_Orders_BillingAddress{}
	}
	return t.State
}
func (t *Orders_Orders_BillingAddress) GetPostcode() string {
	if t == nil {
		t = &Orders_Orders_BillingAddress{}
	}
	return t.Postcode
}
func (t *Orders_Orders_BillingAddress) GetEmail() *string {
	if t == nil {
		t = &Orders_Orders_BillingAddress{}
	}
	return t.Email
}
func (t *Orders_Orders_BillingAddress) GetPhone() *string {
	if t == nil {
		t = &Orders_Orders_BillingAddress{}
	}
	return t.Phone
}
func (t *Orders_Orders_BillingAddress) GetLocation() *Orders_Orders_BillingAddress_Location {
	if t == nil {
		t = &Orders_Orders_BillingAddress{}
	}
	return &t.Location
}

type Orders_Orders_ShippingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *Orders_Orders_ShippingAddress_Location) GetID() string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress_Location{}
	}
	return t.ID
}
func (t *Orders_Orders_ShippingAddress_Location) GetName() string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress_Location{}
	}
	return t.Name
}
func (t *Orders_Orders_ShippingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress_Location{}
	}
	return t.ShortCode
}

type Orders_Orders_ShippingAddress struct {
	ID        string                                 "json:\"id\" graphql:\"id\""
	Street    string                                 "json:\"street\" graphql:\"street\""
	StreetTwo *string                                "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                 "json:\"city\" graphql:\"city\""
	State     *string                                "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                 "json:\"postcode\" graphql:\"postcode\""
	Email     *string                                "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                                "json:\"phone,omitempty\" graphql:\"phone\""
	Location  Orders_Orders_ShippingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *Orders_Orders_ShippingAddress) GetID() string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress{}
	}
	return t.ID
}
func (t *Orders_Orders_ShippingAddress) GetStreet() string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress{}
	}
	return t.Street
}
func (t *Orders_Orders_ShippingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress{}
	}
	return t.StreetTwo
}
func (t *Orders_Orders_ShippingAddress) GetCity() string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress{}
	}
	return t.City
}
func (t *Orders_Orders_ShippingAddress) GetState() *string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress{}
	}
	return t.State
}
func (t *Orders_Orders_ShippingAddress) GetPostcode() string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress{}
	}
	return t.Postcode
}
func (t *Orders_Orders_ShippingAddress) GetEmail() *string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress{}
	}
	return t.Email
}
func (t *Orders_Orders_ShippingAddress) GetPhone() *string {
	if t == nil {
		t = &Orders_Orders_ShippingAddress{}
	}
	return t.Phone
}
func (t *Orders_Orders_ShippingAddress) GetLocation() *Orders_Orders_ShippingAddress_Location {
	if t == nil {
		t = &Orders_Orders_ShippingAddress{}
	}
	return &t.Location
}

type Orders_Orders_Cart_CartItems_Product struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Slug       string   "json:\"slug\" graphql:\"slug\""
	FullImages []string "json:\"fullImages\" graphql:\"fullImages\""
}

func (t *Orders_Orders_Cart_CartItems_Product) GetID() string {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Product{}
	}
	return t.ID
}
func (t *Orders_Orders_Cart_CartItems_Product) GetName() string {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Product{}
	}
	return t.Name
}
func (t *Orders_Orders_Cart_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Product{}
	}
	return t.Slug
}
func (t *Orders_Orders_Cart_CartItems_Product) GetFullImages() []string {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Product{}
	}
	return t.FullImages
}

type Orders_Orders_Cart_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *Orders_Orders_Cart_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Attributes{}
	}
	return t.Name
}
func (t *Orders_Orders_Cart_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type Orders_Orders_Cart_CartItems_Variation struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *Orders_Orders_Cart_CartItems_Variation) GetID() string {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Variation{}
	}
	return t.ID
}
func (t *Orders_Orders_Cart_CartItems_Variation) GetName() string {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Variation{}
	}
	return t.Name
}
func (t *Orders_Orders_Cart_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Variation{}
	}
	return t.Price
}
func (t *Orders_Orders_Cart_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Variation{}
	}
	return t.Sku
}
func (t *Orders_Orders_Cart_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems_Variation{}
	}
	return t.Stock
}

type Orders_Orders_Cart_CartItems struct {
	ID            int                                        "json:\"id\" graphql:\"id\""
	Product       Orders_Orders_Cart_CartItems_Product       "json:\"product\" graphql:\"product\""
	Quantity      int                                        "json:\"quantity\" graphql:\"quantity\""
	PurchasePrice int                                        "json:\"purchasePrice\" graphql:\"purchasePrice\""
	Attributes    []*Orders_Orders_Cart_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation     *Orders_Orders_Cart_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *Orders_Orders_Cart_CartItems) GetID() int {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems{}
	}
	return t.ID
}
func (t *Orders_Orders_Cart_CartItems) GetProduct() *Orders_Orders_Cart_CartItems_Product {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems{}
	}
	return &t.Product
}
func (t *Orders_Orders_Cart_CartItems) GetQuantity() int {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems{}
	}
	return t.Quantity
}
func (t *Orders_Orders_Cart_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems{}
	}
	return t.PurchasePrice
}
func (t *Orders_Orders_Cart_CartItems) GetAttributes() []*Orders_Orders_Cart_CartItems_Attributes {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems{}
	}
	return t.Attributes
}
func (t *Orders_Orders_Cart_CartItems) GetVariation() *Orders_Orders_Cart_CartItems_Variation {
	if t == nil {
		t = &Orders_Orders_Cart_CartItems{}
	}
	return t.Variation
}

type Orders_Orders_Cart struct {
	ID                 string                          "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                            "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*Orders_Orders_Cart_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *Orders_Orders_Cart) GetID() string {
	if t == nil {
		t = &Orders_Orders_Cart{}
	}
	return t.ID
}
func (t *Orders_Orders_Cart) GetIsShippingRequired() bool {
	if t == nil {
		t = &Orders_Orders_Cart{}
	}
	return t.IsShippingRequired
}
func (t *Orders_Orders_Cart) GetCartItems() []*Orders_Orders_Cart_CartItems {
	if t == nil {
		t = &Orders_Orders_Cart{}
	}
	return t.CartItems
}

type Orders_Orders_Customer struct {
	Email          string  "json:\"email\" graphql:\"email\""
	Phone          *string "json:\"phone,omitempty\" graphql:\"phone\""
	FirstName      string  "json:\"firstName\" graphql:\"firstName\""
	LastName       string  "json:\"lastName\" graphql:\"lastName\""
	ProfilePicture *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
}

func (t *Orders_Orders_Customer) GetEmail() string {
	if t == nil {
		t = &Orders_Orders_Customer{}
	}
	return t.Email
}
func (t *Orders_Orders_Customer) GetPhone() *string {
	if t == nil {
		t = &Orders_Orders_Customer{}
	}
	return t.Phone
}
func (t *Orders_Orders_Customer) GetFirstName() string {
	if t == nil {
		t = &Orders_Orders_Customer{}
	}
	return t.FirstName
}
func (t *Orders_Orders_Customer) GetLastName() string {
	if t == nil {
		t = &Orders_Orders_Customer{}
	}
	return t.LastName
}
func (t *Orders_Orders_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &Orders_Orders_Customer{}
	}
	return t.ProfilePicture
}

type Orders_Orders_PaymentMethod struct {
	ID               string "json:\"id\" graphql:\"id\""
	DisplayName      string "json:\"displayName\" graphql:\"displayName\""
	CurrencyName     string "json:\"currencyName\" graphql:\"currencyName\""
	CurrencySymbol   string "json:\"currencySymbol\" graphql:\"currencySymbol\""
	IsDigitalPayment bool   "json:\"isDigitalPayment\" graphql:\"isDigitalPayment\""
}

func (t *Orders_Orders_PaymentMethod) GetID() string {
	if t == nil {
		t = &Orders_Orders_PaymentMethod{}
	}
	return t.ID
}
func (t *Orders_Orders_PaymentMethod) GetDisplayName() string {
	if t == nil {
		t = &Orders_Orders_PaymentMethod{}
	}
	return t.DisplayName
}
func (t *Orders_Orders_PaymentMethod) GetCurrencyName() string {
	if t == nil {
		t = &Orders_Orders_PaymentMethod{}
	}
	return t.CurrencyName
}
func (t *Orders_Orders_PaymentMethod) GetCurrencySymbol() string {
	if t == nil {
		t = &Orders_Orders_PaymentMethod{}
	}
	return t.CurrencySymbol
}
func (t *Orders_Orders_PaymentMethod) GetIsDigitalPayment() bool {
	if t == nil {
		t = &Orders_Orders_PaymentMethod{}
	}
	return t.IsDigitalPayment
}

type Orders_Orders_ShippingMethod struct {
	ID                 string            "json:\"id\" graphql:\"id\""
	DisplayName        string            "json:\"displayName\" graphql:\"displayName\""
	DeliveryCharge     int               "json:\"deliveryCharge\" graphql:\"deliveryCharge\""
	DeliveryTimeInDays int               "json:\"deliveryTimeInDays\" graphql:\"deliveryTimeInDays\""
	WeightUnit         models.WeightUnit "json:\"WeightUnit\" graphql:\"WeightUnit\""
	IsFlat             bool              "json:\"isFlat\" graphql:\"isFlat\""
	IsActive           bool              "json:\"isActive\" graphql:\"isActive\""
}

func (t *Orders_Orders_ShippingMethod) GetID() string {
	if t == nil {
		t = &Orders_Orders_ShippingMethod{}
	}
	return t.ID
}
func (t *Orders_Orders_ShippingMethod) GetDisplayName() string {
	if t == nil {
		t = &Orders_Orders_ShippingMethod{}
	}
	return t.DisplayName
}
func (t *Orders_Orders_ShippingMethod) GetDeliveryCharge() int {
	if t == nil {
		t = &Orders_Orders_ShippingMethod{}
	}
	return t.DeliveryCharge
}
func (t *Orders_Orders_ShippingMethod) GetDeliveryTimeInDays() int {
	if t == nil {
		t = &Orders_Orders_ShippingMethod{}
	}
	return t.DeliveryTimeInDays
}
func (t *Orders_Orders_ShippingMethod) GetWeightUnit() *models.WeightUnit {
	if t == nil {
		t = &Orders_Orders_ShippingMethod{}
	}
	return &t.WeightUnit
}
func (t *Orders_Orders_ShippingMethod) GetIsFlat() bool {
	if t == nil {
		t = &Orders_Orders_ShippingMethod{}
	}
	return t.IsFlat
}
func (t *Orders_Orders_ShippingMethod) GetIsActive() bool {
	if t == nil {
		t = &Orders_Orders_ShippingMethod{}
	}
	return t.IsActive
}

type Orders_Orders_CouponCode struct {
	Code         string              "json:\"code\" graphql:\"code\""
	DiscountType models.DiscountType "json:\"discountType\" graphql:\"discountType\""
}

func (t *Orders_Orders_CouponCode) GetCode() string {
	if t == nil {
		t = &Orders_Orders_CouponCode{}
	}
	return t.Code
}
func (t *Orders_Orders_CouponCode) GetDiscountType() *models.DiscountType {
	if t == nil {
		t = &Orders_Orders_CouponCode{}
	}
	return &t.DiscountType
}

type Orders_Orders_Payments struct {
	IsPaid        bool   "json:\"isPaid\" graphql:\"isPaid\""
	PayableAmount int    "json:\"payableAmount\" graphql:\"payableAmount\""
	GatewayName   string "json:\"gatewayName\" graphql:\"gatewayName\""
}

func (t *Orders_Orders_Payments) GetIsPaid() bool {
	if t == nil {
		t = &Orders_Orders_Payments{}
	}
	return t.IsPaid
}
func (t *Orders_Orders_Payments) GetPayableAmount() int {
	if t == nil {
		t = &Orders_Orders_Payments{}
	}
	return t.PayableAmount
}
func (t *Orders_Orders_Payments) GetGatewayName() string {
	if t == nil {
		t = &Orders_Orders_Payments{}
	}
	return t.GatewayName
}

type Orders_Orders struct {
	ID                   string                         "json:\"id\" graphql:\"id\""
	Hash                 string                         "json:\"hash\" graphql:\"hash\""
	ShippingCharge       int                            "json:\"shippingCharge\" graphql:\"shippingCharge\""
	PaymentProcessingFee int                            "json:\"paymentProcessingFee\" graphql:\"paymentProcessingFee\""
	Subtotal             int                            "json:\"subtotal\" graphql:\"subtotal\""
	GrandTotal           int                            "json:\"grandTotal\" graphql:\"grandTotal\""
	DiscountedAmount     int                            "json:\"discountedAmount\" graphql:\"discountedAmount\""
	Status               models.OrderStatus             "json:\"status\" graphql:\"status\""
	PaymentStatus        models.OrderPaymentStatus      "json:\"paymentStatus\" graphql:\"paymentStatus\""
	CreatedAt            string                         "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt            *string                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	BillingAddress       Orders_Orders_BillingAddress   "json:\"billingAddress\" graphql:\"billingAddress\""
	ShippingAddress      *Orders_Orders_ShippingAddress "json:\"shippingAddress,omitempty\" graphql:\"shippingAddress\""
	Cart                 Orders_Orders_Cart             "json:\"cart\" graphql:\"cart\""
	Customer             Orders_Orders_Customer         "json:\"customer\" graphql:\"customer\""
	PaymentMethod        *Orders_Orders_PaymentMethod   "json:\"paymentMethod,omitempty\" graphql:\"paymentMethod\""
	ShippingMethod       *Orders_Orders_ShippingMethod  "json:\"shippingMethod,omitempty\" graphql:\"shippingMethod\""
	CouponCode           *Orders_Orders_CouponCode      "json:\"couponCode,omitempty\" graphql:\"couponCode\""
	Payments             []*Orders_Orders_Payments      "json:\"payments\" graphql:\"payments\""
}

func (t *Orders_Orders) GetID() string {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.ID
}
func (t *Orders_Orders) GetHash() string {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.Hash
}
func (t *Orders_Orders) GetShippingCharge() int {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.ShippingCharge
}
func (t *Orders_Orders) GetPaymentProcessingFee() int {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.PaymentProcessingFee
}
func (t *Orders_Orders) GetSubtotal() int {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.Subtotal
}
func (t *Orders_Orders) GetGrandTotal() int {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.GrandTotal
}
func (t *Orders_Orders) GetDiscountedAmount() int {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.DiscountedAmount
}
func (t *Orders_Orders) GetStatus() *models.OrderStatus {
	if t == nil {
		t = &Orders_Orders{}
	}
	return &t.Status
}
func (t *Orders_Orders) GetPaymentStatus() *models.OrderPaymentStatus {
	if t == nil {
		t = &Orders_Orders{}
	}
	return &t.PaymentStatus
}
func (t *Orders_Orders) GetCreatedAt() string {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.CreatedAt
}
func (t *Orders_Orders) GetUpdatedAt() *string {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.UpdatedAt
}
func (t *Orders_Orders) GetBillingAddress() *Orders_Orders_BillingAddress {
	if t == nil {
		t = &Orders_Orders{}
	}
	return &t.BillingAddress
}
func (t *Orders_Orders) GetShippingAddress() *Orders_Orders_ShippingAddress {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.ShippingAddress
}
func (t *Orders_Orders) GetCart() *Orders_Orders_Cart {
	if t == nil {
		t = &Orders_Orders{}
	}
	return &t.Cart
}
func (t *Orders_Orders) GetCustomer() *Orders_Orders_Customer {
	if t == nil {
		t = &Orders_Orders{}
	}
	return &t.Customer
}
func (t *Orders_Orders) GetPaymentMethod() *Orders_Orders_PaymentMethod {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.PaymentMethod
}
func (t *Orders_Orders) GetShippingMethod() *Orders_Orders_ShippingMethod {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.ShippingMethod
}
func (t *Orders_Orders) GetCouponCode() *Orders_Orders_CouponCode {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.CouponCode
}
func (t *Orders_Orders) GetPayments() []*Orders_Orders_Payments {
	if t == nil {
		t = &Orders_Orders{}
	}
	return t.Payments
}

type OrdersByAdmin_OrdersByAdmin_BillingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress_Location) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress_Location{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress_Location) GetName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress_Location{}
	}
	return t.Name
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress_Location{}
	}
	return t.ShortCode
}

type OrdersByAdmin_OrdersByAdmin_BillingAddress struct {
	ID        string                                              "json:\"id\" graphql:\"id\""
	Street    string                                              "json:\"street\" graphql:\"street\""
	StreetTwo *string                                             "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                              "json:\"city\" graphql:\"city\""
	State     *string                                             "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                              "json:\"postcode\" graphql:\"postcode\""
	Email     *string                                             "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                                             "json:\"phone,omitempty\" graphql:\"phone\""
	Location  OrdersByAdmin_OrdersByAdmin_BillingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress) GetStreet() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress{}
	}
	return t.Street
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress{}
	}
	return t.StreetTwo
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress) GetCity() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress{}
	}
	return t.City
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress) GetState() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress{}
	}
	return t.State
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress) GetPostcode() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress{}
	}
	return t.Postcode
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress) GetEmail() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress{}
	}
	return t.Email
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress) GetPhone() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress{}
	}
	return t.Phone
}
func (t *OrdersByAdmin_OrdersByAdmin_BillingAddress) GetLocation() *OrdersByAdmin_OrdersByAdmin_BillingAddress_Location {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_BillingAddress{}
	}
	return &t.Location
}

type OrdersByAdmin_OrdersByAdmin_ShippingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress_Location) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress_Location{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress_Location) GetName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress_Location{}
	}
	return t.Name
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress_Location{}
	}
	return t.ShortCode
}

type OrdersByAdmin_OrdersByAdmin_ShippingAddress struct {
	ID        string                                               "json:\"id\" graphql:\"id\""
	Street    string                                               "json:\"street\" graphql:\"street\""
	StreetTwo *string                                              "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                               "json:\"city\" graphql:\"city\""
	State     *string                                              "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                               "json:\"postcode\" graphql:\"postcode\""
	Email     *string                                              "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                                              "json:\"phone,omitempty\" graphql:\"phone\""
	Location  OrdersByAdmin_OrdersByAdmin_ShippingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress) GetStreet() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress{}
	}
	return t.Street
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress{}
	}
	return t.StreetTwo
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress) GetCity() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress{}
	}
	return t.City
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress) GetState() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress{}
	}
	return t.State
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress) GetPostcode() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress{}
	}
	return t.Postcode
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress) GetEmail() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress{}
	}
	return t.Email
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress) GetPhone() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress{}
	}
	return t.Phone
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingAddress) GetLocation() *OrdersByAdmin_OrdersByAdmin_ShippingAddress_Location {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingAddress{}
	}
	return &t.Location
}

type OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Slug       string   "json:\"slug\" graphql:\"slug\""
	FullImages []string "json:\"fullImages\" graphql:\"fullImages\""
}

func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product) GetName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product{}
	}
	return t.Name
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product{}
	}
	return t.Slug
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product) GetFullImages() []string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product{}
	}
	return t.FullImages
}

type OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Attributes{}
	}
	return t.Name
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation) GetName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation{}
	}
	return t.Name
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation{}
	}
	return t.Price
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation{}
	}
	return t.Sku
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation{}
	}
	return t.Stock
}

type OrdersByAdmin_OrdersByAdmin_Cart_CartItems struct {
	ID            int                                                      "json:\"id\" graphql:\"id\""
	Product       OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product       "json:\"product\" graphql:\"product\""
	Quantity      int                                                      "json:\"quantity\" graphql:\"quantity\""
	PurchasePrice int                                                      "json:\"purchasePrice\" graphql:\"purchasePrice\""
	Attributes    []*OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation     *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems) GetID() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems) GetProduct() *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Product {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems{}
	}
	return &t.Product
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems) GetQuantity() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems{}
	}
	return t.Quantity
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems{}
	}
	return t.PurchasePrice
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems) GetAttributes() []*OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Attributes {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems{}
	}
	return t.Attributes
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart_CartItems) GetVariation() *OrdersByAdmin_OrdersByAdmin_Cart_CartItems_Variation {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart_CartItems{}
	}
	return t.Variation
}

type OrdersByAdmin_OrdersByAdmin_Cart struct {
	ID                 string                                        "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                                          "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*OrdersByAdmin_OrdersByAdmin_Cart_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *OrdersByAdmin_OrdersByAdmin_Cart) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart) GetIsShippingRequired() bool {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart{}
	}
	return t.IsShippingRequired
}
func (t *OrdersByAdmin_OrdersByAdmin_Cart) GetCartItems() []*OrdersByAdmin_OrdersByAdmin_Cart_CartItems {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Cart{}
	}
	return t.CartItems
}

type OrdersByAdmin_OrdersByAdmin_Customer struct {
	Email          string  "json:\"email\" graphql:\"email\""
	Phone          *string "json:\"phone,omitempty\" graphql:\"phone\""
	FirstName      string  "json:\"firstName\" graphql:\"firstName\""
	LastName       string  "json:\"lastName\" graphql:\"lastName\""
	ProfilePicture *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
}

func (t *OrdersByAdmin_OrdersByAdmin_Customer) GetEmail() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Customer{}
	}
	return t.Email
}
func (t *OrdersByAdmin_OrdersByAdmin_Customer) GetPhone() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Customer{}
	}
	return t.Phone
}
func (t *OrdersByAdmin_OrdersByAdmin_Customer) GetFirstName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Customer{}
	}
	return t.FirstName
}
func (t *OrdersByAdmin_OrdersByAdmin_Customer) GetLastName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Customer{}
	}
	return t.LastName
}
func (t *OrdersByAdmin_OrdersByAdmin_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Customer{}
	}
	return t.ProfilePicture
}

type OrdersByAdmin_OrdersByAdmin_PaymentMethod struct {
	ID               string "json:\"id\" graphql:\"id\""
	DisplayName      string "json:\"displayName\" graphql:\"displayName\""
	CurrencyName     string "json:\"currencyName\" graphql:\"currencyName\""
	CurrencySymbol   string "json:\"currencySymbol\" graphql:\"currencySymbol\""
	IsDigitalPayment bool   "json:\"isDigitalPayment\" graphql:\"isDigitalPayment\""
}

func (t *OrdersByAdmin_OrdersByAdmin_PaymentMethod) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_PaymentMethod{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_PaymentMethod) GetDisplayName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_PaymentMethod{}
	}
	return t.DisplayName
}
func (t *OrdersByAdmin_OrdersByAdmin_PaymentMethod) GetCurrencyName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_PaymentMethod{}
	}
	return t.CurrencyName
}
func (t *OrdersByAdmin_OrdersByAdmin_PaymentMethod) GetCurrencySymbol() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_PaymentMethod{}
	}
	return t.CurrencySymbol
}
func (t *OrdersByAdmin_OrdersByAdmin_PaymentMethod) GetIsDigitalPayment() bool {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_PaymentMethod{}
	}
	return t.IsDigitalPayment
}

type OrdersByAdmin_OrdersByAdmin_ShippingMethod struct {
	ID                 string            "json:\"id\" graphql:\"id\""
	DisplayName        string            "json:\"displayName\" graphql:\"displayName\""
	DeliveryCharge     int               "json:\"deliveryCharge\" graphql:\"deliveryCharge\""
	DeliveryTimeInDays int               "json:\"deliveryTimeInDays\" graphql:\"deliveryTimeInDays\""
	WeightUnit         models.WeightUnit "json:\"WeightUnit\" graphql:\"WeightUnit\""
	IsFlat             bool              "json:\"isFlat\" graphql:\"isFlat\""
	IsActive           bool              "json:\"isActive\" graphql:\"isActive\""
}

func (t *OrdersByAdmin_OrdersByAdmin_ShippingMethod) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingMethod{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingMethod) GetDisplayName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingMethod{}
	}
	return t.DisplayName
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingMethod) GetDeliveryCharge() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingMethod{}
	}
	return t.DeliveryCharge
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingMethod) GetDeliveryTimeInDays() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingMethod{}
	}
	return t.DeliveryTimeInDays
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingMethod) GetWeightUnit() *models.WeightUnit {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingMethod{}
	}
	return &t.WeightUnit
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingMethod) GetIsFlat() bool {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingMethod{}
	}
	return t.IsFlat
}
func (t *OrdersByAdmin_OrdersByAdmin_ShippingMethod) GetIsActive() bool {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_ShippingMethod{}
	}
	return t.IsActive
}

type OrdersByAdmin_OrdersByAdmin_CouponCode struct {
	Code         string              "json:\"code\" graphql:\"code\""
	DiscountType models.DiscountType "json:\"discountType\" graphql:\"discountType\""
}

func (t *OrdersByAdmin_OrdersByAdmin_CouponCode) GetCode() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_CouponCode{}
	}
	return t.Code
}
func (t *OrdersByAdmin_OrdersByAdmin_CouponCode) GetDiscountType() *models.DiscountType {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_CouponCode{}
	}
	return &t.DiscountType
}

type OrdersByAdmin_OrdersByAdmin_Payments struct {
	IsPaid        bool   "json:\"isPaid\" graphql:\"isPaid\""
	PayableAmount int    "json:\"payableAmount\" graphql:\"payableAmount\""
	GatewayName   string "json:\"gatewayName\" graphql:\"gatewayName\""
}

func (t *OrdersByAdmin_OrdersByAdmin_Payments) GetIsPaid() bool {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Payments{}
	}
	return t.IsPaid
}
func (t *OrdersByAdmin_OrdersByAdmin_Payments) GetPayableAmount() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Payments{}
	}
	return t.PayableAmount
}
func (t *OrdersByAdmin_OrdersByAdmin_Payments) GetGatewayName() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin_Payments{}
	}
	return t.GatewayName
}

type OrdersByAdmin_OrdersByAdmin struct {
	ID                   string                                       "json:\"id\" graphql:\"id\""
	Hash                 string                                       "json:\"hash\" graphql:\"hash\""
	ShippingCharge       int                                          "json:\"shippingCharge\" graphql:\"shippingCharge\""
	PaymentProcessingFee int                                          "json:\"paymentProcessingFee\" graphql:\"paymentProcessingFee\""
	Subtotal             int                                          "json:\"subtotal\" graphql:\"subtotal\""
	GrandTotal           int                                          "json:\"grandTotal\" graphql:\"grandTotal\""
	DiscountedAmount     int                                          "json:\"discountedAmount\" graphql:\"discountedAmount\""
	Status               models.OrderStatus                           "json:\"status\" graphql:\"status\""
	PaymentStatus        models.OrderPaymentStatus                    "json:\"paymentStatus\" graphql:\"paymentStatus\""
	CreatedAt            string                                       "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt            *string                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	BillingAddress       OrdersByAdmin_OrdersByAdmin_BillingAddress   "json:\"billingAddress\" graphql:\"billingAddress\""
	ShippingAddress      *OrdersByAdmin_OrdersByAdmin_ShippingAddress "json:\"shippingAddress,omitempty\" graphql:\"shippingAddress\""
	Cart                 OrdersByAdmin_OrdersByAdmin_Cart             "json:\"cart\" graphql:\"cart\""
	Customer             OrdersByAdmin_OrdersByAdmin_Customer         "json:\"customer\" graphql:\"customer\""
	PaymentMethod        *OrdersByAdmin_OrdersByAdmin_PaymentMethod   "json:\"paymentMethod,omitempty\" graphql:\"paymentMethod\""
	ShippingMethod       *OrdersByAdmin_OrdersByAdmin_ShippingMethod  "json:\"shippingMethod,omitempty\" graphql:\"shippingMethod\""
	CouponCode           *OrdersByAdmin_OrdersByAdmin_CouponCode      "json:\"couponCode,omitempty\" graphql:\"couponCode\""
	Payments             []*OrdersByAdmin_OrdersByAdmin_Payments      "json:\"payments\" graphql:\"payments\""
}

func (t *OrdersByAdmin_OrdersByAdmin) GetID() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.ID
}
func (t *OrdersByAdmin_OrdersByAdmin) GetHash() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.Hash
}
func (t *OrdersByAdmin_OrdersByAdmin) GetShippingCharge() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.ShippingCharge
}
func (t *OrdersByAdmin_OrdersByAdmin) GetPaymentProcessingFee() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.PaymentProcessingFee
}
func (t *OrdersByAdmin_OrdersByAdmin) GetSubtotal() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.Subtotal
}
func (t *OrdersByAdmin_OrdersByAdmin) GetGrandTotal() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.GrandTotal
}
func (t *OrdersByAdmin_OrdersByAdmin) GetDiscountedAmount() int {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.DiscountedAmount
}
func (t *OrdersByAdmin_OrdersByAdmin) GetStatus() *models.OrderStatus {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return &t.Status
}
func (t *OrdersByAdmin_OrdersByAdmin) GetPaymentStatus() *models.OrderPaymentStatus {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return &t.PaymentStatus
}
func (t *OrdersByAdmin_OrdersByAdmin) GetCreatedAt() string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.CreatedAt
}
func (t *OrdersByAdmin_OrdersByAdmin) GetUpdatedAt() *string {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.UpdatedAt
}
func (t *OrdersByAdmin_OrdersByAdmin) GetBillingAddress() *OrdersByAdmin_OrdersByAdmin_BillingAddress {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return &t.BillingAddress
}
func (t *OrdersByAdmin_OrdersByAdmin) GetShippingAddress() *OrdersByAdmin_OrdersByAdmin_ShippingAddress {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.ShippingAddress
}
func (t *OrdersByAdmin_OrdersByAdmin) GetCart() *OrdersByAdmin_OrdersByAdmin_Cart {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return &t.Cart
}
func (t *OrdersByAdmin_OrdersByAdmin) GetCustomer() *OrdersByAdmin_OrdersByAdmin_Customer {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return &t.Customer
}
func (t *OrdersByAdmin_OrdersByAdmin) GetPaymentMethod() *OrdersByAdmin_OrdersByAdmin_PaymentMethod {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.PaymentMethod
}
func (t *OrdersByAdmin_OrdersByAdmin) GetShippingMethod() *OrdersByAdmin_OrdersByAdmin_ShippingMethod {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.ShippingMethod
}
func (t *OrdersByAdmin_OrdersByAdmin) GetCouponCode() *OrdersByAdmin_OrdersByAdmin_CouponCode {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.CouponCode
}
func (t *OrdersByAdmin_OrdersByAdmin) GetPayments() []*OrdersByAdmin_OrdersByAdmin_Payments {
	if t == nil {
		t = &OrdersByAdmin_OrdersByAdmin{}
	}
	return t.Payments
}

type PaymentMethods_PaymentMethods struct {
	ID               string "json:\"id\" graphql:\"id\""
	DisplayName      string "json:\"displayName\" graphql:\"displayName\""
	CurrencyName     string "json:\"currencyName\" graphql:\"currencyName\""
	CurrencySymbol   string "json:\"currencySymbol\" graphql:\"currencySymbol\""
	IsDigitalPayment bool   "json:\"isDigitalPayment\" graphql:\"isDigitalPayment\""
}

func (t *PaymentMethods_PaymentMethods) GetID() string {
	if t == nil {
		t = &PaymentMethods_PaymentMethods{}
	}
	return t.ID
}
func (t *PaymentMethods_PaymentMethods) GetDisplayName() string {
	if t == nil {
		t = &PaymentMethods_PaymentMethods{}
	}
	return t.DisplayName
}
func (t *PaymentMethods_PaymentMethods) GetCurrencyName() string {
	if t == nil {
		t = &PaymentMethods_PaymentMethods{}
	}
	return t.CurrencyName
}
func (t *PaymentMethods_PaymentMethods) GetCurrencySymbol() string {
	if t == nil {
		t = &PaymentMethods_PaymentMethods{}
	}
	return t.CurrencySymbol
}
func (t *PaymentMethods_PaymentMethods) GetIsDigitalPayment() bool {
	if t == nil {
		t = &PaymentMethods_PaymentMethods{}
	}
	return t.IsDigitalPayment
}

type Product_Product_Category struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Slug        string  "json:\"slug\" graphql:\"slug\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage   *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
}

func (t *Product_Product_Category) GetID() string {
	if t == nil {
		t = &Product_Product_Category{}
	}
	return t.ID
}
func (t *Product_Product_Category) GetName() string {
	if t == nil {
		t = &Product_Product_Category{}
	}
	return t.Name
}
func (t *Product_Product_Category) GetSlug() string {
	if t == nil {
		t = &Product_Product_Category{}
	}
	return t.Slug
}
func (t *Product_Product_Category) GetDescription() *string {
	if t == nil {
		t = &Product_Product_Category{}
	}
	return t.Description
}
func (t *Product_Product_Category) GetFullImage() *string {
	if t == nil {
		t = &Product_Product_Category{}
	}
	return t.FullImage
}

type Product_Product_Attributes struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Values     []string "json:\"values\" graphql:\"values\""
	IsRequired bool     "json:\"isRequired\" graphql:\"isRequired\""
}

func (t *Product_Product_Attributes) GetID() string {
	if t == nil {
		t = &Product_Product_Attributes{}
	}
	return t.ID
}
func (t *Product_Product_Attributes) GetName() string {
	if t == nil {
		t = &Product_Product_Attributes{}
	}
	return t.Name
}
func (t *Product_Product_Attributes) GetValues() []string {
	if t == nil {
		t = &Product_Product_Attributes{}
	}
	return t.Values
}
func (t *Product_Product_Attributes) GetIsRequired() bool {
	if t == nil {
		t = &Product_Product_Attributes{}
	}
	return t.IsRequired
}

type Product_Product_Variations struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Price int     "json:\"price\" graphql:\"price\""
	Name  string  "json:\"name\" graphql:\"name\""
}

func (t *Product_Product_Variations) GetID() string {
	if t == nil {
		t = &Product_Product_Variations{}
	}
	return t.ID
}
func (t *Product_Product_Variations) GetStock() *int {
	if t == nil {
		t = &Product_Product_Variations{}
	}
	return t.Stock
}
func (t *Product_Product_Variations) GetSku() *string {
	if t == nil {
		t = &Product_Product_Variations{}
	}
	return t.Sku
}
func (t *Product_Product_Variations) GetPrice() int {
	if t == nil {
		t = &Product_Product_Variations{}
	}
	return t.Price
}
func (t *Product_Product_Variations) GetName() string {
	if t == nil {
		t = &Product_Product_Variations{}
	}
	return t.Name
}

type Product_Product_DigitalItems_Contents struct {
	Position       int                       "json:\"position\" graphql:\"position\""
	Title          string                    "json:\"title\" graphql:\"title\""
	ID             string                    "json:\"id\" graphql:\"id\""
	UpdatedAt      string                    "json:\"updatedAt\" graphql:\"updatedAt\""
	ContentText    *string                   "json:\"contentText,omitempty\" graphql:\"contentText\""
	ContentType    models.DigitalContentType "json:\"contentType\" graphql:\"contentType\""
	ContentURL     *string                   "json:\"contentUrl,omitempty\" graphql:\"contentUrl\""
	IsTrialAllowed bool                      "json:\"isTrialAllowed\" graphql:\"isTrialAllowed\""
}

func (t *Product_Product_DigitalItems_Contents) GetPosition() int {
	if t == nil {
		t = &Product_Product_DigitalItems_Contents{}
	}
	return t.Position
}
func (t *Product_Product_DigitalItems_Contents) GetTitle() string {
	if t == nil {
		t = &Product_Product_DigitalItems_Contents{}
	}
	return t.Title
}
func (t *Product_Product_DigitalItems_Contents) GetID() string {
	if t == nil {
		t = &Product_Product_DigitalItems_Contents{}
	}
	return t.ID
}
func (t *Product_Product_DigitalItems_Contents) GetUpdatedAt() string {
	if t == nil {
		t = &Product_Product_DigitalItems_Contents{}
	}
	return t.UpdatedAt
}
func (t *Product_Product_DigitalItems_Contents) GetContentText() *string {
	if t == nil {
		t = &Product_Product_DigitalItems_Contents{}
	}
	return t.ContentText
}
func (t *Product_Product_DigitalItems_Contents) GetContentType() *models.DigitalContentType {
	if t == nil {
		t = &Product_Product_DigitalItems_Contents{}
	}
	return &t.ContentType
}
func (t *Product_Product_DigitalItems_Contents) GetContentURL() *string {
	if t == nil {
		t = &Product_Product_DigitalItems_Contents{}
	}
	return t.ContentURL
}
func (t *Product_Product_DigitalItems_Contents) GetIsTrialAllowed() bool {
	if t == nil {
		t = &Product_Product_DigitalItems_Contents{}
	}
	return t.IsTrialAllowed
}

type Product_Product_DigitalItems struct {
	ID          string                                   "json:\"id\" graphql:\"id\""
	Description *string                                  "json:\"description,omitempty\" graphql:\"description\""
	Title       string                                   "json:\"title\" graphql:\"title\""
	Position    int                                      "json:\"position\" graphql:\"position\""
	Contents    []*Product_Product_DigitalItems_Contents "json:\"contents\" graphql:\"contents\""
}

func (t *Product_Product_DigitalItems) GetID() string {
	if t == nil {
		t = &Product_Product_DigitalItems{}
	}
	return t.ID
}
func (t *Product_Product_DigitalItems) GetDescription() *string {
	if t == nil {
		t = &Product_Product_DigitalItems{}
	}
	return t.Description
}
func (t *Product_Product_DigitalItems) GetTitle() string {
	if t == nil {
		t = &Product_Product_DigitalItems{}
	}
	return t.Title
}
func (t *Product_Product_DigitalItems) GetPosition() int {
	if t == nil {
		t = &Product_Product_DigitalItems{}
	}
	return t.Position
}
func (t *Product_Product_DigitalItems) GetContents() []*Product_Product_DigitalItems_Contents {
	if t == nil {
		t = &Product_Product_DigitalItems{}
	}
	return t.Contents
}

type Product_Product struct {
	ID                      string                          "json:\"id\" graphql:\"id\""
	Name                    string                          "json:\"name\" graphql:\"name\""
	Slug                    string                          "json:\"slug\" graphql:\"slug\""
	Description             string                          "json:\"description\" graphql:\"description\""
	Sku                     *string                         "json:\"sku,omitempty\" graphql:\"sku\""
	Stock                   *int                            "json:\"stock,omitempty\" graphql:\"stock\""
	MaxItemPerOrder         *int                            "json:\"maxItemPerOrder,omitempty\" graphql:\"maxItemPerOrder\""
	Price                   int                             "json:\"price\" graphql:\"price\""
	FullImages              []string                        "json:\"fullImages\" graphql:\"fullImages\""
	IsDigitalProduct        bool                            "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	Views                   int                             "json:\"views\" graphql:\"views\""
	CreatedAt               string                          "json:\"createdAt\" graphql:\"createdAt\""
	ProductUnit             *models.ProductUnit             "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	UpdatedAt               *string                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Category                *Product_Product_Category       "json:\"category,omitempty\" graphql:\"category\""
	Attributes              []*Product_Product_Attributes   "json:\"attributes\" graphql:\"attributes\""
	Variations              []*Product_Product_Variations   "json:\"variations\" graphql:\"variations\""
	ProductSpecificDiscount int                             "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	DigitalItems            []*Product_Product_DigitalItems "json:\"digitalItems\" graphql:\"digitalItems\""
}

func (t *Product_Product) GetID() string {
	if t == nil {
		t = &Product_Product{}
	}
	return t.ID
}
func (t *Product_Product) GetName() string {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Name
}
func (t *Product_Product) GetSlug() string {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Slug
}
func (t *Product_Product) GetDescription() string {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Description
}
func (t *Product_Product) GetSku() *string {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Sku
}
func (t *Product_Product) GetStock() *int {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Stock
}
func (t *Product_Product) GetMaxItemPerOrder() *int {
	if t == nil {
		t = &Product_Product{}
	}
	return t.MaxItemPerOrder
}
func (t *Product_Product) GetPrice() int {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Price
}
func (t *Product_Product) GetFullImages() []string {
	if t == nil {
		t = &Product_Product{}
	}
	return t.FullImages
}
func (t *Product_Product) GetIsDigitalProduct() bool {
	if t == nil {
		t = &Product_Product{}
	}
	return t.IsDigitalProduct
}
func (t *Product_Product) GetViews() int {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Views
}
func (t *Product_Product) GetCreatedAt() string {
	if t == nil {
		t = &Product_Product{}
	}
	return t.CreatedAt
}
func (t *Product_Product) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &Product_Product{}
	}
	return t.ProductUnit
}
func (t *Product_Product) GetUpdatedAt() *string {
	if t == nil {
		t = &Product_Product{}
	}
	return t.UpdatedAt
}
func (t *Product_Product) GetCategory() *Product_Product_Category {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Category
}
func (t *Product_Product) GetAttributes() []*Product_Product_Attributes {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Attributes
}
func (t *Product_Product) GetVariations() []*Product_Product_Variations {
	if t == nil {
		t = &Product_Product{}
	}
	return t.Variations
}
func (t *Product_Product) GetProductSpecificDiscount() int {
	if t == nil {
		t = &Product_Product{}
	}
	return t.ProductSpecificDiscount
}
func (t *Product_Product) GetDigitalItems() []*Product_Product_DigitalItems {
	if t == nil {
		t = &Product_Product{}
	}
	return t.DigitalItems
}

type ProductByAdmin_ProductByAdmin_Category struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Slug        string  "json:\"slug\" graphql:\"slug\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage   *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
}

func (t *ProductByAdmin_ProductByAdmin_Category) GetID() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Category{}
	}
	return t.ID
}
func (t *ProductByAdmin_ProductByAdmin_Category) GetName() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Category{}
	}
	return t.Name
}
func (t *ProductByAdmin_ProductByAdmin_Category) GetSlug() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Category{}
	}
	return t.Slug
}
func (t *ProductByAdmin_ProductByAdmin_Category) GetDescription() *string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Category{}
	}
	return t.Description
}
func (t *ProductByAdmin_ProductByAdmin_Category) GetFullImage() *string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Category{}
	}
	return t.FullImage
}

type ProductByAdmin_ProductByAdmin_Attributes struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Values     []string "json:\"values\" graphql:\"values\""
	IsRequired bool     "json:\"isRequired\" graphql:\"isRequired\""
}

func (t *ProductByAdmin_ProductByAdmin_Attributes) GetID() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Attributes{}
	}
	return t.ID
}
func (t *ProductByAdmin_ProductByAdmin_Attributes) GetName() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Attributes{}
	}
	return t.Name
}
func (t *ProductByAdmin_ProductByAdmin_Attributes) GetValues() []string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Attributes{}
	}
	return t.Values
}
func (t *ProductByAdmin_ProductByAdmin_Attributes) GetIsRequired() bool {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Attributes{}
	}
	return t.IsRequired
}

type ProductByAdmin_ProductByAdmin_Variations struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Price int     "json:\"price\" graphql:\"price\""
	Name  string  "json:\"name\" graphql:\"name\""
}

func (t *ProductByAdmin_ProductByAdmin_Variations) GetID() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Variations{}
	}
	return t.ID
}
func (t *ProductByAdmin_ProductByAdmin_Variations) GetStock() *int {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Variations{}
	}
	return t.Stock
}
func (t *ProductByAdmin_ProductByAdmin_Variations) GetSku() *string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Variations{}
	}
	return t.Sku
}
func (t *ProductByAdmin_ProductByAdmin_Variations) GetPrice() int {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Variations{}
	}
	return t.Price
}
func (t *ProductByAdmin_ProductByAdmin_Variations) GetName() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_Variations{}
	}
	return t.Name
}

type ProductByAdmin_ProductByAdmin_DigitalItems_Contents struct {
	Position       int                       "json:\"position\" graphql:\"position\""
	Title          string                    "json:\"title\" graphql:\"title\""
	ID             string                    "json:\"id\" graphql:\"id\""
	UpdatedAt      string                    "json:\"updatedAt\" graphql:\"updatedAt\""
	ContentText    *string                   "json:\"contentText,omitempty\" graphql:\"contentText\""
	ContentType    models.DigitalContentType "json:\"contentType\" graphql:\"contentType\""
	ContentURL     *string                   "json:\"contentUrl,omitempty\" graphql:\"contentUrl\""
	IsTrialAllowed bool                      "json:\"isTrialAllowed\" graphql:\"isTrialAllowed\""
}

func (t *ProductByAdmin_ProductByAdmin_DigitalItems_Contents) GetPosition() int {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems_Contents{}
	}
	return t.Position
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems_Contents) GetTitle() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems_Contents{}
	}
	return t.Title
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems_Contents) GetID() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems_Contents{}
	}
	return t.ID
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems_Contents) GetUpdatedAt() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems_Contents{}
	}
	return t.UpdatedAt
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems_Contents) GetContentText() *string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems_Contents{}
	}
	return t.ContentText
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems_Contents) GetContentType() *models.DigitalContentType {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems_Contents{}
	}
	return &t.ContentType
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems_Contents) GetContentURL() *string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems_Contents{}
	}
	return t.ContentURL
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems_Contents) GetIsTrialAllowed() bool {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems_Contents{}
	}
	return t.IsTrialAllowed
}

type ProductByAdmin_ProductByAdmin_DigitalItems struct {
	ID          string                                                 "json:\"id\" graphql:\"id\""
	Description *string                                                "json:\"description,omitempty\" graphql:\"description\""
	Title       string                                                 "json:\"title\" graphql:\"title\""
	Position    int                                                    "json:\"position\" graphql:\"position\""
	Contents    []*ProductByAdmin_ProductByAdmin_DigitalItems_Contents "json:\"contents\" graphql:\"contents\""
}

func (t *ProductByAdmin_ProductByAdmin_DigitalItems) GetID() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems{}
	}
	return t.ID
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems) GetDescription() *string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems{}
	}
	return t.Description
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems) GetTitle() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems{}
	}
	return t.Title
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems) GetPosition() int {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems{}
	}
	return t.Position
}
func (t *ProductByAdmin_ProductByAdmin_DigitalItems) GetContents() []*ProductByAdmin_ProductByAdmin_DigitalItems_Contents {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin_DigitalItems{}
	}
	return t.Contents
}

type ProductByAdmin_ProductByAdmin struct {
	ID                      string                                        "json:\"id\" graphql:\"id\""
	Name                    string                                        "json:\"name\" graphql:\"name\""
	Slug                    string                                        "json:\"slug\" graphql:\"slug\""
	Description             string                                        "json:\"description\" graphql:\"description\""
	Sku                     *string                                       "json:\"sku,omitempty\" graphql:\"sku\""
	Stock                   *int                                          "json:\"stock,omitempty\" graphql:\"stock\""
	MaxItemPerOrder         *int                                          "json:\"maxItemPerOrder,omitempty\" graphql:\"maxItemPerOrder\""
	Price                   int                                           "json:\"price\" graphql:\"price\""
	FullImages              []string                                      "json:\"fullImages\" graphql:\"fullImages\""
	IsDigitalProduct        bool                                          "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	Views                   int                                           "json:\"views\" graphql:\"views\""
	CreatedAt               string                                        "json:\"createdAt\" graphql:\"createdAt\""
	ProductUnit             *models.ProductUnit                           "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	UpdatedAt               *string                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Category                *ProductByAdmin_ProductByAdmin_Category       "json:\"category,omitempty\" graphql:\"category\""
	Attributes              []*ProductByAdmin_ProductByAdmin_Attributes   "json:\"attributes\" graphql:\"attributes\""
	Variations              []*ProductByAdmin_ProductByAdmin_Variations   "json:\"variations\" graphql:\"variations\""
	ProductSpecificDiscount int                                           "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	DigitalItems            []*ProductByAdmin_ProductByAdmin_DigitalItems "json:\"digitalItems\" graphql:\"digitalItems\""
}

func (t *ProductByAdmin_ProductByAdmin) GetID() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.ID
}
func (t *ProductByAdmin_ProductByAdmin) GetName() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Name
}
func (t *ProductByAdmin_ProductByAdmin) GetSlug() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Slug
}
func (t *ProductByAdmin_ProductByAdmin) GetDescription() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Description
}
func (t *ProductByAdmin_ProductByAdmin) GetSku() *string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Sku
}
func (t *ProductByAdmin_ProductByAdmin) GetStock() *int {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Stock
}
func (t *ProductByAdmin_ProductByAdmin) GetMaxItemPerOrder() *int {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.MaxItemPerOrder
}
func (t *ProductByAdmin_ProductByAdmin) GetPrice() int {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Price
}
func (t *ProductByAdmin_ProductByAdmin) GetFullImages() []string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.FullImages
}
func (t *ProductByAdmin_ProductByAdmin) GetIsDigitalProduct() bool {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.IsDigitalProduct
}
func (t *ProductByAdmin_ProductByAdmin) GetViews() int {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Views
}
func (t *ProductByAdmin_ProductByAdmin) GetCreatedAt() string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.CreatedAt
}
func (t *ProductByAdmin_ProductByAdmin) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.ProductUnit
}
func (t *ProductByAdmin_ProductByAdmin) GetUpdatedAt() *string {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.UpdatedAt
}
func (t *ProductByAdmin_ProductByAdmin) GetCategory() *ProductByAdmin_ProductByAdmin_Category {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Category
}
func (t *ProductByAdmin_ProductByAdmin) GetAttributes() []*ProductByAdmin_ProductByAdmin_Attributes {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Attributes
}
func (t *ProductByAdmin_ProductByAdmin) GetVariations() []*ProductByAdmin_ProductByAdmin_Variations {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.Variations
}
func (t *ProductByAdmin_ProductByAdmin) GetProductSpecificDiscount() int {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.ProductSpecificDiscount
}
func (t *ProductByAdmin_ProductByAdmin) GetDigitalItems() []*ProductByAdmin_ProductByAdmin_DigitalItems {
	if t == nil {
		t = &ProductByAdmin_ProductByAdmin{}
	}
	return t.DigitalItems
}

type ProductBySlug_ProductBySlug_Category struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Slug        string  "json:\"slug\" graphql:\"slug\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage   *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
}

func (t *ProductBySlug_ProductBySlug_Category) GetID() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Category{}
	}
	return t.ID
}
func (t *ProductBySlug_ProductBySlug_Category) GetName() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Category{}
	}
	return t.Name
}
func (t *ProductBySlug_ProductBySlug_Category) GetSlug() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Category{}
	}
	return t.Slug
}
func (t *ProductBySlug_ProductBySlug_Category) GetDescription() *string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Category{}
	}
	return t.Description
}
func (t *ProductBySlug_ProductBySlug_Category) GetFullImage() *string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Category{}
	}
	return t.FullImage
}

type ProductBySlug_ProductBySlug_Attributes struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Values     []string "json:\"values\" graphql:\"values\""
	IsRequired bool     "json:\"isRequired\" graphql:\"isRequired\""
}

func (t *ProductBySlug_ProductBySlug_Attributes) GetID() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Attributes{}
	}
	return t.ID
}
func (t *ProductBySlug_ProductBySlug_Attributes) GetName() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Attributes{}
	}
	return t.Name
}
func (t *ProductBySlug_ProductBySlug_Attributes) GetValues() []string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Attributes{}
	}
	return t.Values
}
func (t *ProductBySlug_ProductBySlug_Attributes) GetIsRequired() bool {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Attributes{}
	}
	return t.IsRequired
}

type ProductBySlug_ProductBySlug_Variations struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Price int     "json:\"price\" graphql:\"price\""
	Name  string  "json:\"name\" graphql:\"name\""
}

func (t *ProductBySlug_ProductBySlug_Variations) GetID() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Variations{}
	}
	return t.ID
}
func (t *ProductBySlug_ProductBySlug_Variations) GetStock() *int {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Variations{}
	}
	return t.Stock
}
func (t *ProductBySlug_ProductBySlug_Variations) GetSku() *string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Variations{}
	}
	return t.Sku
}
func (t *ProductBySlug_ProductBySlug_Variations) GetPrice() int {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Variations{}
	}
	return t.Price
}
func (t *ProductBySlug_ProductBySlug_Variations) GetName() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_Variations{}
	}
	return t.Name
}

type ProductBySlug_ProductBySlug_DigitalItems_Contents struct {
	Position       int                       "json:\"position\" graphql:\"position\""
	Title          string                    "json:\"title\" graphql:\"title\""
	ID             string                    "json:\"id\" graphql:\"id\""
	UpdatedAt      string                    "json:\"updatedAt\" graphql:\"updatedAt\""
	ContentText    *string                   "json:\"contentText,omitempty\" graphql:\"contentText\""
	ContentType    models.DigitalContentType "json:\"contentType\" graphql:\"contentType\""
	ContentURL     *string                   "json:\"contentUrl,omitempty\" graphql:\"contentUrl\""
	IsTrialAllowed bool                      "json:\"isTrialAllowed\" graphql:\"isTrialAllowed\""
}

func (t *ProductBySlug_ProductBySlug_DigitalItems_Contents) GetPosition() int {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems_Contents{}
	}
	return t.Position
}
func (t *ProductBySlug_ProductBySlug_DigitalItems_Contents) GetTitle() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems_Contents{}
	}
	return t.Title
}
func (t *ProductBySlug_ProductBySlug_DigitalItems_Contents) GetID() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems_Contents{}
	}
	return t.ID
}
func (t *ProductBySlug_ProductBySlug_DigitalItems_Contents) GetUpdatedAt() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems_Contents{}
	}
	return t.UpdatedAt
}
func (t *ProductBySlug_ProductBySlug_DigitalItems_Contents) GetContentText() *string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems_Contents{}
	}
	return t.ContentText
}
func (t *ProductBySlug_ProductBySlug_DigitalItems_Contents) GetContentType() *models.DigitalContentType {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems_Contents{}
	}
	return &t.ContentType
}
func (t *ProductBySlug_ProductBySlug_DigitalItems_Contents) GetContentURL() *string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems_Contents{}
	}
	return t.ContentURL
}
func (t *ProductBySlug_ProductBySlug_DigitalItems_Contents) GetIsTrialAllowed() bool {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems_Contents{}
	}
	return t.IsTrialAllowed
}

type ProductBySlug_ProductBySlug_DigitalItems struct {
	ID          string                                               "json:\"id\" graphql:\"id\""
	Description *string                                              "json:\"description,omitempty\" graphql:\"description\""
	Title       string                                               "json:\"title\" graphql:\"title\""
	Position    int                                                  "json:\"position\" graphql:\"position\""
	Contents    []*ProductBySlug_ProductBySlug_DigitalItems_Contents "json:\"contents\" graphql:\"contents\""
}

func (t *ProductBySlug_ProductBySlug_DigitalItems) GetID() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems{}
	}
	return t.ID
}
func (t *ProductBySlug_ProductBySlug_DigitalItems) GetDescription() *string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems{}
	}
	return t.Description
}
func (t *ProductBySlug_ProductBySlug_DigitalItems) GetTitle() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems{}
	}
	return t.Title
}
func (t *ProductBySlug_ProductBySlug_DigitalItems) GetPosition() int {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems{}
	}
	return t.Position
}
func (t *ProductBySlug_ProductBySlug_DigitalItems) GetContents() []*ProductBySlug_ProductBySlug_DigitalItems_Contents {
	if t == nil {
		t = &ProductBySlug_ProductBySlug_DigitalItems{}
	}
	return t.Contents
}

type ProductBySlug_ProductBySlug struct {
	ID                      string                                      "json:\"id\" graphql:\"id\""
	Name                    string                                      "json:\"name\" graphql:\"name\""
	Slug                    string                                      "json:\"slug\" graphql:\"slug\""
	Description             string                                      "json:\"description\" graphql:\"description\""
	Sku                     *string                                     "json:\"sku,omitempty\" graphql:\"sku\""
	Stock                   *int                                        "json:\"stock,omitempty\" graphql:\"stock\""
	MaxItemPerOrder         *int                                        "json:\"maxItemPerOrder,omitempty\" graphql:\"maxItemPerOrder\""
	Price                   int                                         "json:\"price\" graphql:\"price\""
	FullImages              []string                                    "json:\"fullImages\" graphql:\"fullImages\""
	IsDigitalProduct        bool                                        "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	Views                   int                                         "json:\"views\" graphql:\"views\""
	CreatedAt               string                                      "json:\"createdAt\" graphql:\"createdAt\""
	ProductUnit             *models.ProductUnit                         "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	UpdatedAt               *string                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Category                *ProductBySlug_ProductBySlug_Category       "json:\"category,omitempty\" graphql:\"category\""
	Attributes              []*ProductBySlug_ProductBySlug_Attributes   "json:\"attributes\" graphql:\"attributes\""
	Variations              []*ProductBySlug_ProductBySlug_Variations   "json:\"variations\" graphql:\"variations\""
	ProductSpecificDiscount int                                         "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	DigitalItems            []*ProductBySlug_ProductBySlug_DigitalItems "json:\"digitalItems\" graphql:\"digitalItems\""
}

func (t *ProductBySlug_ProductBySlug) GetID() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.ID
}
func (t *ProductBySlug_ProductBySlug) GetName() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Name
}
func (t *ProductBySlug_ProductBySlug) GetSlug() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Slug
}
func (t *ProductBySlug_ProductBySlug) GetDescription() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Description
}
func (t *ProductBySlug_ProductBySlug) GetSku() *string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Sku
}
func (t *ProductBySlug_ProductBySlug) GetStock() *int {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Stock
}
func (t *ProductBySlug_ProductBySlug) GetMaxItemPerOrder() *int {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.MaxItemPerOrder
}
func (t *ProductBySlug_ProductBySlug) GetPrice() int {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Price
}
func (t *ProductBySlug_ProductBySlug) GetFullImages() []string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.FullImages
}
func (t *ProductBySlug_ProductBySlug) GetIsDigitalProduct() bool {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.IsDigitalProduct
}
func (t *ProductBySlug_ProductBySlug) GetViews() int {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Views
}
func (t *ProductBySlug_ProductBySlug) GetCreatedAt() string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.CreatedAt
}
func (t *ProductBySlug_ProductBySlug) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.ProductUnit
}
func (t *ProductBySlug_ProductBySlug) GetUpdatedAt() *string {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.UpdatedAt
}
func (t *ProductBySlug_ProductBySlug) GetCategory() *ProductBySlug_ProductBySlug_Category {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Category
}
func (t *ProductBySlug_ProductBySlug) GetAttributes() []*ProductBySlug_ProductBySlug_Attributes {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Attributes
}
func (t *ProductBySlug_ProductBySlug) GetVariations() []*ProductBySlug_ProductBySlug_Variations {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.Variations
}
func (t *ProductBySlug_ProductBySlug) GetProductSpecificDiscount() int {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.ProductSpecificDiscount
}
func (t *ProductBySlug_ProductBySlug) GetDigitalItems() []*ProductBySlug_ProductBySlug_DigitalItems {
	if t == nil {
		t = &ProductBySlug_ProductBySlug{}
	}
	return t.DigitalItems
}

type ProductSearch_ProductSearch_Category struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Slug        string  "json:\"slug\" graphql:\"slug\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage   *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
}

func (t *ProductSearch_ProductSearch_Category) GetID() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Category{}
	}
	return t.ID
}
func (t *ProductSearch_ProductSearch_Category) GetName() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Category{}
	}
	return t.Name
}
func (t *ProductSearch_ProductSearch_Category) GetSlug() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Category{}
	}
	return t.Slug
}
func (t *ProductSearch_ProductSearch_Category) GetDescription() *string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Category{}
	}
	return t.Description
}
func (t *ProductSearch_ProductSearch_Category) GetFullImage() *string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Category{}
	}
	return t.FullImage
}

type ProductSearch_ProductSearch_Attributes struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Values     []string "json:\"values\" graphql:\"values\""
	IsRequired bool     "json:\"isRequired\" graphql:\"isRequired\""
}

func (t *ProductSearch_ProductSearch_Attributes) GetID() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Attributes{}
	}
	return t.ID
}
func (t *ProductSearch_ProductSearch_Attributes) GetName() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Attributes{}
	}
	return t.Name
}
func (t *ProductSearch_ProductSearch_Attributes) GetValues() []string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Attributes{}
	}
	return t.Values
}
func (t *ProductSearch_ProductSearch_Attributes) GetIsRequired() bool {
	if t == nil {
		t = &ProductSearch_ProductSearch_Attributes{}
	}
	return t.IsRequired
}

type ProductSearch_ProductSearch_Variations struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Price int     "json:\"price\" graphql:\"price\""
	Name  string  "json:\"name\" graphql:\"name\""
}

func (t *ProductSearch_ProductSearch_Variations) GetID() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Variations{}
	}
	return t.ID
}
func (t *ProductSearch_ProductSearch_Variations) GetStock() *int {
	if t == nil {
		t = &ProductSearch_ProductSearch_Variations{}
	}
	return t.Stock
}
func (t *ProductSearch_ProductSearch_Variations) GetSku() *string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Variations{}
	}
	return t.Sku
}
func (t *ProductSearch_ProductSearch_Variations) GetPrice() int {
	if t == nil {
		t = &ProductSearch_ProductSearch_Variations{}
	}
	return t.Price
}
func (t *ProductSearch_ProductSearch_Variations) GetName() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_Variations{}
	}
	return t.Name
}

type ProductSearch_ProductSearch_DigitalItems_Contents struct {
	Position       int                       "json:\"position\" graphql:\"position\""
	Title          string                    "json:\"title\" graphql:\"title\""
	ID             string                    "json:\"id\" graphql:\"id\""
	UpdatedAt      string                    "json:\"updatedAt\" graphql:\"updatedAt\""
	ContentText    *string                   "json:\"contentText,omitempty\" graphql:\"contentText\""
	ContentType    models.DigitalContentType "json:\"contentType\" graphql:\"contentType\""
	ContentURL     *string                   "json:\"contentUrl,omitempty\" graphql:\"contentUrl\""
	IsTrialAllowed bool                      "json:\"isTrialAllowed\" graphql:\"isTrialAllowed\""
}

func (t *ProductSearch_ProductSearch_DigitalItems_Contents) GetPosition() int {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems_Contents{}
	}
	return t.Position
}
func (t *ProductSearch_ProductSearch_DigitalItems_Contents) GetTitle() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems_Contents{}
	}
	return t.Title
}
func (t *ProductSearch_ProductSearch_DigitalItems_Contents) GetID() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems_Contents{}
	}
	return t.ID
}
func (t *ProductSearch_ProductSearch_DigitalItems_Contents) GetUpdatedAt() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems_Contents{}
	}
	return t.UpdatedAt
}
func (t *ProductSearch_ProductSearch_DigitalItems_Contents) GetContentText() *string {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems_Contents{}
	}
	return t.ContentText
}
func (t *ProductSearch_ProductSearch_DigitalItems_Contents) GetContentType() *models.DigitalContentType {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems_Contents{}
	}
	return &t.ContentType
}
func (t *ProductSearch_ProductSearch_DigitalItems_Contents) GetContentURL() *string {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems_Contents{}
	}
	return t.ContentURL
}
func (t *ProductSearch_ProductSearch_DigitalItems_Contents) GetIsTrialAllowed() bool {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems_Contents{}
	}
	return t.IsTrialAllowed
}

type ProductSearch_ProductSearch_DigitalItems struct {
	ID          string                                               "json:\"id\" graphql:\"id\""
	Description *string                                              "json:\"description,omitempty\" graphql:\"description\""
	Title       string                                               "json:\"title\" graphql:\"title\""
	Position    int                                                  "json:\"position\" graphql:\"position\""
	Contents    []*ProductSearch_ProductSearch_DigitalItems_Contents "json:\"contents\" graphql:\"contents\""
}

func (t *ProductSearch_ProductSearch_DigitalItems) GetID() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems{}
	}
	return t.ID
}
func (t *ProductSearch_ProductSearch_DigitalItems) GetDescription() *string {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems{}
	}
	return t.Description
}
func (t *ProductSearch_ProductSearch_DigitalItems) GetTitle() string {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems{}
	}
	return t.Title
}
func (t *ProductSearch_ProductSearch_DigitalItems) GetPosition() int {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems{}
	}
	return t.Position
}
func (t *ProductSearch_ProductSearch_DigitalItems) GetContents() []*ProductSearch_ProductSearch_DigitalItems_Contents {
	if t == nil {
		t = &ProductSearch_ProductSearch_DigitalItems{}
	}
	return t.Contents
}

type ProductSearch_ProductSearch struct {
	ID                      string                                      "json:\"id\" graphql:\"id\""
	Name                    string                                      "json:\"name\" graphql:\"name\""
	Slug                    string                                      "json:\"slug\" graphql:\"slug\""
	Description             string                                      "json:\"description\" graphql:\"description\""
	Sku                     *string                                     "json:\"sku,omitempty\" graphql:\"sku\""
	Stock                   *int                                        "json:\"stock,omitempty\" graphql:\"stock\""
	MaxItemPerOrder         *int                                        "json:\"maxItemPerOrder,omitempty\" graphql:\"maxItemPerOrder\""
	Price                   int                                         "json:\"price\" graphql:\"price\""
	FullImages              []string                                    "json:\"fullImages\" graphql:\"fullImages\""
	IsDigitalProduct        bool                                        "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	Views                   int                                         "json:\"views\" graphql:\"views\""
	CreatedAt               string                                      "json:\"createdAt\" graphql:\"createdAt\""
	ProductUnit             *models.ProductUnit                         "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	UpdatedAt               *string                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Category                *ProductSearch_ProductSearch_Category       "json:\"category,omitempty\" graphql:\"category\""
	Attributes              []*ProductSearch_ProductSearch_Attributes   "json:\"attributes\" graphql:\"attributes\""
	Variations              []*ProductSearch_ProductSearch_Variations   "json:\"variations\" graphql:\"variations\""
	ProductSpecificDiscount int                                         "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	DigitalItems            []*ProductSearch_ProductSearch_DigitalItems "json:\"digitalItems\" graphql:\"digitalItems\""
}

func (t *ProductSearch_ProductSearch) GetID() string {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.ID
}
func (t *ProductSearch_ProductSearch) GetName() string {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Name
}
func (t *ProductSearch_ProductSearch) GetSlug() string {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Slug
}
func (t *ProductSearch_ProductSearch) GetDescription() string {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Description
}
func (t *ProductSearch_ProductSearch) GetSku() *string {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Sku
}
func (t *ProductSearch_ProductSearch) GetStock() *int {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Stock
}
func (t *ProductSearch_ProductSearch) GetMaxItemPerOrder() *int {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.MaxItemPerOrder
}
func (t *ProductSearch_ProductSearch) GetPrice() int {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Price
}
func (t *ProductSearch_ProductSearch) GetFullImages() []string {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.FullImages
}
func (t *ProductSearch_ProductSearch) GetIsDigitalProduct() bool {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.IsDigitalProduct
}
func (t *ProductSearch_ProductSearch) GetViews() int {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Views
}
func (t *ProductSearch_ProductSearch) GetCreatedAt() string {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.CreatedAt
}
func (t *ProductSearch_ProductSearch) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.ProductUnit
}
func (t *ProductSearch_ProductSearch) GetUpdatedAt() *string {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.UpdatedAt
}
func (t *ProductSearch_ProductSearch) GetCategory() *ProductSearch_ProductSearch_Category {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Category
}
func (t *ProductSearch_ProductSearch) GetAttributes() []*ProductSearch_ProductSearch_Attributes {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Attributes
}
func (t *ProductSearch_ProductSearch) GetVariations() []*ProductSearch_ProductSearch_Variations {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.Variations
}
func (t *ProductSearch_ProductSearch) GetProductSpecificDiscount() int {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.ProductSpecificDiscount
}
func (t *ProductSearch_ProductSearch) GetDigitalItems() []*ProductSearch_ProductSearch_DigitalItems {
	if t == nil {
		t = &ProductSearch_ProductSearch{}
	}
	return t.DigitalItems
}

type ProductSearchByAdmin_ProductSearchByAdmin_Category struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Slug        string  "json:\"slug\" graphql:\"slug\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage   *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
}

func (t *ProductSearchByAdmin_ProductSearchByAdmin_Category) GetID() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Category{}
	}
	return t.ID
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Category) GetName() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Category{}
	}
	return t.Name
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Category) GetSlug() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Category{}
	}
	return t.Slug
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Category) GetDescription() *string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Category{}
	}
	return t.Description
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Category) GetFullImage() *string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Category{}
	}
	return t.FullImage
}

type ProductSearchByAdmin_ProductSearchByAdmin_Attributes struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Values     []string "json:\"values\" graphql:\"values\""
	IsRequired bool     "json:\"isRequired\" graphql:\"isRequired\""
}

func (t *ProductSearchByAdmin_ProductSearchByAdmin_Attributes) GetID() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Attributes{}
	}
	return t.ID
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Attributes) GetName() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Attributes{}
	}
	return t.Name
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Attributes) GetValues() []string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Attributes{}
	}
	return t.Values
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Attributes) GetIsRequired() bool {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Attributes{}
	}
	return t.IsRequired
}

type ProductSearchByAdmin_ProductSearchByAdmin_Variations struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Price int     "json:\"price\" graphql:\"price\""
	Name  string  "json:\"name\" graphql:\"name\""
}

func (t *ProductSearchByAdmin_ProductSearchByAdmin_Variations) GetID() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Variations{}
	}
	return t.ID
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Variations) GetStock() *int {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Variations{}
	}
	return t.Stock
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Variations) GetSku() *string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Variations{}
	}
	return t.Sku
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Variations) GetPrice() int {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Variations{}
	}
	return t.Price
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_Variations) GetName() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_Variations{}
	}
	return t.Name
}

type ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents struct {
	Position       int                       "json:\"position\" graphql:\"position\""
	Title          string                    "json:\"title\" graphql:\"title\""
	ID             string                    "json:\"id\" graphql:\"id\""
	UpdatedAt      string                    "json:\"updatedAt\" graphql:\"updatedAt\""
	ContentText    *string                   "json:\"contentText,omitempty\" graphql:\"contentText\""
	ContentType    models.DigitalContentType "json:\"contentType\" graphql:\"contentType\""
	ContentURL     *string                   "json:\"contentUrl,omitempty\" graphql:\"contentUrl\""
	IsTrialAllowed bool                      "json:\"isTrialAllowed\" graphql:\"isTrialAllowed\""
}

func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents) GetPosition() int {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents{}
	}
	return t.Position
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents) GetTitle() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents{}
	}
	return t.Title
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents) GetID() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents{}
	}
	return t.ID
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents) GetUpdatedAt() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents{}
	}
	return t.UpdatedAt
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents) GetContentText() *string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents{}
	}
	return t.ContentText
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents) GetContentType() *models.DigitalContentType {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents{}
	}
	return &t.ContentType
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents) GetContentURL() *string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents{}
	}
	return t.ContentURL
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents) GetIsTrialAllowed() bool {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents{}
	}
	return t.IsTrialAllowed
}

type ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems struct {
	ID          string                                                             "json:\"id\" graphql:\"id\""
	Description *string                                                            "json:\"description,omitempty\" graphql:\"description\""
	Title       string                                                             "json:\"title\" graphql:\"title\""
	Position    int                                                                "json:\"position\" graphql:\"position\""
	Contents    []*ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents "json:\"contents\" graphql:\"contents\""
}

func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems) GetID() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems{}
	}
	return t.ID
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems) GetDescription() *string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems{}
	}
	return t.Description
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems) GetTitle() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems{}
	}
	return t.Title
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems) GetPosition() int {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems{}
	}
	return t.Position
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems) GetContents() []*ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems_Contents {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems{}
	}
	return t.Contents
}

type ProductSearchByAdmin_ProductSearchByAdmin struct {
	ID                      string                                                    "json:\"id\" graphql:\"id\""
	Name                    string                                                    "json:\"name\" graphql:\"name\""
	Slug                    string                                                    "json:\"slug\" graphql:\"slug\""
	Description             string                                                    "json:\"description\" graphql:\"description\""
	Sku                     *string                                                   "json:\"sku,omitempty\" graphql:\"sku\""
	Stock                   *int                                                      "json:\"stock,omitempty\" graphql:\"stock\""
	MaxItemPerOrder         *int                                                      "json:\"maxItemPerOrder,omitempty\" graphql:\"maxItemPerOrder\""
	Price                   int                                                       "json:\"price\" graphql:\"price\""
	FullImages              []string                                                  "json:\"fullImages\" graphql:\"fullImages\""
	IsDigitalProduct        bool                                                      "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	Views                   int                                                       "json:\"views\" graphql:\"views\""
	CreatedAt               string                                                    "json:\"createdAt\" graphql:\"createdAt\""
	ProductUnit             *models.ProductUnit                                       "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	UpdatedAt               *string                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Category                *ProductSearchByAdmin_ProductSearchByAdmin_Category       "json:\"category,omitempty\" graphql:\"category\""
	Attributes              []*ProductSearchByAdmin_ProductSearchByAdmin_Attributes   "json:\"attributes\" graphql:\"attributes\""
	Variations              []*ProductSearchByAdmin_ProductSearchByAdmin_Variations   "json:\"variations\" graphql:\"variations\""
	ProductSpecificDiscount int                                                       "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	DigitalItems            []*ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems "json:\"digitalItems\" graphql:\"digitalItems\""
}

func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetID() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.ID
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetName() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Name
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetSlug() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Slug
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetDescription() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Description
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetSku() *string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Sku
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetStock() *int {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Stock
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetMaxItemPerOrder() *int {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.MaxItemPerOrder
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetPrice() int {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Price
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetFullImages() []string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.FullImages
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetIsDigitalProduct() bool {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.IsDigitalProduct
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetViews() int {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Views
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetCreatedAt() string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.CreatedAt
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.ProductUnit
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetUpdatedAt() *string {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.UpdatedAt
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetCategory() *ProductSearchByAdmin_ProductSearchByAdmin_Category {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Category
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetAttributes() []*ProductSearchByAdmin_ProductSearchByAdmin_Attributes {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Attributes
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetVariations() []*ProductSearchByAdmin_ProductSearchByAdmin_Variations {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.Variations
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetProductSpecificDiscount() int {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.ProductSpecificDiscount
}
func (t *ProductSearchByAdmin_ProductSearchByAdmin) GetDigitalItems() []*ProductSearchByAdmin_ProductSearchByAdmin_DigitalItems {
	if t == nil {
		t = &ProductSearchByAdmin_ProductSearchByAdmin{}
	}
	return t.DigitalItems
}

type Products_Products_Category struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Slug        string  "json:\"slug\" graphql:\"slug\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage   *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
}

func (t *Products_Products_Category) GetID() string {
	if t == nil {
		t = &Products_Products_Category{}
	}
	return t.ID
}
func (t *Products_Products_Category) GetName() string {
	if t == nil {
		t = &Products_Products_Category{}
	}
	return t.Name
}
func (t *Products_Products_Category) GetSlug() string {
	if t == nil {
		t = &Products_Products_Category{}
	}
	return t.Slug
}
func (t *Products_Products_Category) GetDescription() *string {
	if t == nil {
		t = &Products_Products_Category{}
	}
	return t.Description
}
func (t *Products_Products_Category) GetFullImage() *string {
	if t == nil {
		t = &Products_Products_Category{}
	}
	return t.FullImage
}

type Products_Products_Attributes struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Values     []string "json:\"values\" graphql:\"values\""
	IsRequired bool     "json:\"isRequired\" graphql:\"isRequired\""
}

func (t *Products_Products_Attributes) GetID() string {
	if t == nil {
		t = &Products_Products_Attributes{}
	}
	return t.ID
}
func (t *Products_Products_Attributes) GetName() string {
	if t == nil {
		t = &Products_Products_Attributes{}
	}
	return t.Name
}
func (t *Products_Products_Attributes) GetValues() []string {
	if t == nil {
		t = &Products_Products_Attributes{}
	}
	return t.Values
}
func (t *Products_Products_Attributes) GetIsRequired() bool {
	if t == nil {
		t = &Products_Products_Attributes{}
	}
	return t.IsRequired
}

type Products_Products_Variations struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Price int     "json:\"price\" graphql:\"price\""
	Name  string  "json:\"name\" graphql:\"name\""
}

func (t *Products_Products_Variations) GetID() string {
	if t == nil {
		t = &Products_Products_Variations{}
	}
	return t.ID
}
func (t *Products_Products_Variations) GetStock() *int {
	if t == nil {
		t = &Products_Products_Variations{}
	}
	return t.Stock
}
func (t *Products_Products_Variations) GetSku() *string {
	if t == nil {
		t = &Products_Products_Variations{}
	}
	return t.Sku
}
func (t *Products_Products_Variations) GetPrice() int {
	if t == nil {
		t = &Products_Products_Variations{}
	}
	return t.Price
}
func (t *Products_Products_Variations) GetName() string {
	if t == nil {
		t = &Products_Products_Variations{}
	}
	return t.Name
}

type Products_Products_DigitalItems_Contents struct {
	Position       int                       "json:\"position\" graphql:\"position\""
	Title          string                    "json:\"title\" graphql:\"title\""
	ID             string                    "json:\"id\" graphql:\"id\""
	UpdatedAt      string                    "json:\"updatedAt\" graphql:\"updatedAt\""
	ContentText    *string                   "json:\"contentText,omitempty\" graphql:\"contentText\""
	ContentType    models.DigitalContentType "json:\"contentType\" graphql:\"contentType\""
	ContentURL     *string                   "json:\"contentUrl,omitempty\" graphql:\"contentUrl\""
	IsTrialAllowed bool                      "json:\"isTrialAllowed\" graphql:\"isTrialAllowed\""
}

func (t *Products_Products_DigitalItems_Contents) GetPosition() int {
	if t == nil {
		t = &Products_Products_DigitalItems_Contents{}
	}
	return t.Position
}
func (t *Products_Products_DigitalItems_Contents) GetTitle() string {
	if t == nil {
		t = &Products_Products_DigitalItems_Contents{}
	}
	return t.Title
}
func (t *Products_Products_DigitalItems_Contents) GetID() string {
	if t == nil {
		t = &Products_Products_DigitalItems_Contents{}
	}
	return t.ID
}
func (t *Products_Products_DigitalItems_Contents) GetUpdatedAt() string {
	if t == nil {
		t = &Products_Products_DigitalItems_Contents{}
	}
	return t.UpdatedAt
}
func (t *Products_Products_DigitalItems_Contents) GetContentText() *string {
	if t == nil {
		t = &Products_Products_DigitalItems_Contents{}
	}
	return t.ContentText
}
func (t *Products_Products_DigitalItems_Contents) GetContentType() *models.DigitalContentType {
	if t == nil {
		t = &Products_Products_DigitalItems_Contents{}
	}
	return &t.ContentType
}
func (t *Products_Products_DigitalItems_Contents) GetContentURL() *string {
	if t == nil {
		t = &Products_Products_DigitalItems_Contents{}
	}
	return t.ContentURL
}
func (t *Products_Products_DigitalItems_Contents) GetIsTrialAllowed() bool {
	if t == nil {
		t = &Products_Products_DigitalItems_Contents{}
	}
	return t.IsTrialAllowed
}

type Products_Products_DigitalItems struct {
	ID          string                                     "json:\"id\" graphql:\"id\""
	Description *string                                    "json:\"description,omitempty\" graphql:\"description\""
	Title       string                                     "json:\"title\" graphql:\"title\""
	Position    int                                        "json:\"position\" graphql:\"position\""
	Contents    []*Products_Products_DigitalItems_Contents "json:\"contents\" graphql:\"contents\""
}

func (t *Products_Products_DigitalItems) GetID() string {
	if t == nil {
		t = &Products_Products_DigitalItems{}
	}
	return t.ID
}
func (t *Products_Products_DigitalItems) GetDescription() *string {
	if t == nil {
		t = &Products_Products_DigitalItems{}
	}
	return t.Description
}
func (t *Products_Products_DigitalItems) GetTitle() string {
	if t == nil {
		t = &Products_Products_DigitalItems{}
	}
	return t.Title
}
func (t *Products_Products_DigitalItems) GetPosition() int {
	if t == nil {
		t = &Products_Products_DigitalItems{}
	}
	return t.Position
}
func (t *Products_Products_DigitalItems) GetContents() []*Products_Products_DigitalItems_Contents {
	if t == nil {
		t = &Products_Products_DigitalItems{}
	}
	return t.Contents
}

type Products_Products struct {
	ID                      string                            "json:\"id\" graphql:\"id\""
	Name                    string                            "json:\"name\" graphql:\"name\""
	Slug                    string                            "json:\"slug\" graphql:\"slug\""
	Description             string                            "json:\"description\" graphql:\"description\""
	Sku                     *string                           "json:\"sku,omitempty\" graphql:\"sku\""
	Stock                   *int                              "json:\"stock,omitempty\" graphql:\"stock\""
	MaxItemPerOrder         *int                              "json:\"maxItemPerOrder,omitempty\" graphql:\"maxItemPerOrder\""
	Price                   int                               "json:\"price\" graphql:\"price\""
	FullImages              []string                          "json:\"fullImages\" graphql:\"fullImages\""
	IsDigitalProduct        bool                              "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	Views                   int                               "json:\"views\" graphql:\"views\""
	CreatedAt               string                            "json:\"createdAt\" graphql:\"createdAt\""
	ProductUnit             *models.ProductUnit               "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	UpdatedAt               *string                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Category                *Products_Products_Category       "json:\"category,omitempty\" graphql:\"category\""
	Attributes              []*Products_Products_Attributes   "json:\"attributes\" graphql:\"attributes\""
	Variations              []*Products_Products_Variations   "json:\"variations\" graphql:\"variations\""
	ProductSpecificDiscount int                               "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	DigitalItems            []*Products_Products_DigitalItems "json:\"digitalItems\" graphql:\"digitalItems\""
}

func (t *Products_Products) GetID() string {
	if t == nil {
		t = &Products_Products{}
	}
	return t.ID
}
func (t *Products_Products) GetName() string {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Name
}
func (t *Products_Products) GetSlug() string {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Slug
}
func (t *Products_Products) GetDescription() string {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Description
}
func (t *Products_Products) GetSku() *string {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Sku
}
func (t *Products_Products) GetStock() *int {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Stock
}
func (t *Products_Products) GetMaxItemPerOrder() *int {
	if t == nil {
		t = &Products_Products{}
	}
	return t.MaxItemPerOrder
}
func (t *Products_Products) GetPrice() int {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Price
}
func (t *Products_Products) GetFullImages() []string {
	if t == nil {
		t = &Products_Products{}
	}
	return t.FullImages
}
func (t *Products_Products) GetIsDigitalProduct() bool {
	if t == nil {
		t = &Products_Products{}
	}
	return t.IsDigitalProduct
}
func (t *Products_Products) GetViews() int {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Views
}
func (t *Products_Products) GetCreatedAt() string {
	if t == nil {
		t = &Products_Products{}
	}
	return t.CreatedAt
}
func (t *Products_Products) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &Products_Products{}
	}
	return t.ProductUnit
}
func (t *Products_Products) GetUpdatedAt() *string {
	if t == nil {
		t = &Products_Products{}
	}
	return t.UpdatedAt
}
func (t *Products_Products) GetCategory() *Products_Products_Category {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Category
}
func (t *Products_Products) GetAttributes() []*Products_Products_Attributes {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Attributes
}
func (t *Products_Products) GetVariations() []*Products_Products_Variations {
	if t == nil {
		t = &Products_Products{}
	}
	return t.Variations
}
func (t *Products_Products) GetProductSpecificDiscount() int {
	if t == nil {
		t = &Products_Products{}
	}
	return t.ProductSpecificDiscount
}
func (t *Products_Products) GetDigitalItems() []*Products_Products_DigitalItems {
	if t == nil {
		t = &Products_Products{}
	}
	return t.DigitalItems
}

type ProductsByAdmin_ProductsByAdmin_Category struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	Slug        string  "json:\"slug\" graphql:\"slug\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	FullImage   *string "json:\"fullImage,omitempty\" graphql:\"fullImage\""
}

func (t *ProductsByAdmin_ProductsByAdmin_Category) GetID() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Category{}
	}
	return t.ID
}
func (t *ProductsByAdmin_ProductsByAdmin_Category) GetName() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Category{}
	}
	return t.Name
}
func (t *ProductsByAdmin_ProductsByAdmin_Category) GetSlug() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Category{}
	}
	return t.Slug
}
func (t *ProductsByAdmin_ProductsByAdmin_Category) GetDescription() *string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Category{}
	}
	return t.Description
}
func (t *ProductsByAdmin_ProductsByAdmin_Category) GetFullImage() *string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Category{}
	}
	return t.FullImage
}

type ProductsByAdmin_ProductsByAdmin_Attributes struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Values     []string "json:\"values\" graphql:\"values\""
	IsRequired bool     "json:\"isRequired\" graphql:\"isRequired\""
}

func (t *ProductsByAdmin_ProductsByAdmin_Attributes) GetID() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Attributes{}
	}
	return t.ID
}
func (t *ProductsByAdmin_ProductsByAdmin_Attributes) GetName() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Attributes{}
	}
	return t.Name
}
func (t *ProductsByAdmin_ProductsByAdmin_Attributes) GetValues() []string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Attributes{}
	}
	return t.Values
}
func (t *ProductsByAdmin_ProductsByAdmin_Attributes) GetIsRequired() bool {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Attributes{}
	}
	return t.IsRequired
}

type ProductsByAdmin_ProductsByAdmin_Variations struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Price int     "json:\"price\" graphql:\"price\""
	Name  string  "json:\"name\" graphql:\"name\""
}

func (t *ProductsByAdmin_ProductsByAdmin_Variations) GetID() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Variations{}
	}
	return t.ID
}
func (t *ProductsByAdmin_ProductsByAdmin_Variations) GetStock() *int {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Variations{}
	}
	return t.Stock
}
func (t *ProductsByAdmin_ProductsByAdmin_Variations) GetSku() *string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Variations{}
	}
	return t.Sku
}
func (t *ProductsByAdmin_ProductsByAdmin_Variations) GetPrice() int {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Variations{}
	}
	return t.Price
}
func (t *ProductsByAdmin_ProductsByAdmin_Variations) GetName() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_Variations{}
	}
	return t.Name
}

type ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents struct {
	Position       int                       "json:\"position\" graphql:\"position\""
	Title          string                    "json:\"title\" graphql:\"title\""
	ID             string                    "json:\"id\" graphql:\"id\""
	UpdatedAt      string                    "json:\"updatedAt\" graphql:\"updatedAt\""
	ContentText    *string                   "json:\"contentText,omitempty\" graphql:\"contentText\""
	ContentType    models.DigitalContentType "json:\"contentType\" graphql:\"contentType\""
	ContentURL     *string                   "json:\"contentUrl,omitempty\" graphql:\"contentUrl\""
	IsTrialAllowed bool                      "json:\"isTrialAllowed\" graphql:\"isTrialAllowed\""
}

func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents) GetPosition() int {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents{}
	}
	return t.Position
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents) GetTitle() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents{}
	}
	return t.Title
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents) GetID() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents{}
	}
	return t.ID
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents) GetUpdatedAt() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents{}
	}
	return t.UpdatedAt
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents) GetContentText() *string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents{}
	}
	return t.ContentText
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents) GetContentType() *models.DigitalContentType {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents{}
	}
	return &t.ContentType
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents) GetContentURL() *string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents{}
	}
	return t.ContentURL
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents) GetIsTrialAllowed() bool {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents{}
	}
	return t.IsTrialAllowed
}

type ProductsByAdmin_ProductsByAdmin_DigitalItems struct {
	ID          string                                                   "json:\"id\" graphql:\"id\""
	Description *string                                                  "json:\"description,omitempty\" graphql:\"description\""
	Title       string                                                   "json:\"title\" graphql:\"title\""
	Position    int                                                      "json:\"position\" graphql:\"position\""
	Contents    []*ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents "json:\"contents\" graphql:\"contents\""
}

func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems) GetID() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems{}
	}
	return t.ID
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems) GetDescription() *string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems{}
	}
	return t.Description
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems) GetTitle() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems{}
	}
	return t.Title
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems) GetPosition() int {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems{}
	}
	return t.Position
}
func (t *ProductsByAdmin_ProductsByAdmin_DigitalItems) GetContents() []*ProductsByAdmin_ProductsByAdmin_DigitalItems_Contents {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin_DigitalItems{}
	}
	return t.Contents
}

type ProductsByAdmin_ProductsByAdmin struct {
	ID                      string                                          "json:\"id\" graphql:\"id\""
	Name                    string                                          "json:\"name\" graphql:\"name\""
	Slug                    string                                          "json:\"slug\" graphql:\"slug\""
	Description             string                                          "json:\"description\" graphql:\"description\""
	Sku                     *string                                         "json:\"sku,omitempty\" graphql:\"sku\""
	Stock                   *int                                            "json:\"stock,omitempty\" graphql:\"stock\""
	MaxItemPerOrder         *int                                            "json:\"maxItemPerOrder,omitempty\" graphql:\"maxItemPerOrder\""
	Price                   int                                             "json:\"price\" graphql:\"price\""
	FullImages              []string                                        "json:\"fullImages\" graphql:\"fullImages\""
	IsDigitalProduct        bool                                            "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	Views                   int                                             "json:\"views\" graphql:\"views\""
	CreatedAt               string                                          "json:\"createdAt\" graphql:\"createdAt\""
	ProductUnit             *models.ProductUnit                             "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	UpdatedAt               *string                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Category                *ProductsByAdmin_ProductsByAdmin_Category       "json:\"category,omitempty\" graphql:\"category\""
	Attributes              []*ProductsByAdmin_ProductsByAdmin_Attributes   "json:\"attributes\" graphql:\"attributes\""
	Variations              []*ProductsByAdmin_ProductsByAdmin_Variations   "json:\"variations\" graphql:\"variations\""
	ProductSpecificDiscount int                                             "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	DigitalItems            []*ProductsByAdmin_ProductsByAdmin_DigitalItems "json:\"digitalItems\" graphql:\"digitalItems\""
}

func (t *ProductsByAdmin_ProductsByAdmin) GetID() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.ID
}
func (t *ProductsByAdmin_ProductsByAdmin) GetName() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Name
}
func (t *ProductsByAdmin_ProductsByAdmin) GetSlug() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Slug
}
func (t *ProductsByAdmin_ProductsByAdmin) GetDescription() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Description
}
func (t *ProductsByAdmin_ProductsByAdmin) GetSku() *string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Sku
}
func (t *ProductsByAdmin_ProductsByAdmin) GetStock() *int {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Stock
}
func (t *ProductsByAdmin_ProductsByAdmin) GetMaxItemPerOrder() *int {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.MaxItemPerOrder
}
func (t *ProductsByAdmin_ProductsByAdmin) GetPrice() int {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Price
}
func (t *ProductsByAdmin_ProductsByAdmin) GetFullImages() []string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.FullImages
}
func (t *ProductsByAdmin_ProductsByAdmin) GetIsDigitalProduct() bool {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.IsDigitalProduct
}
func (t *ProductsByAdmin_ProductsByAdmin) GetViews() int {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Views
}
func (t *ProductsByAdmin_ProductsByAdmin) GetCreatedAt() string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.CreatedAt
}
func (t *ProductsByAdmin_ProductsByAdmin) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.ProductUnit
}
func (t *ProductsByAdmin_ProductsByAdmin) GetUpdatedAt() *string {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.UpdatedAt
}
func (t *ProductsByAdmin_ProductsByAdmin) GetCategory() *ProductsByAdmin_ProductsByAdmin_Category {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Category
}
func (t *ProductsByAdmin_ProductsByAdmin) GetAttributes() []*ProductsByAdmin_ProductsByAdmin_Attributes {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Attributes
}
func (t *ProductsByAdmin_ProductsByAdmin) GetVariations() []*ProductsByAdmin_ProductsByAdmin_Variations {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.Variations
}
func (t *ProductsByAdmin_ProductsByAdmin) GetProductSpecificDiscount() int {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.ProductSpecificDiscount
}
func (t *ProductsByAdmin_ProductsByAdmin) GetDigitalItems() []*ProductsByAdmin_ProductsByAdmin_DigitalItems {
	if t == nil {
		t = &ProductsByAdmin_ProductsByAdmin{}
	}
	return t.DigitalItems
}

type ShippingMethods_ShippingMethods struct {
	ID                 string            "json:\"id\" graphql:\"id\""
	DisplayName        string            "json:\"displayName\" graphql:\"displayName\""
	DeliveryCharge     int               "json:\"deliveryCharge\" graphql:\"deliveryCharge\""
	DeliveryTimeInDays int               "json:\"deliveryTimeInDays\" graphql:\"deliveryTimeInDays\""
	WeightUnit         models.WeightUnit "json:\"WeightUnit\" graphql:\"WeightUnit\""
	IsFlat             bool              "json:\"isFlat\" graphql:\"isFlat\""
	IsActive           bool              "json:\"isActive\" graphql:\"isActive\""
}

func (t *ShippingMethods_ShippingMethods) GetID() string {
	if t == nil {
		t = &ShippingMethods_ShippingMethods{}
	}
	return t.ID
}
func (t *ShippingMethods_ShippingMethods) GetDisplayName() string {
	if t == nil {
		t = &ShippingMethods_ShippingMethods{}
	}
	return t.DisplayName
}
func (t *ShippingMethods_ShippingMethods) GetDeliveryCharge() int {
	if t == nil {
		t = &ShippingMethods_ShippingMethods{}
	}
	return t.DeliveryCharge
}
func (t *ShippingMethods_ShippingMethods) GetDeliveryTimeInDays() int {
	if t == nil {
		t = &ShippingMethods_ShippingMethods{}
	}
	return t.DeliveryTimeInDays
}
func (t *ShippingMethods_ShippingMethods) GetWeightUnit() *models.WeightUnit {
	if t == nil {
		t = &ShippingMethods_ShippingMethods{}
	}
	return &t.WeightUnit
}
func (t *ShippingMethods_ShippingMethods) GetIsFlat() bool {
	if t == nil {
		t = &ShippingMethods_ShippingMethods{}
	}
	return t.IsFlat
}
func (t *ShippingMethods_ShippingMethods) GetIsActive() bool {
	if t == nil {
		t = &ShippingMethods_ShippingMethods{}
	}
	return t.IsActive
}

type StoreBySecret_StoreBySecret_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *StoreBySecret_StoreBySecret_Location) GetID() string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret_Location{}
	}
	return t.ID
}
func (t *StoreBySecret_StoreBySecret_Location) GetName() string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret_Location{}
	}
	return t.Name
}
func (t *StoreBySecret_StoreBySecret_Location) GetShortCode() string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret_Location{}
	}
	return t.ShortCode
}

type StoreBySecret_StoreBySecret struct {
	Name             string                                "json:\"name\" graphql:\"name\""
	Title            *string                               "json:\"title,omitempty\" graphql:\"title\""
	LinklyThemeColor *string                               "json:\"linklyThemeColor,omitempty\" graphql:\"linklyThemeColor\""
	Description      *string                               "json:\"description,omitempty\" graphql:\"description\""
	Tags             []string                              "json:\"tags,omitempty\" graphql:\"tags\""
	MetaName         *string                               "json:\"metaName,omitempty\" graphql:\"metaName\""
	MetaDescription  *string                               "json:\"metaDescription,omitempty\" graphql:\"metaDescription\""
	MetaTags         []string                              "json:\"metaTags,omitempty\" graphql:\"metaTags\""
	Logo             *string                               "json:\"logo,omitempty\" graphql:\"logo\""
	LogoPath         *string                               "json:\"logoPath,omitempty\" graphql:\"logoPath\""
	Favicon          *string                               "json:\"favicon,omitempty\" graphql:\"favicon\""
	FaviconPath      *string                               "json:\"faviconPath,omitempty\" graphql:\"faviconPath\""
	BannerImage      *string                               "json:\"bannerImage,omitempty\" graphql:\"bannerImage\""
	BannerImagePath  *string                               "json:\"bannerImagePath,omitempty\" graphql:\"bannerImagePath\""
	IsOpen           bool                                  "json:\"isOpen\" graphql:\"isOpen\""
	Currency         models.Currency                       "json:\"currency\" graphql:\"currency\""
	Website          *string                               "json:\"website,omitempty\" graphql:\"website\""
	SupportEmail     *string                               "json:\"supportEmail,omitempty\" graphql:\"supportEmail\""
	SupportPhone     *string                               "json:\"supportPhone,omitempty\" graphql:\"supportPhone\""
	CreatedAt        string                                "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt        *string                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Street           *string                               "json:\"street,omitempty\" graphql:\"street\""
	StreetOptional   *string                               "json:\"streetOptional,omitempty\" graphql:\"streetOptional\""
	City             *string                               "json:\"city,omitempty\" graphql:\"city\""
	State            *string                               "json:\"state,omitempty\" graphql:\"state\""
	Postcode         *string                               "json:\"postcode,omitempty\" graphql:\"postcode\""
	Location         *StoreBySecret_StoreBySecret_Location "json:\"location,omitempty\" graphql:\"location\""
}

func (t *StoreBySecret_StoreBySecret) GetName() string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Name
}
func (t *StoreBySecret_StoreBySecret) GetTitle() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Title
}
func (t *StoreBySecret_StoreBySecret) GetLinklyThemeColor() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.LinklyThemeColor
}
func (t *StoreBySecret_StoreBySecret) GetDescription() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Description
}
func (t *StoreBySecret_StoreBySecret) GetTags() []string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Tags
}
func (t *StoreBySecret_StoreBySecret) GetMetaName() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.MetaName
}
func (t *StoreBySecret_StoreBySecret) GetMetaDescription() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.MetaDescription
}
func (t *StoreBySecret_StoreBySecret) GetMetaTags() []string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.MetaTags
}
func (t *StoreBySecret_StoreBySecret) GetLogo() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Logo
}
func (t *StoreBySecret_StoreBySecret) GetLogoPath() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.LogoPath
}
func (t *StoreBySecret_StoreBySecret) GetFavicon() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Favicon
}
func (t *StoreBySecret_StoreBySecret) GetFaviconPath() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.FaviconPath
}
func (t *StoreBySecret_StoreBySecret) GetBannerImage() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.BannerImage
}
func (t *StoreBySecret_StoreBySecret) GetBannerImagePath() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.BannerImagePath
}
func (t *StoreBySecret_StoreBySecret) GetIsOpen() bool {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.IsOpen
}
func (t *StoreBySecret_StoreBySecret) GetCurrency() *models.Currency {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return &t.Currency
}
func (t *StoreBySecret_StoreBySecret) GetWebsite() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Website
}
func (t *StoreBySecret_StoreBySecret) GetSupportEmail() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.SupportEmail
}
func (t *StoreBySecret_StoreBySecret) GetSupportPhone() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.SupportPhone
}
func (t *StoreBySecret_StoreBySecret) GetCreatedAt() string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.CreatedAt
}
func (t *StoreBySecret_StoreBySecret) GetUpdatedAt() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.UpdatedAt
}
func (t *StoreBySecret_StoreBySecret) GetStreet() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Street
}
func (t *StoreBySecret_StoreBySecret) GetStreetOptional() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.StreetOptional
}
func (t *StoreBySecret_StoreBySecret) GetCity() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.City
}
func (t *StoreBySecret_StoreBySecret) GetState() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.State
}
func (t *StoreBySecret_StoreBySecret) GetPostcode() *string {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Postcode
}
func (t *StoreBySecret_StoreBySecret) GetLocation() *StoreBySecret_StoreBySecret_Location {
	if t == nil {
		t = &StoreBySecret_StoreBySecret{}
	}
	return t.Location
}

type OrderGuestCheckout_OrderGuestCheckout_BillingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress_Location) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress_Location{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress_Location) GetName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress_Location{}
	}
	return t.Name
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress_Location{}
	}
	return t.ShortCode
}

type OrderGuestCheckout_OrderGuestCheckout_BillingAddress struct {
	ID        string                                                        "json:\"id\" graphql:\"id\""
	Street    string                                                        "json:\"street\" graphql:\"street\""
	StreetTwo *string                                                       "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                                        "json:\"city\" graphql:\"city\""
	State     *string                                                       "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                                        "json:\"postcode\" graphql:\"postcode\""
	Email     *string                                                       "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                                                       "json:\"phone,omitempty\" graphql:\"phone\""
	Location  OrderGuestCheckout_OrderGuestCheckout_BillingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress) GetStreet() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress{}
	}
	return t.Street
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress{}
	}
	return t.StreetTwo
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress) GetCity() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress{}
	}
	return t.City
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress) GetState() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress{}
	}
	return t.State
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress) GetPostcode() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress{}
	}
	return t.Postcode
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress) GetEmail() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress{}
	}
	return t.Email
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress) GetPhone() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress{}
	}
	return t.Phone
}
func (t *OrderGuestCheckout_OrderGuestCheckout_BillingAddress) GetLocation() *OrderGuestCheckout_OrderGuestCheckout_BillingAddress_Location {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_BillingAddress{}
	}
	return &t.Location
}

type OrderGuestCheckout_OrderGuestCheckout_ShippingAddress_Location struct {
	ID        string "json:\"id\" graphql:\"id\""
	Name      string "json:\"name\" graphql:\"name\""
	ShortCode string "json:\"shortCode\" graphql:\"shortCode\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress_Location) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress_Location{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress_Location) GetName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress_Location{}
	}
	return t.Name
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress_Location) GetShortCode() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress_Location{}
	}
	return t.ShortCode
}

type OrderGuestCheckout_OrderGuestCheckout_ShippingAddress struct {
	ID        string                                                         "json:\"id\" graphql:\"id\""
	Street    string                                                         "json:\"street\" graphql:\"street\""
	StreetTwo *string                                                        "json:\"streetTwo,omitempty\" graphql:\"streetTwo\""
	City      string                                                         "json:\"city\" graphql:\"city\""
	State     *string                                                        "json:\"state,omitempty\" graphql:\"state\""
	Postcode  string                                                         "json:\"postcode\" graphql:\"postcode\""
	Email     *string                                                        "json:\"email,omitempty\" graphql:\"email\""
	Phone     *string                                                        "json:\"phone,omitempty\" graphql:\"phone\""
	Location  OrderGuestCheckout_OrderGuestCheckout_ShippingAddress_Location "json:\"location\" graphql:\"location\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress) GetStreet() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress{}
	}
	return t.Street
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress) GetStreetTwo() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress{}
	}
	return t.StreetTwo
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress) GetCity() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress{}
	}
	return t.City
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress) GetState() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress{}
	}
	return t.State
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress) GetPostcode() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress{}
	}
	return t.Postcode
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress) GetEmail() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress{}
	}
	return t.Email
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress) GetPhone() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress{}
	}
	return t.Phone
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress) GetLocation() *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress_Location {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingAddress{}
	}
	return &t.Location
}

type OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Slug       string   "json:\"slug\" graphql:\"slug\""
	FullImages []string "json:\"fullImages\" graphql:\"fullImages\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product) GetName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product{}
	}
	return t.Name
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product{}
	}
	return t.Slug
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product) GetFullImages() []string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product{}
	}
	return t.FullImages
}

type OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Attributes{}
	}
	return t.Name
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation) GetName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation{}
	}
	return t.Name
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation{}
	}
	return t.Price
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation{}
	}
	return t.Sku
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation{}
	}
	return t.Stock
}

type OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems struct {
	ID            int                                                                "json:\"id\" graphql:\"id\""
	Product       OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product       "json:\"product\" graphql:\"product\""
	Quantity      int                                                                "json:\"quantity\" graphql:\"quantity\""
	PurchasePrice int                                                                "json:\"purchasePrice\" graphql:\"purchasePrice\""
	Attributes    []*OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation     *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems) GetID() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems) GetProduct() *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Product {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems{}
	}
	return &t.Product
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems) GetQuantity() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems{}
	}
	return t.Quantity
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems{}
	}
	return t.PurchasePrice
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems) GetAttributes() []*OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Attributes {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems{}
	}
	return t.Attributes
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems) GetVariation() *OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems_Variation {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems{}
	}
	return t.Variation
}

type OrderGuestCheckout_OrderGuestCheckout_Cart struct {
	ID                 string                                                  "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                                                    "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_Cart) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart) GetIsShippingRequired() bool {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart{}
	}
	return t.IsShippingRequired
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Cart) GetCartItems() []*OrderGuestCheckout_OrderGuestCheckout_Cart_CartItems {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Cart{}
	}
	return t.CartItems
}

type OrderGuestCheckout_OrderGuestCheckout_Customer struct {
	Email          string  "json:\"email\" graphql:\"email\""
	Phone          *string "json:\"phone,omitempty\" graphql:\"phone\""
	FirstName      string  "json:\"firstName\" graphql:\"firstName\""
	LastName       string  "json:\"lastName\" graphql:\"lastName\""
	ProfilePicture *string "json:\"profilePicture,omitempty\" graphql:\"profilePicture\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_Customer) GetEmail() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Customer{}
	}
	return t.Email
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Customer) GetPhone() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Customer{}
	}
	return t.Phone
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Customer) GetFirstName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Customer{}
	}
	return t.FirstName
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Customer) GetLastName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Customer{}
	}
	return t.LastName
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Customer) GetProfilePicture() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Customer{}
	}
	return t.ProfilePicture
}

type OrderGuestCheckout_OrderGuestCheckout_PaymentMethod struct {
	ID               string "json:\"id\" graphql:\"id\""
	DisplayName      string "json:\"displayName\" graphql:\"displayName\""
	CurrencyName     string "json:\"currencyName\" graphql:\"currencyName\""
	CurrencySymbol   string "json:\"currencySymbol\" graphql:\"currencySymbol\""
	IsDigitalPayment bool   "json:\"isDigitalPayment\" graphql:\"isDigitalPayment\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_PaymentMethod) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_PaymentMethod{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_PaymentMethod) GetDisplayName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_PaymentMethod{}
	}
	return t.DisplayName
}
func (t *OrderGuestCheckout_OrderGuestCheckout_PaymentMethod) GetCurrencyName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_PaymentMethod{}
	}
	return t.CurrencyName
}
func (t *OrderGuestCheckout_OrderGuestCheckout_PaymentMethod) GetCurrencySymbol() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_PaymentMethod{}
	}
	return t.CurrencySymbol
}
func (t *OrderGuestCheckout_OrderGuestCheckout_PaymentMethod) GetIsDigitalPayment() bool {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_PaymentMethod{}
	}
	return t.IsDigitalPayment
}

type OrderGuestCheckout_OrderGuestCheckout_ShippingMethod struct {
	ID                 string            "json:\"id\" graphql:\"id\""
	DisplayName        string            "json:\"displayName\" graphql:\"displayName\""
	DeliveryCharge     int               "json:\"deliveryCharge\" graphql:\"deliveryCharge\""
	DeliveryTimeInDays int               "json:\"deliveryTimeInDays\" graphql:\"deliveryTimeInDays\""
	WeightUnit         models.WeightUnit "json:\"WeightUnit\" graphql:\"WeightUnit\""
	IsFlat             bool              "json:\"isFlat\" graphql:\"isFlat\""
	IsActive           bool              "json:\"isActive\" graphql:\"isActive\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingMethod) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingMethod{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingMethod) GetDisplayName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingMethod{}
	}
	return t.DisplayName
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingMethod) GetDeliveryCharge() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingMethod{}
	}
	return t.DeliveryCharge
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingMethod) GetDeliveryTimeInDays() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingMethod{}
	}
	return t.DeliveryTimeInDays
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingMethod) GetWeightUnit() *models.WeightUnit {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingMethod{}
	}
	return &t.WeightUnit
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingMethod) GetIsFlat() bool {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingMethod{}
	}
	return t.IsFlat
}
func (t *OrderGuestCheckout_OrderGuestCheckout_ShippingMethod) GetIsActive() bool {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_ShippingMethod{}
	}
	return t.IsActive
}

type OrderGuestCheckout_OrderGuestCheckout_CouponCode struct {
	Code         string              "json:\"code\" graphql:\"code\""
	DiscountType models.DiscountType "json:\"discountType\" graphql:\"discountType\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_CouponCode) GetCode() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_CouponCode{}
	}
	return t.Code
}
func (t *OrderGuestCheckout_OrderGuestCheckout_CouponCode) GetDiscountType() *models.DiscountType {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_CouponCode{}
	}
	return &t.DiscountType
}

type OrderGuestCheckout_OrderGuestCheckout_Payments struct {
	IsPaid        bool   "json:\"isPaid\" graphql:\"isPaid\""
	PayableAmount int    "json:\"payableAmount\" graphql:\"payableAmount\""
	GatewayName   string "json:\"gatewayName\" graphql:\"gatewayName\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout_Payments) GetIsPaid() bool {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Payments{}
	}
	return t.IsPaid
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Payments) GetPayableAmount() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Payments{}
	}
	return t.PayableAmount
}
func (t *OrderGuestCheckout_OrderGuestCheckout_Payments) GetGatewayName() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout_Payments{}
	}
	return t.GatewayName
}

type OrderGuestCheckout_OrderGuestCheckout struct {
	ID                   string                                                 "json:\"id\" graphql:\"id\""
	Hash                 string                                                 "json:\"hash\" graphql:\"hash\""
	ShippingCharge       int                                                    "json:\"shippingCharge\" graphql:\"shippingCharge\""
	PaymentProcessingFee int                                                    "json:\"paymentProcessingFee\" graphql:\"paymentProcessingFee\""
	Subtotal             int                                                    "json:\"subtotal\" graphql:\"subtotal\""
	GrandTotal           int                                                    "json:\"grandTotal\" graphql:\"grandTotal\""
	DiscountedAmount     int                                                    "json:\"discountedAmount\" graphql:\"discountedAmount\""
	Status               models.OrderStatus                                     "json:\"status\" graphql:\"status\""
	PaymentStatus        models.OrderPaymentStatus                              "json:\"paymentStatus\" graphql:\"paymentStatus\""
	CreatedAt            string                                                 "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt            *string                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	BillingAddress       OrderGuestCheckout_OrderGuestCheckout_BillingAddress   "json:\"billingAddress\" graphql:\"billingAddress\""
	ShippingAddress      *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress "json:\"shippingAddress,omitempty\" graphql:\"shippingAddress\""
	Cart                 OrderGuestCheckout_OrderGuestCheckout_Cart             "json:\"cart\" graphql:\"cart\""
	Customer             OrderGuestCheckout_OrderGuestCheckout_Customer         "json:\"customer\" graphql:\"customer\""
	PaymentMethod        *OrderGuestCheckout_OrderGuestCheckout_PaymentMethod   "json:\"paymentMethod,omitempty\" graphql:\"paymentMethod\""
	ShippingMethod       *OrderGuestCheckout_OrderGuestCheckout_ShippingMethod  "json:\"shippingMethod,omitempty\" graphql:\"shippingMethod\""
	CouponCode           *OrderGuestCheckout_OrderGuestCheckout_CouponCode      "json:\"couponCode,omitempty\" graphql:\"couponCode\""
	Payments             []*OrderGuestCheckout_OrderGuestCheckout_Payments      "json:\"payments\" graphql:\"payments\""
}

func (t *OrderGuestCheckout_OrderGuestCheckout) GetID() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.ID
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetHash() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.Hash
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetShippingCharge() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.ShippingCharge
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetPaymentProcessingFee() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.PaymentProcessingFee
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetSubtotal() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.Subtotal
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetGrandTotal() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.GrandTotal
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetDiscountedAmount() int {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.DiscountedAmount
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetStatus() *models.OrderStatus {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return &t.Status
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetPaymentStatus() *models.OrderPaymentStatus {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return &t.PaymentStatus
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetCreatedAt() string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.CreatedAt
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetUpdatedAt() *string {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.UpdatedAt
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetBillingAddress() *OrderGuestCheckout_OrderGuestCheckout_BillingAddress {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return &t.BillingAddress
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetShippingAddress() *OrderGuestCheckout_OrderGuestCheckout_ShippingAddress {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.ShippingAddress
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetCart() *OrderGuestCheckout_OrderGuestCheckout_Cart {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return &t.Cart
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetCustomer() *OrderGuestCheckout_OrderGuestCheckout_Customer {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return &t.Customer
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetPaymentMethod() *OrderGuestCheckout_OrderGuestCheckout_PaymentMethod {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.PaymentMethod
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetShippingMethod() *OrderGuestCheckout_OrderGuestCheckout_ShippingMethod {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.ShippingMethod
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetCouponCode() *OrderGuestCheckout_OrderGuestCheckout_CouponCode {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.CouponCode
}
func (t *OrderGuestCheckout_OrderGuestCheckout) GetPayments() []*OrderGuestCheckout_OrderGuestCheckout_Payments {
	if t == nil {
		t = &OrderGuestCheckout_OrderGuestCheckout{}
	}
	return t.Payments
}

type OrderGeneratePaymentNonceForGuest_OrderGeneratePaymentNonceForGuest struct {
	PaymentGatewayName   string  "json:\"PaymentGatewayName\" graphql:\"PaymentGatewayName\""
	Nonce                string  "json:\"Nonce\" graphql:\"Nonce\""
	StripePublishableKey *string "json:\"StripePublishableKey,omitempty\" graphql:\"StripePublishableKey\""
}

func (t *OrderGeneratePaymentNonceForGuest_OrderGeneratePaymentNonceForGuest) GetPaymentGatewayName() string {
	if t == nil {
		t = &OrderGeneratePaymentNonceForGuest_OrderGeneratePaymentNonceForGuest{}
	}
	return t.PaymentGatewayName
}
func (t *OrderGeneratePaymentNonceForGuest_OrderGeneratePaymentNonceForGuest) GetNonce() string {
	if t == nil {
		t = &OrderGeneratePaymentNonceForGuest_OrderGeneratePaymentNonceForGuest{}
	}
	return t.Nonce
}
func (t *OrderGeneratePaymentNonceForGuest_OrderGeneratePaymentNonceForGuest) GetStripePublishableKey() *string {
	if t == nil {
		t = &OrderGeneratePaymentNonceForGuest_OrderGeneratePaymentNonceForGuest{}
	}
	return t.StripePublishableKey
}

type NewCart_NewCart_CartItems_Product_Attributes struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Values     []string "json:\"values\" graphql:\"values\""
	IsRequired bool     "json:\"isRequired\" graphql:\"isRequired\""
}

func (t *NewCart_NewCart_CartItems_Product_Attributes) GetID() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product_Attributes{}
	}
	return t.ID
}
func (t *NewCart_NewCart_CartItems_Product_Attributes) GetName() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product_Attributes{}
	}
	return t.Name
}
func (t *NewCart_NewCart_CartItems_Product_Attributes) GetValues() []string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product_Attributes{}
	}
	return t.Values
}
func (t *NewCart_NewCart_CartItems_Product_Attributes) GetIsRequired() bool {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product_Attributes{}
	}
	return t.IsRequired
}

type NewCart_NewCart_CartItems_Product struct {
	ID                      string                                          "json:\"id\" graphql:\"id\""
	Name                    string                                          "json:\"name\" graphql:\"name\""
	Slug                    string                                          "json:\"slug\" graphql:\"slug\""
	Description             string                                          "json:\"description\" graphql:\"description\""
	Sku                     *string                                         "json:\"sku,omitempty\" graphql:\"sku\""
	Price                   int                                             "json:\"price\" graphql:\"price\""
	Stock                   *int                                            "json:\"stock,omitempty\" graphql:\"stock\""
	Images                  []string                                        "json:\"images\" graphql:\"images\""
	FullImages              []string                                        "json:\"fullImages\" graphql:\"fullImages\""
	IsDigitalProduct        bool                                            "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	ProductSpecificDiscount int                                             "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	Views                   int                                             "json:\"views\" graphql:\"views\""
	ProductUnit             *models.ProductUnit                             "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	CreatedAt               string                                          "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt               *string                                         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Attributes              []*NewCart_NewCart_CartItems_Product_Attributes "json:\"attributes\" graphql:\"attributes\""
}

func (t *NewCart_NewCart_CartItems_Product) GetID() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.ID
}
func (t *NewCart_NewCart_CartItems_Product) GetName() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.Name
}
func (t *NewCart_NewCart_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.Slug
}
func (t *NewCart_NewCart_CartItems_Product) GetDescription() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.Description
}
func (t *NewCart_NewCart_CartItems_Product) GetSku() *string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.Sku
}
func (t *NewCart_NewCart_CartItems_Product) GetPrice() int {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.Price
}
func (t *NewCart_NewCart_CartItems_Product) GetStock() *int {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.Stock
}
func (t *NewCart_NewCart_CartItems_Product) GetImages() []string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.Images
}
func (t *NewCart_NewCart_CartItems_Product) GetFullImages() []string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.FullImages
}
func (t *NewCart_NewCart_CartItems_Product) GetIsDigitalProduct() bool {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.IsDigitalProduct
}
func (t *NewCart_NewCart_CartItems_Product) GetProductSpecificDiscount() int {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.ProductSpecificDiscount
}
func (t *NewCart_NewCart_CartItems_Product) GetViews() int {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.Views
}
func (t *NewCart_NewCart_CartItems_Product) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.ProductUnit
}
func (t *NewCart_NewCart_CartItems_Product) GetCreatedAt() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.CreatedAt
}
func (t *NewCart_NewCart_CartItems_Product) GetUpdatedAt() *string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.UpdatedAt
}
func (t *NewCart_NewCart_CartItems_Product) GetAttributes() []*NewCart_NewCart_CartItems_Product_Attributes {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Product{}
	}
	return t.Attributes
}

type NewCart_NewCart_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *NewCart_NewCart_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Attributes{}
	}
	return t.Name
}
func (t *NewCart_NewCart_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type NewCart_NewCart_CartItems_Variation struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *NewCart_NewCart_CartItems_Variation) GetID() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Variation{}
	}
	return t.ID
}
func (t *NewCart_NewCart_CartItems_Variation) GetName() string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Variation{}
	}
	return t.Name
}
func (t *NewCart_NewCart_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Variation{}
	}
	return t.Price
}
func (t *NewCart_NewCart_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Variation{}
	}
	return t.Sku
}
func (t *NewCart_NewCart_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &NewCart_NewCart_CartItems_Variation{}
	}
	return t.Stock
}

type NewCart_NewCart_CartItems struct {
	ID            int                                     "json:\"id\" graphql:\"id\""
	Product       NewCart_NewCart_CartItems_Product       "json:\"product\" graphql:\"product\""
	Quantity      int                                     "json:\"quantity\" graphql:\"quantity\""
	PurchasePrice int                                     "json:\"purchasePrice\" graphql:\"purchasePrice\""
	Attributes    []*NewCart_NewCart_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation     *NewCart_NewCart_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *NewCart_NewCart_CartItems) GetID() int {
	if t == nil {
		t = &NewCart_NewCart_CartItems{}
	}
	return t.ID
}
func (t *NewCart_NewCart_CartItems) GetProduct() *NewCart_NewCart_CartItems_Product {
	if t == nil {
		t = &NewCart_NewCart_CartItems{}
	}
	return &t.Product
}
func (t *NewCart_NewCart_CartItems) GetQuantity() int {
	if t == nil {
		t = &NewCart_NewCart_CartItems{}
	}
	return t.Quantity
}
func (t *NewCart_NewCart_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &NewCart_NewCart_CartItems{}
	}
	return t.PurchasePrice
}
func (t *NewCart_NewCart_CartItems) GetAttributes() []*NewCart_NewCart_CartItems_Attributes {
	if t == nil {
		t = &NewCart_NewCart_CartItems{}
	}
	return t.Attributes
}
func (t *NewCart_NewCart_CartItems) GetVariation() *NewCart_NewCart_CartItems_Variation {
	if t == nil {
		t = &NewCart_NewCart_CartItems{}
	}
	return t.Variation
}

type NewCart_NewCart struct {
	ID                 string                       "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                         "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*NewCart_NewCart_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *NewCart_NewCart) GetID() string {
	if t == nil {
		t = &NewCart_NewCart{}
	}
	return t.ID
}
func (t *NewCart_NewCart) GetIsShippingRequired() bool {
	if t == nil {
		t = &NewCart_NewCart{}
	}
	return t.IsShippingRequired
}
func (t *NewCart_NewCart) GetCartItems() []*NewCart_NewCart_CartItems {
	if t == nil {
		t = &NewCart_NewCart{}
	}
	return t.CartItems
}

type UpdateCart_UpdateCart_CartItems_Product_Attributes struct {
	ID         string   "json:\"id\" graphql:\"id\""
	Name       string   "json:\"name\" graphql:\"name\""
	Values     []string "json:\"values\" graphql:\"values\""
	IsRequired bool     "json:\"isRequired\" graphql:\"isRequired\""
}

func (t *UpdateCart_UpdateCart_CartItems_Product_Attributes) GetID() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product_Attributes{}
	}
	return t.ID
}
func (t *UpdateCart_UpdateCart_CartItems_Product_Attributes) GetName() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product_Attributes{}
	}
	return t.Name
}
func (t *UpdateCart_UpdateCart_CartItems_Product_Attributes) GetValues() []string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product_Attributes{}
	}
	return t.Values
}
func (t *UpdateCart_UpdateCart_CartItems_Product_Attributes) GetIsRequired() bool {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product_Attributes{}
	}
	return t.IsRequired
}

type UpdateCart_UpdateCart_CartItems_Product struct {
	ID                      string                                                "json:\"id\" graphql:\"id\""
	Name                    string                                                "json:\"name\" graphql:\"name\""
	Slug                    string                                                "json:\"slug\" graphql:\"slug\""
	Description             string                                                "json:\"description\" graphql:\"description\""
	Sku                     *string                                               "json:\"sku,omitempty\" graphql:\"sku\""
	Price                   int                                                   "json:\"price\" graphql:\"price\""
	Stock                   *int                                                  "json:\"stock,omitempty\" graphql:\"stock\""
	Images                  []string                                              "json:\"images\" graphql:\"images\""
	FullImages              []string                                              "json:\"fullImages\" graphql:\"fullImages\""
	IsDigitalProduct        bool                                                  "json:\"isDigitalProduct\" graphql:\"isDigitalProduct\""
	ProductSpecificDiscount int                                                   "json:\"productSpecificDiscount\" graphql:\"productSpecificDiscount\""
	Views                   int                                                   "json:\"views\" graphql:\"views\""
	ProductUnit             *models.ProductUnit                                   "json:\"productUnit,omitempty\" graphql:\"productUnit\""
	CreatedAt               string                                                "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt               *string                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Attributes              []*UpdateCart_UpdateCart_CartItems_Product_Attributes "json:\"attributes\" graphql:\"attributes\""
}

func (t *UpdateCart_UpdateCart_CartItems_Product) GetID() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.ID
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetName() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.Name
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetSlug() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.Slug
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetDescription() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.Description
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetSku() *string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.Sku
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetPrice() int {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.Price
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetStock() *int {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.Stock
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetImages() []string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.Images
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetFullImages() []string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.FullImages
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetIsDigitalProduct() bool {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.IsDigitalProduct
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetProductSpecificDiscount() int {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.ProductSpecificDiscount
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetViews() int {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.Views
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetProductUnit() *models.ProductUnit {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.ProductUnit
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetCreatedAt() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.CreatedAt
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetUpdatedAt() *string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.UpdatedAt
}
func (t *UpdateCart_UpdateCart_CartItems_Product) GetAttributes() []*UpdateCart_UpdateCart_CartItems_Product_Attributes {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Product{}
	}
	return t.Attributes
}

type UpdateCart_UpdateCart_CartItems_Attributes struct {
	Name          string "json:\"name\" graphql:\"name\""
	SelectedValue string "json:\"selectedValue\" graphql:\"selectedValue\""
}

func (t *UpdateCart_UpdateCart_CartItems_Attributes) GetName() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Attributes{}
	}
	return t.Name
}
func (t *UpdateCart_UpdateCart_CartItems_Attributes) GetSelectedValue() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Attributes{}
	}
	return t.SelectedValue
}

type UpdateCart_UpdateCart_CartItems_Variation struct {
	ID    string  "json:\"id\" graphql:\"id\""
	Name  string  "json:\"name\" graphql:\"name\""
	Price int     "json:\"price\" graphql:\"price\""
	Sku   *string "json:\"sku,omitempty\" graphql:\"sku\""
	Stock *int    "json:\"stock,omitempty\" graphql:\"stock\""
}

func (t *UpdateCart_UpdateCart_CartItems_Variation) GetID() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Variation{}
	}
	return t.ID
}
func (t *UpdateCart_UpdateCart_CartItems_Variation) GetName() string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Variation{}
	}
	return t.Name
}
func (t *UpdateCart_UpdateCart_CartItems_Variation) GetPrice() int {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Variation{}
	}
	return t.Price
}
func (t *UpdateCart_UpdateCart_CartItems_Variation) GetSku() *string {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Variation{}
	}
	return t.Sku
}
func (t *UpdateCart_UpdateCart_CartItems_Variation) GetStock() *int {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems_Variation{}
	}
	return t.Stock
}

type UpdateCart_UpdateCart_CartItems struct {
	ID            int                                           "json:\"id\" graphql:\"id\""
	Product       UpdateCart_UpdateCart_CartItems_Product       "json:\"product\" graphql:\"product\""
	Quantity      int                                           "json:\"quantity\" graphql:\"quantity\""
	PurchasePrice int                                           "json:\"purchasePrice\" graphql:\"purchasePrice\""
	Attributes    []*UpdateCart_UpdateCart_CartItems_Attributes "json:\"attributes\" graphql:\"attributes\""
	Variation     *UpdateCart_UpdateCart_CartItems_Variation    "json:\"variation,omitempty\" graphql:\"variation\""
}

func (t *UpdateCart_UpdateCart_CartItems) GetID() int {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems{}
	}
	return t.ID
}
func (t *UpdateCart_UpdateCart_CartItems) GetProduct() *UpdateCart_UpdateCart_CartItems_Product {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems{}
	}
	return &t.Product
}
func (t *UpdateCart_UpdateCart_CartItems) GetQuantity() int {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems{}
	}
	return t.Quantity
}
func (t *UpdateCart_UpdateCart_CartItems) GetPurchasePrice() int {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems{}
	}
	return t.PurchasePrice
}
func (t *UpdateCart_UpdateCart_CartItems) GetAttributes() []*UpdateCart_UpdateCart_CartItems_Attributes {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems{}
	}
	return t.Attributes
}
func (t *UpdateCart_UpdateCart_CartItems) GetVariation() *UpdateCart_UpdateCart_CartItems_Variation {
	if t == nil {
		t = &UpdateCart_UpdateCart_CartItems{}
	}
	return t.Variation
}

type UpdateCart_UpdateCart struct {
	ID                 string                             "json:\"id\" graphql:\"id\""
	IsShippingRequired bool                               "json:\"isShippingRequired\" graphql:\"isShippingRequired\""
	CartItems          []*UpdateCart_UpdateCart_CartItems "json:\"cartItems\" graphql:\"cartItems\""
}

func (t *UpdateCart_UpdateCart) GetID() string {
	if t == nil {
		t = &UpdateCart_UpdateCart{}
	}
	return t.ID
}
func (t *UpdateCart_UpdateCart) GetIsShippingRequired() bool {
	if t == nil {
		t = &UpdateCart_UpdateCart{}
	}
	return t.IsShippingRequired
}
func (t *UpdateCart_UpdateCart) GetCartItems() []*UpdateCart_UpdateCart_CartItems {
	if t == nil {
		t = &UpdateCart_UpdateCart{}
	}
	return t.CartItems
}

type AbandonedCarts struct {
	AbandonedCarts []*AbandonedCarts_AbandonedCarts "json:\"abandonedCarts\" graphql:\"abandonedCarts\""
}

func (t *AbandonedCarts) GetAbandonedCarts() []*AbandonedCarts_AbandonedCarts {
	if t == nil {
		t = &AbandonedCarts{}
	}
	return t.AbandonedCarts
}

type BlogPost struct {
	BlogPost BlogPost_BlogPost "json:\"blogPost\" graphql:\"blogPost\""
}

func (t *BlogPost) GetBlogPost() *BlogPost_BlogPost {
	if t == nil {
		t = &BlogPost{}
	}
	return &t.BlogPost
}

type BlogPostByAdmin struct {
	BlogPostByAdmin BlogPostByAdmin_BlogPostByAdmin "json:\"blogPostByAdmin\" graphql:\"blogPostByAdmin\""
}

func (t *BlogPostByAdmin) GetBlogPostByAdmin() *BlogPostByAdmin_BlogPostByAdmin {
	if t == nil {
		t = &BlogPostByAdmin{}
	}
	return &t.BlogPostByAdmin
}

type BlogPostBySlug struct {
	BlogPostBySlug BlogPostBySlug_BlogPostBySlug "json:\"blogPostBySlug\" graphql:\"blogPostBySlug\""
}

func (t *BlogPostBySlug) GetBlogPostBySlug() *BlogPostBySlug_BlogPostBySlug {
	if t == nil {
		t = &BlogPostBySlug{}
	}
	return &t.BlogPostBySlug
}

type BlogPosts struct {
	BlogPosts []*BlogPosts_BlogPosts "json:\"blogPosts\" graphql:\"blogPosts\""
}

func (t *BlogPosts) GetBlogPosts() []*BlogPosts_BlogPosts {
	if t == nil {
		t = &BlogPosts{}
	}
	return t.BlogPosts
}

type BlogPostsByAdmin struct {
	BlogPostsByAdmin []*BlogPostsByAdmin_BlogPostsByAdmin "json:\"blogPostsByAdmin\" graphql:\"blogPostsByAdmin\""
}

func (t *BlogPostsByAdmin) GetBlogPostsByAdmin() []*BlogPostsByAdmin_BlogPostsByAdmin {
	if t == nil {
		t = &BlogPostsByAdmin{}
	}
	return t.BlogPostsByAdmin
}

type Cart struct {
	Cart Cart_Cart "json:\"cart\" graphql:\"cart\""
}

func (t *Cart) GetCart() *Cart_Cart {
	if t == nil {
		t = &Cart{}
	}
	return &t.Cart
}

type Categories struct {
	Categories []*Categories_Categories "json:\"categories\" graphql:\"categories\""
}

func (t *Categories) GetCategories() []*Categories_Categories {
	if t == nil {
		t = &Categories{}
	}
	return t.Categories
}

type CategoriesByAdmin struct {
	CategoriesByAdmin []*CategoriesByAdmin_CategoriesByAdmin "json:\"categoriesByAdmin\" graphql:\"categoriesByAdmin\""
}

func (t *CategoriesByAdmin) GetCategoriesByAdmin() []*CategoriesByAdmin_CategoriesByAdmin {
	if t == nil {
		t = &CategoriesByAdmin{}
	}
	return t.CategoriesByAdmin
}

type Category struct {
	Category Category_Category "json:\"category\" graphql:\"category\""
}

func (t *Category) GetCategory() *Category_Category {
	if t == nil {
		t = &Category{}
	}
	return &t.Category
}

type CategoryByAdmin struct {
	CategoryByAdmin CategoryByAdmin_CategoryByAdmin "json:\"categoryByAdmin\" graphql:\"categoryByAdmin\""
}

func (t *CategoryByAdmin) GetCategoryByAdmin() *CategoryByAdmin_CategoryByAdmin {
	if t == nil {
		t = &CategoryByAdmin{}
	}
	return &t.CategoryByAdmin
}

type CheckDiscount struct {
	CheckDiscount int "json:\"checkDiscount\" graphql:\"checkDiscount\""
}

func (t *CheckDiscount) GetCheckDiscount() int {
	if t == nil {
		t = &CheckDiscount{}
	}
	return t.CheckDiscount
}

type CheckDiscountByAdmin struct {
	CheckDiscountByAdmin int "json:\"checkDiscountByAdmin\" graphql:\"checkDiscountByAdmin\""
}

func (t *CheckDiscountByAdmin) GetCheckDiscountByAdmin() int {
	if t == nil {
		t = &CheckDiscountByAdmin{}
	}
	return t.CheckDiscountByAdmin
}

type CheckDiscountForGuests struct {
	CheckDiscountForGuests int "json:\"checkDiscountForGuests\" graphql:\"checkDiscountForGuests\""
}

func (t *CheckDiscountForGuests) GetCheckDiscountForGuests() int {
	if t == nil {
		t = &CheckDiscountForGuests{}
	}
	return t.CheckDiscountForGuests
}

type CheckPaymentProcessingFee struct {
	CheckPaymentProcessingFee int "json:\"checkPaymentProcessingFee\" graphql:\"checkPaymentProcessingFee\""
}

func (t *CheckPaymentProcessingFee) GetCheckPaymentProcessingFee() int {
	if t == nil {
		t = &CheckPaymentProcessingFee{}
	}
	return t.CheckPaymentProcessingFee
}

type CheckShippingCharge struct {
	CheckShippingCharge int "json:\"checkShippingCharge\" graphql:\"checkShippingCharge\""
}

func (t *CheckShippingCharge) GetCheckShippingCharge() int {
	if t == nil {
		t = &CheckShippingCharge{}
	}
	return t.CheckShippingCharge
}

type Collection struct {
	Collection Collection_Collection "json:\"collection\" graphql:\"collection\""
}

func (t *Collection) GetCollection() *Collection_Collection {
	if t == nil {
		t = &Collection{}
	}
	return &t.Collection
}

type CollectionByAdmin struct {
	CollectionByAdmin CollectionByAdmin_CollectionByAdmin "json:\"collectionByAdmin\" graphql:\"collectionByAdmin\""
}

func (t *CollectionByAdmin) GetCollectionByAdmin() *CollectionByAdmin_CollectionByAdmin {
	if t == nil {
		t = &CollectionByAdmin{}
	}
	return &t.CollectionByAdmin
}

type Collections struct {
	Collections []*Collections_Collections "json:\"collections\" graphql:\"collections\""
}

func (t *Collections) GetCollections() []*Collections_Collections {
	if t == nil {
		t = &Collections{}
	}
	return t.Collections
}

type CollectionsByAdmin struct {
	CollectionsByAdmin []*CollectionsByAdmin_CollectionsByAdmin "json:\"collectionsByAdmin\" graphql:\"collectionsByAdmin\""
}

func (t *CollectionsByAdmin) GetCollectionsByAdmin() []*CollectionsByAdmin_CollectionsByAdmin {
	if t == nil {
		t = &CollectionsByAdmin{}
	}
	return t.CollectionsByAdmin
}

type CouponCode struct {
	CouponCode CouponCode_CouponCode "json:\"couponCode\" graphql:\"couponCode\""
}

func (t *CouponCode) GetCouponCode() *CouponCode_CouponCode {
	if t == nil {
		t = &CouponCode{}
	}
	return &t.CouponCode
}

type CouponCodes struct {
	CouponCodes []*CouponCodes_CouponCodes "json:\"couponCodes\" graphql:\"couponCodes\""
}

func (t *CouponCodes) GetCouponCodes() []*CouponCodes_CouponCodes {
	if t == nil {
		t = &CouponCodes{}
	}
	return t.CouponCodes
}

type CustomerProfile struct {
	CustomerProfile CustomerProfile_CustomerProfile "json:\"customerProfile\" graphql:\"customerProfile\""
}

func (t *CustomerProfile) GetCustomerProfile() *CustomerProfile_CustomerProfile {
	if t == nil {
		t = &CustomerProfile{}
	}
	return &t.CustomerProfile
}

type CustomersByAdmin struct {
	CustomersByAdmin []*CustomersByAdmin_CustomersByAdmin "json:\"customersByAdmin\" graphql:\"customersByAdmin\""
}

func (t *CustomersByAdmin) GetCustomersByAdmin() []*CustomersByAdmin_CustomersByAdmin {
	if t == nil {
		t = &CustomersByAdmin{}
	}
	return t.CustomersByAdmin
}

type LocationByID struct {
	LocationByID LocationById_LocationByID "json:\"locationById\" graphql:\"locationById\""
}

func (t *LocationByID) GetLocationByID() *LocationById_LocationByID {
	if t == nil {
		t = &LocationByID{}
	}
	return &t.LocationByID
}

type Locations struct {
	Locations []*Locations_Locations "json:\"locations\" graphql:\"locations\""
}

func (t *Locations) GetLocations() []*Locations_Locations {
	if t == nil {
		t = &Locations{}
	}
	return t.Locations
}

type MediaByAdmin struct {
	MediaByAdmin []*MediaByAdmin_MediaByAdmin "json:\"mediaByAdmin\" graphql:\"mediaByAdmin\""
}

func (t *MediaByAdmin) GetMediaByAdmin() []*MediaByAdmin_MediaByAdmin {
	if t == nil {
		t = &MediaByAdmin{}
	}
	return t.MediaByAdmin
}

type Order struct {
	Order Order_Order "json:\"order\" graphql:\"order\""
}

func (t *Order) GetOrder() *Order_Order {
	if t == nil {
		t = &Order{}
	}
	return &t.Order
}

type OrderByAdmin struct {
	OrderByAdmin OrderByAdmin_OrderByAdmin "json:\"orderByAdmin\" graphql:\"orderByAdmin\""
}

func (t *OrderByAdmin) GetOrderByAdmin() *OrderByAdmin_OrderByAdmin {
	if t == nil {
		t = &OrderByAdmin{}
	}
	return &t.OrderByAdmin
}

type OrderByCustomerEmail struct {
	OrderByCustomerEmail OrderByCustomerEmail_OrderByCustomerEmail "json:\"orderByCustomerEmail\" graphql:\"orderByCustomerEmail\""
}

func (t *OrderByCustomerEmail) GetOrderByCustomerEmail() *OrderByCustomerEmail_OrderByCustomerEmail {
	if t == nil {
		t = &OrderByCustomerEmail{}
	}
	return &t.OrderByCustomerEmail
}

type Orders struct {
	Orders []*Orders_Orders "json:\"orders\" graphql:\"orders\""
}

func (t *Orders) GetOrders() []*Orders_Orders {
	if t == nil {
		t = &Orders{}
	}
	return t.Orders
}

type OrdersByAdmin struct {
	OrdersByAdmin []*OrdersByAdmin_OrdersByAdmin "json:\"ordersByAdmin\" graphql:\"ordersByAdmin\""
}

func (t *OrdersByAdmin) GetOrdersByAdmin() []*OrdersByAdmin_OrdersByAdmin {
	if t == nil {
		t = &OrdersByAdmin{}
	}
	return t.OrdersByAdmin
}

type PaymentMethods struct {
	PaymentMethods []*PaymentMethods_PaymentMethods "json:\"paymentMethods\" graphql:\"paymentMethods\""
}

func (t *PaymentMethods) GetPaymentMethods() []*PaymentMethods_PaymentMethods {
	if t == nil {
		t = &PaymentMethods{}
	}
	return t.PaymentMethods
}

type Product struct {
	Product Product_Product "json:\"product\" graphql:\"product\""
}

func (t *Product) GetProduct() *Product_Product {
	if t == nil {
		t = &Product{}
	}
	return &t.Product
}

type ProductByAdmin struct {
	ProductByAdmin ProductByAdmin_ProductByAdmin "json:\"productByAdmin\" graphql:\"productByAdmin\""
}

func (t *ProductByAdmin) GetProductByAdmin() *ProductByAdmin_ProductByAdmin {
	if t == nil {
		t = &ProductByAdmin{}
	}
	return &t.ProductByAdmin
}

type ProductBySlug struct {
	ProductBySlug ProductBySlug_ProductBySlug "json:\"productBySlug\" graphql:\"productBySlug\""
}

func (t *ProductBySlug) GetProductBySlug() *ProductBySlug_ProductBySlug {
	if t == nil {
		t = &ProductBySlug{}
	}
	return &t.ProductBySlug
}

type ProductSearch struct {
	ProductSearch []*ProductSearch_ProductSearch "json:\"productSearch\" graphql:\"productSearch\""
}

func (t *ProductSearch) GetProductSearch() []*ProductSearch_ProductSearch {
	if t == nil {
		t = &ProductSearch{}
	}
	return t.ProductSearch
}

type ProductSearchByAdmin struct {
	ProductSearchByAdmin []*ProductSearchByAdmin_ProductSearchByAdmin "json:\"productSearchByAdmin\" graphql:\"productSearchByAdmin\""
}

func (t *ProductSearchByAdmin) GetProductSearchByAdmin() []*ProductSearchByAdmin_ProductSearchByAdmin {
	if t == nil {
		t = &ProductSearchByAdmin{}
	}
	return t.ProductSearchByAdmin
}

type Products struct {
	Products []*Products_Products "json:\"products\" graphql:\"products\""
}

func (t *Products) GetProducts() []*Products_Products {
	if t == nil {
		t = &Products{}
	}
	return t.Products
}

type ProductsByAdmin struct {
	ProductsByAdmin []*ProductsByAdmin_ProductsByAdmin "json:\"productsByAdmin\" graphql:\"productsByAdmin\""
}

func (t *ProductsByAdmin) GetProductsByAdmin() []*ProductsByAdmin_ProductsByAdmin {
	if t == nil {
		t = &ProductsByAdmin{}
	}
	return t.ProductsByAdmin
}

type ShippingMethods struct {
	ShippingMethods []*ShippingMethods_ShippingMethods "json:\"shippingMethods\" graphql:\"shippingMethods\""
}

func (t *ShippingMethods) GetShippingMethods() []*ShippingMethods_ShippingMethods {
	if t == nil {
		t = &ShippingMethods{}
	}
	return t.ShippingMethods
}

type StoreBySecret struct {
	StoreBySecret StoreBySecret_StoreBySecret "json:\"storeBySecret\" graphql:\"storeBySecret\""
}

func (t *StoreBySecret) GetStoreBySecret() *StoreBySecret_StoreBySecret {
	if t == nil {
		t = &StoreBySecret{}
	}
	return &t.StoreBySecret
}

type OrderGuestCheckout struct {
	OrderGuestCheckout OrderGuestCheckout_OrderGuestCheckout "json:\"orderGuestCheckout\" graphql:\"orderGuestCheckout\""
}

func (t *OrderGuestCheckout) GetOrderGuestCheckout() *OrderGuestCheckout_OrderGuestCheckout {
	if t == nil {
		t = &OrderGuestCheckout{}
	}
	return &t.OrderGuestCheckout
}

type OrderGeneratePaymentNonceForGuest struct {
	OrderGeneratePaymentNonceForGuest OrderGeneratePaymentNonceForGuest_OrderGeneratePaymentNonceForGuest "json:\"orderGeneratePaymentNonceForGuest\" graphql:\"orderGeneratePaymentNonceForGuest\""
}

func (t *OrderGeneratePaymentNonceForGuest) GetOrderGeneratePaymentNonceForGuest() *OrderGeneratePaymentNonceForGuest_OrderGeneratePaymentNonceForGuest {
	if t == nil {
		t = &OrderGeneratePaymentNonceForGuest{}
	}
	return &t.OrderGeneratePaymentNonceForGuest
}

type NewCart struct {
	NewCart NewCart_NewCart "json:\"newCart\" graphql:\"newCart\""
}

func (t *NewCart) GetNewCart() *NewCart_NewCart {
	if t == nil {
		t = &NewCart{}
	}
	return &t.NewCart
}

type UpdateCart struct {
	UpdateCart UpdateCart_UpdateCart "json:\"updateCart\" graphql:\"updateCart\""
}

func (t *UpdateCart) GetUpdateCart() *UpdateCart_UpdateCart {
	if t == nil {
		t = &UpdateCart{}
	}
	return &t.UpdateCart
}

const AbandonedCartsDocument = `query abandonedCarts ($pagination: Pagination!) {
	abandonedCarts(pagination: $pagination) {
		id
		isShippingRequired
		cartItems {
			id
			purchasePrice
			purchaseTimeCost
			quantity
			product {
				id
				slug
				description
				name
				price
				productSpecificDiscount
				productUnit
				isDigitalProduct
				isPublished
			}
			attributes {
				name
				selectedValue
			}
			variation {
				name
				price
				id
				cost
				sku
				stock
			}
		}
	}
}
`

func (c *Client) AbandonedCarts(ctx context.Context, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*AbandonedCarts, error) {
	vars := map[string]interface{}{
		"pagination": pagination,
	}

	var res AbandonedCarts
	if err := c.Client.Post(ctx, "abandonedCarts", AbandonedCartsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BlogPostDocument = `query blogPost ($id: String!) {
	blogPost(id: $id) {
		id
		slug
		title
		isPublished
		bannerImage
		bannerImageFull
		content
		createdAt
		favourites
		isFeatured
		views
		updatedAt
		comments {
			id
			customer {
				email
				firstName
				lastName
				phone
				profilePicture
				profilePictureFull
			}
			createdAt
			updatedAt
			content
		}
		tags
	}
}
`

func (c *Client) BlogPost(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*BlogPost, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res BlogPost
	if err := c.Client.Post(ctx, "blogPost", BlogPostDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BlogPostByAdminDocument = `query blogPostByAdmin ($id: String!) {
	blogPostByAdmin(id: $id) {
		id
		slug
		title
		isPublished
		bannerImage
		bannerImageFull
		content
		createdAt
		favourites
		isFeatured
		views
		updatedAt
		comments {
			id
			customer {
				email
				firstName
				lastName
				phone
				profilePicture
				profilePictureFull
			}
			createdAt
			updatedAt
			content
		}
		tags
	}
}
`

func (c *Client) BlogPostByAdmin(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*BlogPostByAdmin, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res BlogPostByAdmin
	if err := c.Client.Post(ctx, "blogPostByAdmin", BlogPostByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BlogPostBySlugDocument = `query blogPostBySlug ($slug: String!) {
	blogPostBySlug(slug: $slug) {
		id
		slug
		title
		isPublished
		bannerImage
		bannerImageFull
		content
		createdAt
		favourites
		isFeatured
		views
		updatedAt
		comments {
			id
			customer {
				email
				firstName
				lastName
				phone
				profilePicture
				profilePictureFull
			}
			createdAt
			updatedAt
			content
		}
		tags
	}
}
`

func (c *Client) BlogPostBySlug(ctx context.Context, slug string, interceptors ...clientv2.RequestInterceptor) (*BlogPostBySlug, error) {
	vars := map[string]interface{}{
		"slug": slug,
	}

	var res BlogPostBySlug
	if err := c.Client.Post(ctx, "blogPostBySlug", BlogPostBySlugDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BlogPostsDocument = `query blogPosts ($search: Search!, $pagination: Pagination!, $sort: Sort!) {
	blogPosts(search: $search, pagination: $pagination, sort: $sort) {
		id
		slug
		title
		isPublished
		bannerImage
		bannerImageFull
		content
		createdAt
		favourites
		isFeatured
		views
		updatedAt
		comments {
			id
			customer {
				email
				firstName
				lastName
				phone
				profilePicture
				profilePictureFull
			}
			createdAt
			updatedAt
			content
		}
		tags
	}
}
`

func (c *Client) BlogPosts(ctx context.Context, search models.Search, pagination models.Pagination, sort models.Sort, interceptors ...clientv2.RequestInterceptor) (*BlogPosts, error) {
	vars := map[string]interface{}{
		"search":     search,
		"pagination": pagination,
		"sort":       sort,
	}

	var res BlogPosts
	if err := c.Client.Post(ctx, "blogPosts", BlogPostsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const BlogPostsByAdminDocument = `query blogPostsByAdmin ($search: Search!, $pagination: Pagination!, $sort: Sort!) {
	blogPostsByAdmin(search: $search, pagination: $pagination, sort: $sort) {
		id
		slug
		title
		isPublished
		bannerImage
		bannerImageFull
		content
		createdAt
		favourites
		isFeatured
		views
		updatedAt
		comments {
			id
			customer {
				email
				firstName
				lastName
				phone
				profilePicture
				profilePictureFull
			}
			createdAt
			updatedAt
			content
		}
		tags
	}
}
`

func (c *Client) BlogPostsByAdmin(ctx context.Context, search models.Search, pagination models.Pagination, sort models.Sort, interceptors ...clientv2.RequestInterceptor) (*BlogPostsByAdmin, error) {
	vars := map[string]interface{}{
		"search":     search,
		"pagination": pagination,
		"sort":       sort,
	}

	var res BlogPostsByAdmin
	if err := c.Client.Post(ctx, "blogPostsByAdmin", BlogPostsByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CartDocument = `query cart ($cartId: String!) {
	cart(cartId: $cartId) {
		id
		isShippingRequired
		cartItems {
			id
			purchasePrice
			quantity
			product {
				id
				slug
				description
				name
				price
				productSpecificDiscount
				productUnit
				isDigitalProduct
			}
			attributes {
				name
				selectedValue
			}
			variation {
				name
				price
				id
				sku
				stock
			}
		}
	}
}
`

func (c *Client) Cart(ctx context.Context, cartID string, interceptors ...clientv2.RequestInterceptor) (*Cart, error) {
	vars := map[string]interface{}{
		"cartId": cartID,
	}

	var res Cart
	if err := c.Client.Post(ctx, "cart", CartDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CategoriesDocument = `query categories ($query: String, $page: Int!, $limit: Int!) {
	categories(search: {query:$query,filters:[]}, sort: {by:Position,direction:Desc}, pagination: {perPage:$limit,page:$page}) {
		id
		name
		slug
		description
		image
		fullImage
		productCount
		position
	}
}
`

func (c *Client) Categories(ctx context.Context, query *string, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*Categories, error) {
	vars := map[string]interface{}{
		"query": query,
		"page":  page,
		"limit": limit,
	}

	var res Categories
	if err := c.Client.Post(ctx, "categories", CategoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CategoriesByAdminDocument = `query categoriesByAdmin ($query: String, $page: Int!, $limit: Int!) {
	categoriesByAdmin(search: {query:$query,filters:[]}, sort: {by:Position,direction:Desc}, pagination: {perPage:$limit,page:$page}) {
		id
		name
		slug
		description
		image
		fullImage
		productCount
		position
		isPublished
	}
}
`

func (c *Client) CategoriesByAdmin(ctx context.Context, query *string, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*CategoriesByAdmin, error) {
	vars := map[string]interface{}{
		"query": query,
		"page":  page,
		"limit": limit,
	}

	var res CategoriesByAdmin
	if err := c.Client.Post(ctx, "categoriesByAdmin", CategoriesByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CategoryDocument = `query category ($id: String!) {
	category(id: $id) {
		id
		name
		slug
		description
		image
		fullImage
		productCount
		position
	}
}
`

func (c *Client) Category(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*Category, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res Category
	if err := c.Client.Post(ctx, "category", CategoryDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CategoryByAdminDocument = `query categoryByAdmin ($id: String!) {
	categoryByAdmin(id: $id) {
		id
		name
		slug
		description
		image
		fullImage
		productCount
		position
		isPublished
	}
}
`

func (c *Client) CategoryByAdmin(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*CategoryByAdmin, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res CategoryByAdmin
	if err := c.Client.Post(ctx, "categoryByAdmin", CategoryByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CheckDiscountDocument = `query checkDiscount ($couponCode: String!, $cartId: String!, $shippingMethodId: String) {
	checkDiscount(couponCode: $couponCode, cartId: $cartId, shippingMethodId: $shippingMethodId)
}
`

func (c *Client) CheckDiscount(ctx context.Context, couponCode string, cartID string, shippingMethodID *string, interceptors ...clientv2.RequestInterceptor) (*CheckDiscount, error) {
	vars := map[string]interface{}{
		"couponCode":       couponCode,
		"cartId":           cartID,
		"shippingMethodId": shippingMethodID,
	}

	var res CheckDiscount
	if err := c.Client.Post(ctx, "checkDiscount", CheckDiscountDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CheckDiscountByAdminDocument = `query checkDiscountByAdmin ($couponCode: String!, $cartId: String!, $shippingMethodId: String, $customerId: String) {
	checkDiscountByAdmin(couponCode: $couponCode, cartId: $cartId, shippingMethodId: $shippingMethodId, customerId: $customerId)
}
`

func (c *Client) CheckDiscountByAdmin(ctx context.Context, couponCode string, cartID string, shippingMethodID *string, customerID *string, interceptors ...clientv2.RequestInterceptor) (*CheckDiscountByAdmin, error) {
	vars := map[string]interface{}{
		"couponCode":       couponCode,
		"cartId":           cartID,
		"shippingMethodId": shippingMethodID,
		"customerId":       customerID,
	}

	var res CheckDiscountByAdmin
	if err := c.Client.Post(ctx, "checkDiscountByAdmin", CheckDiscountByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CheckDiscountForGuestsDocument = `query checkDiscountForGuests ($couponCode: String!, $cartId: String!, $shippingMethodId: String) {
	checkDiscountForGuests(couponCode: $couponCode, cartId: $cartId, shippingMethodId: $shippingMethodId)
}
`

func (c *Client) CheckDiscountForGuests(ctx context.Context, couponCode string, cartID string, shippingMethodID *string, interceptors ...clientv2.RequestInterceptor) (*CheckDiscountForGuests, error) {
	vars := map[string]interface{}{
		"couponCode":       couponCode,
		"cartId":           cartID,
		"shippingMethodId": shippingMethodID,
	}

	var res CheckDiscountForGuests
	if err := c.Client.Post(ctx, "checkDiscountForGuests", CheckDiscountForGuestsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CheckPaymentProcessingFeeDocument = `query checkPaymentProcessingFee ($cartId: String!, $paymentMethodId: String!, $shippingMethodId: String) {
	checkPaymentProcessingFee(cartId: $cartId, paymentMethodId: $paymentMethodId, shippingMethodId: $shippingMethodId)
}
`

func (c *Client) CheckPaymentProcessingFee(ctx context.Context, cartID string, paymentMethodID string, shippingMethodID *string, interceptors ...clientv2.RequestInterceptor) (*CheckPaymentProcessingFee, error) {
	vars := map[string]interface{}{
		"cartId":           cartID,
		"paymentMethodId":  paymentMethodID,
		"shippingMethodId": shippingMethodID,
	}

	var res CheckPaymentProcessingFee
	if err := c.Client.Post(ctx, "checkPaymentProcessingFee", CheckPaymentProcessingFeeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CheckShippingChargeDocument = `query CheckShippingCharge ($cartId: String!, $shippingMethodId: String!) {
	checkShippingCharge(cartId: $cartId, shippingMethodId: $shippingMethodId)
}
`

func (c *Client) CheckShippingCharge(ctx context.Context, cartID string, shippingMethodID string, interceptors ...clientv2.RequestInterceptor) (*CheckShippingCharge, error) {
	vars := map[string]interface{}{
		"cartId":           cartID,
		"shippingMethodId": shippingMethodID,
	}

	var res CheckShippingCharge
	if err := c.Client.Post(ctx, "CheckShippingCharge", CheckShippingChargeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CollectionDocument = `query collection ($id: String!) {
	collection(id: $id) {
		id
		name
		slug
		description
		fullImage
		image
		position
		productCount
	}
}
`

func (c *Client) Collection(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*Collection, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res Collection
	if err := c.Client.Post(ctx, "collection", CollectionDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CollectionByAdminDocument = `query collectionByAdmin ($id: String!) {
	collectionByAdmin(id: $id) {
		id
		name
		slug
		description
		fullImage
		image
		position
		productCount
		isPublished
	}
}
`

func (c *Client) CollectionByAdmin(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*CollectionByAdmin, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res CollectionByAdmin
	if err := c.Client.Post(ctx, "collectionByAdmin", CollectionByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CollectionsDocument = `query collections ($query: String, $page: Int!, $limit: Int!) {
	collections(search: {query:$query,filters:[]}, sort: {by:Position,direction:Desc}, pagination: {perPage:$limit,page:$page}) {
		id
		name
		slug
		description
		fullImage
		image
		position
		productCount
	}
}
`

func (c *Client) Collections(ctx context.Context, query *string, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*Collections, error) {
	vars := map[string]interface{}{
		"query": query,
		"page":  page,
		"limit": limit,
	}

	var res Collections
	if err := c.Client.Post(ctx, "collections", CollectionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CollectionsByAdminDocument = `query collectionsByAdmin ($query: String, $page: Int!, $limit: Int!) {
	collectionsByAdmin(search: {query:$query,filters:[]}, sort: {by:Position,direction:Desc}, pagination: {perPage:$limit,page:$page}) {
		id
		name
		slug
		description
		fullImage
		image
		position
		productCount
		isPublished
	}
}
`

func (c *Client) CollectionsByAdmin(ctx context.Context, query *string, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*CollectionsByAdmin, error) {
	vars := map[string]interface{}{
		"query": query,
		"page":  page,
		"limit": limit,
	}

	var res CollectionsByAdmin
	if err := c.Client.Post(ctx, "collectionsByAdmin", CollectionsByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CouponCodeDocument = `query couponCode ($id: String!) {
	couponCode(id: $id) {
		id
		updatedAt
		createdAt
		description
		image
		amount
		code
		customers {
			email
			firstName
			lastName
			profilePictureFull
			profilePicture
			phone
		}
		discountType
		endAt
		isActive
		isFlatDiscount
		isForNewUsersOnly
		isUserSpecific
		maxDiscountAmount
		maxUsage
		maxUsagePerUser
		minOrderAmount
		startAt
	}
}
`

func (c *Client) CouponCode(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*CouponCode, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res CouponCode
	if err := c.Client.Post(ctx, "couponCode", CouponCodeDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CouponCodesDocument = `query couponCodes ($search: Search!, $sort: Sort, $pagination: Pagination!) {
	couponCodes(search: $search, sort: $sort, pagination: $pagination) {
		id
		updatedAt
		createdAt
		description
		image
		amount
		code
		customers {
			email
			firstName
			lastName
			profilePictureFull
			profilePicture
			phone
		}
		discountType
		endAt
		isActive
		isFlatDiscount
		isForNewUsersOnly
		isUserSpecific
		maxDiscountAmount
		maxUsage
		maxUsagePerUser
		minOrderAmount
		startAt
	}
}
`

func (c *Client) CouponCodes(ctx context.Context, search models.Search, sort *models.Sort, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*CouponCodes, error) {
	vars := map[string]interface{}{
		"search":     search,
		"sort":       sort,
		"pagination": pagination,
	}

	var res CouponCodes
	if err := c.Client.Post(ctx, "couponCodes", CouponCodesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CustomerProfileDocument = `query customerProfile {
	customerProfile {
		phone
		profilePicture
		profilePictureFull
		lastName
		firstName
		email
	}
}
`

func (c *Client) CustomerProfile(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*CustomerProfile, error) {
	vars := map[string]interface{}{}

	var res CustomerProfile
	if err := c.Client.Post(ctx, "customerProfile", CustomerProfileDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CustomersByAdminDocument = `query customersByAdmin ($params: Search!, $sort: Sort!, $pagination: Pagination!) {
	customersByAdmin(params: $params, sort: $sort, pagination: $pagination) {
		phone
		profilePicture
		profilePictureFull
		lastName
		firstName
		email
	}
}
`

func (c *Client) CustomersByAdmin(ctx context.Context, params models.Search, sort models.Sort, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*CustomersByAdmin, error) {
	vars := map[string]interface{}{
		"params":     params,
		"sort":       sort,
		"pagination": pagination,
	}

	var res CustomersByAdmin
	if err := c.Client.Post(ctx, "customersByAdmin", CustomersByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const LocationByIDDocument = `query locationById ($id: String!) {
	locationById(id: $id) {
		id
		name
		shortCode
	}
}
`

func (c *Client) LocationByID(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*LocationByID, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res LocationByID
	if err := c.Client.Post(ctx, "locationById", LocationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const LocationsDocument = `query locations {
	locations {
		id
		name
		shortCode
	}
}
`

func (c *Client) Locations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*Locations, error) {
	vars := map[string]interface{}{}

	var res Locations
	if err := c.Client.Post(ctx, "locations", LocationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const MediaByAdminDocument = `query mediaByAdmin ($sort: Sort!, $pagination: Pagination) {
	mediaByAdmin(sort: $sort, pagination: $pagination) {
		path
		permanentUrl
		url
	}
}
`

func (c *Client) MediaByAdmin(ctx context.Context, sort models.Sort, pagination *models.Pagination, interceptors ...clientv2.RequestInterceptor) (*MediaByAdmin, error) {
	vars := map[string]interface{}{
		"sort":       sort,
		"pagination": pagination,
	}

	var res MediaByAdmin
	if err := c.Client.Post(ctx, "mediaByAdmin", MediaByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const OrderDocument = `query order ($hash: String!) {
	order(hash: $hash) {
		id
		hash
		shippingCharge
		paymentProcessingFee
		subtotal
		grandTotal
		discountedAmount
		status
		paymentStatus
		createdAt
		updatedAt
		billingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		shippingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		cart {
			id
			isShippingRequired
			cartItems {
				id
				product {
					id
					name
					slug
					fullImages
				}
				quantity
				purchasePrice
				attributes {
					name
					selectedValue
				}
				variation {
					id
					name
					price
					sku
					stock
				}
			}
		}
		customer {
			email
			phone
			firstName
			lastName
			profilePicture
		}
		paymentMethod {
			id
			displayName
			currencyName
			currencySymbol
			isDigitalPayment
		}
		shippingMethod {
			id
			displayName
			deliveryCharge
			deliveryTimeInDays
			WeightUnit
			isFlat
			isActive
		}
		couponCode {
			code
			discountType
		}
		payments {
			isPaid
			payableAmount
			gatewayName
		}
	}
}
`

func (c *Client) Order(ctx context.Context, hash string, interceptors ...clientv2.RequestInterceptor) (*Order, error) {
	vars := map[string]interface{}{
		"hash": hash,
	}

	var res Order
	if err := c.Client.Post(ctx, "order", OrderDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const OrderByAdminDocument = `query orderByAdmin ($id: String!) {
	orderByAdmin(id: $id) {
		id
		hash
		shippingCharge
		paymentProcessingFee
		subtotal
		grandTotal
		discountedAmount
		status
		paymentStatus
		createdAt
		updatedAt
		billingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		shippingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		cart {
			id
			isShippingRequired
			cartItems {
				id
				product {
					id
					name
					slug
					fullImages
				}
				quantity
				purchasePrice
				attributes {
					name
					selectedValue
				}
				variation {
					id
					name
					price
					sku
					stock
				}
			}
		}
		customer {
			email
			phone
			firstName
			lastName
			profilePicture
		}
		paymentMethod {
			id
			displayName
			currencyName
			currencySymbol
			isDigitalPayment
		}
		shippingMethod {
			id
			displayName
			deliveryCharge
			deliveryTimeInDays
			WeightUnit
			isFlat
			isActive
		}
		couponCode {
			code
			discountType
		}
		payments {
			isPaid
			payableAmount
			gatewayName
		}
	}
}
`

func (c *Client) OrderByAdmin(ctx context.Context, id string, interceptors ...clientv2.RequestInterceptor) (*OrderByAdmin, error) {
	vars := map[string]interface{}{
		"id": id,
	}

	var res OrderByAdmin
	if err := c.Client.Post(ctx, "orderByAdmin", OrderByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const OrderByCustomerEmailDocument = `query orderByCustomerEmail ($hash: String!, $email: String!) {
	orderByCustomerEmail(hash: $hash, email: $email) {
		id
		hash
		shippingCharge
		paymentProcessingFee
		subtotal
		grandTotal
		discountedAmount
		status
		paymentStatus
		createdAt
		updatedAt
		billingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		shippingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		cart {
			id
			isShippingRequired
			cartItems {
				id
				product {
					id
					name
					slug
					fullImages
				}
				quantity
				purchasePrice
				attributes {
					name
					selectedValue
				}
				variation {
					id
					name
					price
					sku
					stock
				}
			}
		}
		customer {
			email
			phone
			firstName
			lastName
			profilePicture
		}
		paymentMethod {
			id
			displayName
			currencyName
			currencySymbol
			isDigitalPayment
		}
		shippingMethod {
			id
			displayName
			deliveryCharge
			deliveryTimeInDays
			WeightUnit
			isFlat
			isActive
		}
		couponCode {
			code
			discountType
		}
		payments {
			isPaid
			payableAmount
			gatewayName
		}
	}
}
`

func (c *Client) OrderByCustomerEmail(ctx context.Context, hash string, email string, interceptors ...clientv2.RequestInterceptor) (*OrderByCustomerEmail, error) {
	vars := map[string]interface{}{
		"hash":  hash,
		"email": email,
	}

	var res OrderByCustomerEmail
	if err := c.Client.Post(ctx, "orderByCustomerEmail", OrderByCustomerEmailDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const OrdersDocument = `query orders ($params: POrderSearchParams!, $sort: Sort!, $pagination: Pagination!) {
	orders(params: $params, sort: $sort, pagination: $pagination) {
		id
		hash
		shippingCharge
		paymentProcessingFee
		subtotal
		grandTotal
		discountedAmount
		status
		paymentStatus
		createdAt
		updatedAt
		billingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		shippingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		cart {
			id
			isShippingRequired
			cartItems {
				id
				product {
					id
					name
					slug
					fullImages
				}
				quantity
				purchasePrice
				attributes {
					name
					selectedValue
				}
				variation {
					id
					name
					price
					sku
					stock
				}
			}
		}
		customer {
			email
			phone
			firstName
			lastName
			profilePicture
		}
		paymentMethod {
			id
			displayName
			currencyName
			currencySymbol
			isDigitalPayment
		}
		shippingMethod {
			id
			displayName
			deliveryCharge
			deliveryTimeInDays
			WeightUnit
			isFlat
			isActive
		}
		couponCode {
			code
			discountType
		}
		payments {
			isPaid
			payableAmount
			gatewayName
		}
	}
}
`

func (c *Client) Orders(ctx context.Context, params models.POrderSearchParams, sort models.Sort, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*Orders, error) {
	vars := map[string]interface{}{
		"params":     params,
		"sort":       sort,
		"pagination": pagination,
	}

	var res Orders
	if err := c.Client.Post(ctx, "orders", OrdersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const OrdersByAdminDocument = `query ordersByAdmin ($params: OrderSearchParams!, $sort: Sort!, $pagination: Pagination!) {
	ordersByAdmin(params: $params, sort: $sort, pagination: $pagination) {
		id
		hash
		shippingCharge
		paymentProcessingFee
		subtotal
		grandTotal
		discountedAmount
		status
		paymentStatus
		createdAt
		updatedAt
		billingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		shippingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		cart {
			id
			isShippingRequired
			cartItems {
				id
				product {
					id
					name
					slug
					fullImages
				}
				quantity
				purchasePrice
				attributes {
					name
					selectedValue
				}
				variation {
					id
					name
					price
					sku
					stock
				}
			}
		}
		customer {
			email
			phone
			firstName
			lastName
			profilePicture
		}
		paymentMethod {
			id
			displayName
			currencyName
			currencySymbol
			isDigitalPayment
		}
		shippingMethod {
			id
			displayName
			deliveryCharge
			deliveryTimeInDays
			WeightUnit
			isFlat
			isActive
		}
		couponCode {
			code
			discountType
		}
		payments {
			isPaid
			payableAmount
			gatewayName
		}
	}
}
`

func (c *Client) OrdersByAdmin(ctx context.Context, params models.OrderSearchParams, sort models.Sort, pagination models.Pagination, interceptors ...clientv2.RequestInterceptor) (*OrdersByAdmin, error) {
	vars := map[string]interface{}{
		"params":     params,
		"sort":       sort,
		"pagination": pagination,
	}

	var res OrdersByAdmin
	if err := c.Client.Post(ctx, "ordersByAdmin", OrdersByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const PaymentMethodsDocument = `query PaymentMethods {
	paymentMethods {
		id
		displayName
		currencyName
		currencySymbol
		isDigitalPayment
	}
}
`

func (c *Client) PaymentMethods(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*PaymentMethods, error) {
	vars := map[string]interface{}{}

	var res PaymentMethods
	if err := c.Client.Post(ctx, "PaymentMethods", PaymentMethodsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ProductDocument = `query product ($productId: String!) {
	product(productId: $productId) {
		id
		name
		slug
		description
		sku
		stock
		maxItemPerOrder
		price
		fullImages
		isDigitalProduct
		views
		createdAt
		productUnit
		updatedAt
		category {
			id
			name
			slug
			description
			fullImage
		}
		attributes {
			id
			name
			values
			isRequired
		}
		variations {
			id
			stock
			sku
			price
			name
		}
		productSpecificDiscount
		digitalItems {
			id
			description
			title
			position
			contents {
				position
				title
				id
				updatedAt
				contentText
				contentType
				contentUrl
				isTrialAllowed
			}
		}
	}
}
`

func (c *Client) Product(ctx context.Context, productID string, interceptors ...clientv2.RequestInterceptor) (*Product, error) {
	vars := map[string]interface{}{
		"productId": productID,
	}

	var res Product
	if err := c.Client.Post(ctx, "product", ProductDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ProductByAdminDocument = `query productByAdmin ($productId: String!) {
	productByAdmin(productId: $productId) {
		id
		name
		slug
		description
		sku
		stock
		maxItemPerOrder
		price
		fullImages
		isDigitalProduct
		views
		createdAt
		productUnit
		updatedAt
		category {
			id
			name
			slug
			description
			fullImage
		}
		attributes {
			id
			name
			values
			isRequired
		}
		variations {
			id
			stock
			sku
			price
			name
		}
		productSpecificDiscount
		digitalItems {
			id
			description
			title
			position
			contents {
				position
				title
				id
				updatedAt
				contentText
				contentType
				contentUrl
				isTrialAllowed
			}
		}
	}
}
`

func (c *Client) ProductByAdmin(ctx context.Context, productID string, interceptors ...clientv2.RequestInterceptor) (*ProductByAdmin, error) {
	vars := map[string]interface{}{
		"productId": productID,
	}

	var res ProductByAdmin
	if err := c.Client.Post(ctx, "productByAdmin", ProductByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ProductBySlugDocument = `query productBySlug ($productSlug: String!) {
	productBySlug(productSlug: $productSlug) {
		id
		name
		slug
		description
		sku
		stock
		maxItemPerOrder
		price
		fullImages
		isDigitalProduct
		views
		createdAt
		productUnit
		updatedAt
		category {
			id
			name
			slug
			description
			fullImage
		}
		attributes {
			id
			name
			values
			isRequired
		}
		variations {
			id
			stock
			sku
			price
			name
		}
		productSpecificDiscount
		digitalItems {
			id
			description
			title
			position
			contents {
				position
				title
				id
				updatedAt
				contentText
				contentType
				contentUrl
				isTrialAllowed
			}
		}
	}
}
`

func (c *Client) ProductBySlug(ctx context.Context, productSlug string, interceptors ...clientv2.RequestInterceptor) (*ProductBySlug, error) {
	vars := map[string]interface{}{
		"productSlug": productSlug,
	}

	var res ProductBySlug
	if err := c.Client.Post(ctx, "productBySlug", ProductBySlugDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ProductSearchDocument = `query productSearch ($search: Search!, $page: Int!, $limit: Int!) {
	productSearch(search: $search, sort: {by:CreatedAt,direction:Desc}, pagination: {perPage:$limit,page:$page}) {
		id
		name
		slug
		description
		sku
		stock
		maxItemPerOrder
		price
		fullImages
		isDigitalProduct
		views
		createdAt
		productUnit
		updatedAt
		category {
			id
			name
			slug
			description
			fullImage
		}
		attributes {
			id
			name
			values
			isRequired
		}
		variations {
			id
			stock
			sku
			price
			name
		}
		productSpecificDiscount
		digitalItems {
			id
			description
			title
			position
			contents {
				position
				title
				id
				updatedAt
				contentText
				contentType
				contentUrl
				isTrialAllowed
			}
		}
	}
}
`

func (c *Client) ProductSearch(ctx context.Context, search models.Search, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*ProductSearch, error) {
	vars := map[string]interface{}{
		"search": search,
		"page":   page,
		"limit":  limit,
	}

	var res ProductSearch
	if err := c.Client.Post(ctx, "productSearch", ProductSearchDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ProductSearchByAdminDocument = `query productSearchByAdmin ($search: Search!, $page: Int!, $limit: Int!) {
	productSearchByAdmin(search: $search, sort: {by:CreatedAt,direction:Desc}, pagination: {perPage:$limit,page:$page}) {
		id
		name
		slug
		description
		sku
		stock
		maxItemPerOrder
		price
		fullImages
		isDigitalProduct
		views
		createdAt
		productUnit
		updatedAt
		category {
			id
			name
			slug
			description
			fullImage
		}
		attributes {
			id
			name
			values
			isRequired
		}
		variations {
			id
			stock
			sku
			price
			name
		}
		productSpecificDiscount
		digitalItems {
			id
			description
			title
			position
			contents {
				position
				title
				id
				updatedAt
				contentText
				contentType
				contentUrl
				isTrialAllowed
			}
		}
	}
}
`

func (c *Client) ProductSearchByAdmin(ctx context.Context, search models.Search, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*ProductSearchByAdmin, error) {
	vars := map[string]interface{}{
		"search": search,
		"page":   page,
		"limit":  limit,
	}

	var res ProductSearchByAdmin
	if err := c.Client.Post(ctx, "productSearchByAdmin", ProductSearchByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ProductsDocument = `query products ($search: Search!, $page: Int!, $limit: Int!) {
	products(search: $search, sort: {by:CreatedAt,direction:Desc}, pagination: {perPage:$limit,page:$page}) {
		id
		name
		slug
		description
		sku
		stock
		maxItemPerOrder
		price
		fullImages
		isDigitalProduct
		views
		createdAt
		productUnit
		updatedAt
		category {
			id
			name
			slug
			description
			fullImage
		}
		attributes {
			id
			name
			values
			isRequired
		}
		variations {
			id
			stock
			sku
			price
			name
		}
		productSpecificDiscount
		digitalItems {
			id
			description
			title
			position
			contents {
				position
				title
				id
				updatedAt
				contentText
				contentType
				contentUrl
				isTrialAllowed
			}
		}
	}
}
`

func (c *Client) Products(ctx context.Context, search models.Search, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*Products, error) {
	vars := map[string]interface{}{
		"search": search,
		"page":   page,
		"limit":  limit,
	}

	var res Products
	if err := c.Client.Post(ctx, "products", ProductsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ProductsByAdminDocument = `query productsByAdmin ($search: Search!, $page: Int!, $limit: Int!) {
	productsByAdmin(search: $search, sort: {by:CreatedAt,direction:Desc}, pagination: {perPage:$limit,page:$page}) {
		id
		name
		slug
		description
		sku
		stock
		maxItemPerOrder
		price
		fullImages
		isDigitalProduct
		views
		createdAt
		productUnit
		updatedAt
		category {
			id
			name
			slug
			description
			fullImage
		}
		attributes {
			id
			name
			values
			isRequired
		}
		variations {
			id
			stock
			sku
			price
			name
		}
		productSpecificDiscount
		digitalItems {
			id
			description
			title
			position
			contents {
				position
				title
				id
				updatedAt
				contentText
				contentType
				contentUrl
				isTrialAllowed
			}
		}
	}
}
`

func (c *Client) ProductsByAdmin(ctx context.Context, search models.Search, page int, limit int, interceptors ...clientv2.RequestInterceptor) (*ProductsByAdmin, error) {
	vars := map[string]interface{}{
		"search": search,
		"page":   page,
		"limit":  limit,
	}

	var res ProductsByAdmin
	if err := c.Client.Post(ctx, "productsByAdmin", ProductsByAdminDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const ShippingMethodsDocument = `query ShippingMethods {
	shippingMethods {
		id
		displayName
		deliveryCharge
		deliveryTimeInDays
		WeightUnit
		isFlat
		isActive
	}
}
`

func (c *Client) ShippingMethods(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ShippingMethods, error) {
	vars := map[string]interface{}{}

	var res ShippingMethods
	if err := c.Client.Post(ctx, "ShippingMethods", ShippingMethodsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const StoreBySecretDocument = `query StoreBySecret {
	storeBySecret {
		name
		title
		linklyThemeColor
		description
		tags
		metaName
		metaDescription
		metaTags
		logo
		logoPath
		favicon
		faviconPath
		bannerImage
		bannerImagePath
		isOpen
		currency
		website
		supportEmail
		supportPhone
		createdAt
		updatedAt
		street
		streetOptional
		city
		state
		postcode
		location {
			id
			name
			shortCode
		}
	}
}
`

func (c *Client) StoreBySecret(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*StoreBySecret, error) {
	vars := map[string]interface{}{}

	var res StoreBySecret
	if err := c.Client.Post(ctx, "StoreBySecret", StoreBySecretDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const OrderGuestCheckoutDocument = `mutation OrderGuestCheckout ($params: GuestCheckoutPlaceOrderParams!) {
	orderGuestCheckout(params: $params) {
		id
		hash
		shippingCharge
		paymentProcessingFee
		subtotal
		grandTotal
		discountedAmount
		status
		paymentStatus
		createdAt
		updatedAt
		billingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		shippingAddress {
			id
			street
			streetTwo
			city
			state
			postcode
			email
			phone
			location {
				id
				name
				shortCode
			}
		}
		cart {
			id
			isShippingRequired
			cartItems {
				id
				product {
					id
					name
					slug
					fullImages
				}
				quantity
				purchasePrice
				attributes {
					name
					selectedValue
				}
				variation {
					id
					name
					price
					sku
					stock
				}
			}
		}
		customer {
			email
			phone
			firstName
			lastName
			profilePicture
		}
		paymentMethod {
			id
			displayName
			currencyName
			currencySymbol
			isDigitalPayment
		}
		shippingMethod {
			id
			displayName
			deliveryCharge
			deliveryTimeInDays
			WeightUnit
			isFlat
			isActive
		}
		couponCode {
			code
			discountType
		}
		payments {
			isPaid
			payableAmount
			gatewayName
		}
	}
}
`

func (c *Client) OrderGuestCheckout(ctx context.Context, params models.GuestCheckoutPlaceOrderParams, interceptors ...clientv2.RequestInterceptor) (*OrderGuestCheckout, error) {
	vars := map[string]interface{}{
		"params": params,
	}

	var res OrderGuestCheckout
	if err := c.Client.Post(ctx, "OrderGuestCheckout", OrderGuestCheckoutDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const OrderGeneratePaymentNonceForGuestDocument = `mutation orderGeneratePaymentNonceForGuest ($orderId: String!, $customerEmail: String!, $overrides: PaymentRequestOverrides) {
	orderGeneratePaymentNonceForGuest(orderId: $orderId, customerEmail: $customerEmail, overrides: $overrides) {
		PaymentGatewayName
		Nonce
		StripePublishableKey
	}
}
`

func (c *Client) OrderGeneratePaymentNonceForGuest(ctx context.Context, orderID string, customerEmail string, overrides *models.PaymentRequestOverrides, interceptors ...clientv2.RequestInterceptor) (*OrderGeneratePaymentNonceForGuest, error) {
	vars := map[string]interface{}{
		"orderId":       orderID,
		"customerEmail": customerEmail,
		"overrides":     overrides,
	}

	var res OrderGeneratePaymentNonceForGuest
	if err := c.Client.Post(ctx, "orderGeneratePaymentNonceForGuest", OrderGeneratePaymentNonceForGuestDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const NewCartDocument = `mutation newCart ($params: NewCartParams!) {
	newCart(params: $params) {
		id
		isShippingRequired
		cartItems {
			id
			product {
				id
				name
				slug
				description
				sku
				price
				stock
				images
				fullImages
				isDigitalProduct
				productSpecificDiscount
				views
				productUnit
				createdAt
				updatedAt
				attributes {
					id
					name
					values
					isRequired
				}
			}
			quantity
			purchasePrice
			attributes {
				name
				selectedValue
			}
			variation {
				id
				name
				price
				sku
				stock
			}
		}
	}
}
`

func (c *Client) NewCart(ctx context.Context, params models.NewCartParams, interceptors ...clientv2.RequestInterceptor) (*NewCart, error) {
	vars := map[string]interface{}{
		"params": params,
	}

	var res NewCart
	if err := c.Client.Post(ctx, "newCart", NewCartDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateCartDocument = `mutation updateCart ($id: String!, $params: UpdateCartParams!) {
	updateCart(id: $id, params: $params) {
		id
		isShippingRequired
		cartItems {
			id
			product {
				id
				name
				slug
				description
				sku
				price
				stock
				images
				fullImages
				isDigitalProduct
				productSpecificDiscount
				views
				productUnit
				createdAt
				updatedAt
				attributes {
					id
					name
					values
					isRequired
				}
			}
			quantity
			purchasePrice
			attributes {
				name
				selectedValue
			}
			variation {
				id
				name
				price
				sku
				stock
			}
		}
	}
}
`

func (c *Client) UpdateCart(ctx context.Context, id string, params models.UpdateCartParams, interceptors ...clientv2.RequestInterceptor) (*UpdateCart, error) {
	vars := map[string]interface{}{
		"id":     id,
		"params": params,
	}

	var res UpdateCart
	if err := c.Client.Post(ctx, "updateCart", UpdateCartDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}
