// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type AddAttributeParams struct {
	Name       string   `json:"name"`
	Values     []string `json:"values"`
	IsRequired bool     `json:"isRequired"`
}

type AddAttributeResponse struct {
	Attribute ProductAttribute `json:"attribute"`
}

type AddAttributeToProductParams struct {
	ProductID string             `json:"productId"`
	Attribute AddAttributeParams `json:"attribute"`
}

type AddBlogPostComment struct {
	Content string `json:"content"`
}

type AddBlogPostCommentResponse struct {
	Comment BlogPostComment `json:"comment"`
}

type AddCouponCodeResponse struct {
	Coupon CouponCode `json:"coupon"`
}

type AddDigitalContentParams struct {
	Title          string             `json:"title"`
	ContentType    DigitalContentType `json:"contentType"`
	IsTrialAllowed bool               `json:"isTrialAllowed"`
	ContentText    *string            `json:"contentText,omitempty"`
	ContentFile    *graphql.Upload    `json:"contentFile,omitempty"`
	Position       *int               `json:"position,omitempty"`
}

type AddDigitalItemParams struct {
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	Position    *int    `json:"position,omitempty"`
}

type AddFeedbackParams struct {
	Rating  int     `json:"rating"`
	Comment *string `json:"comment,omitempty"`
}

type AddProductsToCollectionParams struct {
	CollectionID string   `json:"collectionId"`
	ProductIds   []string `json:"productIds"`
}

type AddVariationParams struct {
	Name       string      `json:"name"`
	Price      int         `json:"price"`
	Cost       int         `json:"cost"`
	Sku        *string     `json:"sku,omitempty"`
	Stock      *int        `json:"stock,omitempty"`
	Weight     *float64    `json:"weight,omitempty"`
	WeightUnit *WeightUnit `json:"weightUnit,omitempty"`
}

type AddVariationResponse struct {
	Variation ProductVariation `json:"variation"`
}

type AddVariationToProductParams struct {
	ProductID string             `json:"productId"`
	Variation AddVariationParams `json:"variation"`
}

type Address struct {
	ID        string   `json:"id"`
	Street    string   `json:"street"`
	StreetTwo *string  `json:"streetTwo,omitempty"`
	City      string   `json:"city"`
	State     *string  `json:"state,omitempty"`
	Postcode  string   `json:"postcode"`
	Email     *string  `json:"email,omitempty"`
	Phone     *string  `json:"phone,omitempty"`
	Location  Location `json:"location"`
}

type AddressParams struct {
	Street     string  `json:"street"`
	StreetTwo  *string `json:"streetTwo,omitempty"`
	City       string  `json:"city"`
	State      *string `json:"state,omitempty"`
	Postcode   string  `json:"postcode"`
	Email      *string `json:"email,omitempty"`
	Phone      *string `json:"phone,omitempty"`
	LocationID string  `json:"locationId"`
}

type BlogPost struct {
	ID              string             `json:"id"`
	Title           string             `json:"title"`
	Slug            *string            `json:"slug,omitempty"`
	BannerImage     *string            `json:"bannerImage,omitempty"`
	BannerImageFull *string            `json:"bannerImageFull,omitempty"`
	Content         string             `json:"content"`
	Tags            []string           `json:"tags,omitempty"`
	IsPublished     bool               `json:"isPublished"`
	IsFeatured      bool               `json:"isFeatured"`
	Views           int                `json:"views"`
	Favourites      int                `json:"favourites"`
	Comments        []*BlogPostComment `json:"comments"`
	CreatedAt       string             `json:"createdAt"`
	UpdatedAt       *string            `json:"updatedAt,omitempty"`
}

type BlogPostComment struct {
	ID        string   `json:"id"`
	Content   string   `json:"content"`
	Customer  Customer `json:"customer"`
	CreatedAt string   `json:"createdAt"`
	UpdatedAt *string  `json:"updatedAt,omitempty"`
}

type Cart struct {
	ID                 string      `json:"id"`
	IsShippingRequired bool        `json:"isShippingRequired"`
	CartItems          []*CartItem `json:"cartItems"`
}

type CartItem struct {
	ID               int                     `json:"id"`
	Product          Product                 `json:"product"`
	Quantity         int                     `json:"quantity"`
	PurchasePrice    int                     `json:"purchasePrice"`
	PurchaseTimeCost int                     `json:"purchaseTimeCost"`
	Attributes       []*CartProductAttribute `json:"attributes"`
	Variation        *ProductVariation       `json:"variation,omitempty"`
}

type CartItemAttributeParams struct {
	ID                     string `json:"Id"`
	AttributeSelectedValue string `json:"attributeSelectedValue"`
}

type CartItemParams struct {
	ProductID          string                     `json:"productId"`
	ProductAttributes  []*CartItemAttributeParams `json:"productAttributes,omitempty"`
	ProductVariationID *string                    `json:"productVariationId,omitempty"`
	Quantity           int                        `json:"quantity"`
}

type CartProductAttribute struct {
	Name          string `json:"name"`
	SelectedValue string `json:"selectedValue"`
}

type Category struct {
	ID           string  `json:"id"`
	Name         string  `json:"name"`
	Slug         string  `json:"slug"`
	IsPublished  bool    `json:"isPublished"`
	Description  *string `json:"description,omitempty"`
	Image        *string `json:"image,omitempty"`
	FullImage    *string `json:"fullImage,omitempty"`
	CreatedAt    string  `json:"createdAt"`
	UpdatedAt    *string `json:"updatedAt,omitempty"`
	ProductCount int     `json:"productCount"`
	Position     int     `json:"position"`
}

type Collection struct {
	ID           string     `json:"id"`
	Name         string     `json:"name"`
	Slug         string     `json:"slug"`
	IsPublished  bool       `json:"isPublished"`
	Description  *string    `json:"description,omitempty"`
	Image        *string    `json:"image,omitempty"`
	FullImage    *string    `json:"fullImage,omitempty"`
	CreatedAt    string     `json:"createdAt"`
	UpdatedAt    *string    `json:"updatedAt,omitempty"`
	Products     []*Product `json:"products,omitempty"`
	ProductCount int        `json:"productCount"`
	Position     int        `json:"position"`
}

type CouponCode struct {
	ID                string       `json:"id"`
	Code              string       `json:"code"`
	Amount            int          `json:"amount"`
	MinOrderAmount    *int         `json:"minOrderAmount,omitempty"`
	MaxDiscountAmount *int         `json:"maxDiscountAmount,omitempty"`
	IsActive          bool         `json:"isActive"`
	IsFlatDiscount    bool         `json:"isFlatDiscount"`
	IsForNewUsersOnly bool         `json:"isForNewUsersOnly"`
	IsUserSpecific    bool         `json:"isUserSpecific"`
	MaxUsage          *int         `json:"maxUsage,omitempty"`
	MaxUsagePerUser   *int         `json:"maxUsagePerUser,omitempty"`
	DiscountType      DiscountType `json:"discountType"`
	Description       *string      `json:"description,omitempty"`
	Image             *string      `json:"image,omitempty"`
	StartAt           *string      `json:"startAt,omitempty"`
	EndAt             *string      `json:"endAt,omitempty"`
	CreatedAt         string       `json:"createdAt"`
	UpdatedAt         *string      `json:"updatedAt,omitempty"`
	Customers         []*Customer  `json:"customers,omitempty"`
}

type CreateBlogPostResponse struct {
	Post BlogPost `json:"post"`
}

type CreateCartResponse struct {
	Cart Cart `json:"cart"`
}

type CreateCategoryResponse struct {
	Category Category `json:"category"`
}

type CreateCollectionResponse struct {
	Collection Collection `json:"collection"`
}

type CreateProductResponse struct {
	Product Product `json:"product"`
}

type CreateShippingMethodResponse struct {
	Method ShippingMethod `json:"method"`
}

type CreateShopResponse struct {
	Shop Store `json:"shop"`
}

type Customer struct {
	Email              string  `json:"email"`
	Phone              *string `json:"phone,omitempty"`
	FirstName          string  `json:"firstName"`
	LastName           string  `json:"lastName"`
	ProfilePicture     *string `json:"profilePicture,omitempty"`
	ProfilePictureFull *string `json:"profilePictureFull,omitempty"`
}

type CustomerChangePasswordParams struct {
	OldPassword string `json:"oldPassword"`
	NewPassword string `json:"newPassword"`
}

type CustomerResetPasswordParams struct {
	Email       string `json:"email"`
	ResetToken  string `json:"resetToken"`
	NewPassword string `json:"newPassword"`
}

type CustomerResetPasswordRequestParams struct {
	Email string `json:"email"`
}

type DigitalContent struct {
	ID             string             `json:"id"`
	Title          string             `json:"title"`
	ContentType    DigitalContentType `json:"contentType"`
	IsTrialAllowed bool               `json:"isTrialAllowed"`
	ContentText    *string            `json:"contentText,omitempty"`
	ContentURL     *string            `json:"contentUrl,omitempty"`
	UpdatedAt      string             `json:"updatedAt"`
	Position       int                `json:"position"`
}

type DigitalItem struct {
	ID          string            `json:"id"`
	Title       string            `json:"title"`
	Description *string           `json:"description,omitempty"`
	Position    int               `json:"position"`
	Contents    []*DigitalContent `json:"contents"`
}

type Feedback struct {
	Rating    int     `json:"rating"`
	Comment   *string `json:"comment,omitempty"`
	CreatedAt string  `json:"createdAt"`
}

type FilterQuery struct {
	Key   FilterKey `json:"key"`
	Value string    `json:"value"`
}

type GeneratePaymentNoneResponse struct {
	PaymentGatewayName   string  `json:"PaymentGatewayName"`
	Nonce                string  `json:"Nonce"`
	StripePublishableKey *string `json:"StripePublishableKey,omitempty"`
}

type GenerateShopSecretResponse struct {
	Secret StoreSecret `json:"secret"`
}

type GetAdminBlogPostResponse struct {
	Post BlogPost `json:"post"`
}

type GetAdminCategoryByIDResponse struct {
	Category Category `json:"category"`
}

type GetAdminCollectionByIDResponse struct {
	Collection Collection `json:"collection"`
}

type GetAdminProductByIDResponse struct {
	Product Product `json:"product"`
}

type GetBlogPostResponse struct {
	Post PBlogPost `json:"post"`
}

type GetCartByIDResponse struct {
	Cart Cart `json:"cart"`
}

type GetCategoryByIDResponse struct {
	Category PCategory `json:"category"`
}

type GetCollectionByIDResponse struct {
	Collection PCollection `json:"collection"`
}

type GetCouponCodeByCodeResponse struct {
	Coupon CouponCode `json:"coupon"`
}

type GetCouponCodeByIDResponse struct {
	Coupon CouponCode `json:"coupon"`
}

type GetCustomerOrderByHashResponse struct {
	Order Order `json:"order"`
}

type GetCustomerOrderByIDResponse struct {
	Order Order `json:"order"`
}

type GetProductByIDResponse struct {
	Product PProduct `json:"product"`
}

type GetShippingMethodByIDResponse struct {
	Method ShippingMethod `json:"method"`
}

type GuestCheckoutPlaceOrderParams struct {
	CartID           string         `json:"cartId"`
	BillingAddress   AddressParams  `json:"billingAddress"`
	ShippingAddress  *AddressParams `json:"shippingAddress,omitempty"`
	PaymentMethodID  *string        `json:"paymentMethodId,omitempty"`
	ShippingMethodID *string        `json:"shippingMethodId,omitempty"`
	CouponCode       *string        `json:"couponCode,omitempty"`
	FirstName        string         `json:"firstName"`
	LastName         string         `json:"lastName"`
	Email            string         `json:"email"`
	Note             *string        `json:"note,omitempty"`
}

type IsDigitalProductPurchasedByCustomerResp struct {
	IsPurchased  bool   `json:"isPurchased"`
	OrderHash    string `json:"orderHash"`
	PurchaseDate string `json:"purchaseDate"`
}

type ListAdminBlogPostResponse struct {
	Posts []*BlogPost `json:"posts"`
}

type ListAdminCategoryResponse struct {
	Categories []*Category `json:"categories"`
}

type ListAdminCollectionResponse struct {
	Collections []*Collection `json:"collections"`
}

type ListAdminProductAttributeResponse struct {
	Attributes []*ProductAttribute `json:"attributes"`
}

type ListAdminProductResponse struct {
	Products []*Product `json:"products"`
}

type ListAdminProductVariationResponse struct {
	Variations []*ProductVariation `json:"variations"`
}

type ListBlogPostResponse struct {
	Posts []*PBlogPost `json:"posts"`
}

type ListCategoryResponse struct {
	Categories []*PCategory `json:"categories"`
}

type ListCollectionResponse struct {
	Collections []*PCollection `json:"collections"`
}

type ListCouponCodesResponse struct {
	Coupons []*CouponCode `json:"coupons"`
}

type ListCustomerOrdersResponse struct {
	Orders []*Order `json:"orders"`
}

type ListPaymentMethodResponse struct {
	Methods []*PaymentMethod `json:"methods"`
}

type ListProductAttributeResponse struct {
	Attributes []*ProductAttribute `json:"attributes"`
}

type ListProductResponse struct {
	Products []*PProduct `json:"products"`
}

type ListProductVariationResponse struct {
	Variations []*PProductVariation `json:"variations"`
}

type ListShippingMethodResponse struct {
	Methods []*ShippingMethod `json:"methods"`
}

type ListShopMediaResponse struct {
	Items []*ShopMedia `json:"items"`
}

type Location struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	ShortCode string `json:"shortCode"`
}

type LoginCustomerParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginCustomerResponse struct {
	AccessToken  string  `json:"accessToken"`
	RefreshToken *string `json:"refreshToken,omitempty"`
}

type LoginUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginUserResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

type MagicLoginCustomerParams struct {
	Token string `json:"token"`
}

type MagicLoginCustomerRequestParams struct {
	Email         string `json:"email"`
	StorefrontURL string `json:"storefrontUrl"`
}

type NewBlogPostParams struct {
	Title       string   `json:"title"`
	Slug        *string  `json:"slug,omitempty"`
	BannerImage *string  `json:"bannerImage,omitempty"`
	Content     string   `json:"content"`
	Tags        []string `json:"tags,omitempty"`
	IsPublished bool     `json:"isPublished"`
	IsFeatured  bool     `json:"isFeatured"`
}

type NewCartParams struct {
	CartItems []*CartItemParams `json:"cartItems"`
}

type NewCategoryParams struct {
	Name        string  `json:"name"`
	Slug        *string `json:"slug,omitempty"`
	IsPublished bool    `json:"isPublished"`
	Description *string `json:"description,omitempty"`
	Image       *string `json:"image,omitempty"`
	Position    *int    `json:"position,omitempty"`
}

type NewCollectionParams struct {
	Name        string  `json:"name"`
	Slug        *string `json:"slug,omitempty"`
	IsPublished bool    `json:"isPublished"`
	Description *string `json:"description,omitempty"`
	Image       *string `json:"image,omitempty"`
	Position    *int    `json:"position,omitempty"`
}

type NewCouponCodeParams struct {
	Code              string       `json:"code"`
	Amount            int          `json:"amount"`
	MinOrderAmount    *int         `json:"minOrderAmount,omitempty"`
	MaxDiscountAmount *int         `json:"maxDiscountAmount,omitempty"`
	IsActive          bool         `json:"isActive"`
	IsFlatDiscount    bool         `json:"isFlatDiscount"`
	IsForNewUsersOnly bool         `json:"isForNewUsersOnly"`
	IsUserSpecific    bool         `json:"isUserSpecific"`
	MaxUsage          *int         `json:"maxUsage,omitempty"`
	MaxUsagePerUser   *int         `json:"maxUsagePerUser,omitempty"`
	DiscountType      DiscountType `json:"discountType"`
	Description       *string      `json:"description,omitempty"`
	Image             *string      `json:"image,omitempty"`
	StartAt           *string      `json:"startAt,omitempty"`
	EndAt             *string      `json:"endAt,omitempty"`
	Customers         []string     `json:"customers,omitempty"`
}

type NewProduct struct {
	Name                    string       `json:"name"`
	Slug                    *string      `json:"slug,omitempty"`
	Description             string       `json:"description"`
	IsPublished             bool         `json:"isPublished"`
	Sku                     *string      `json:"sku,omitempty"`
	Stock                   *int         `json:"stock,omitempty"`
	MaxItemPerOrder         *int         `json:"maxItemPerOrder,omitempty"`
	Price                   int          `json:"price"`
	Cost                    int          `json:"cost"`
	Weight                  *float64     `json:"weight,omitempty"`
	WeightUnit              *WeightUnit  `json:"weightUnit,omitempty"`
	ProductUnit             *ProductUnit `json:"productUnit,omitempty"`
	Images                  []string     `json:"images"`
	IsDigitalProduct        bool         `json:"isDigitalProduct"`
	CategoryID              *string      `json:"categoryId,omitempty"`
	ProductSpecificDiscount *int         `json:"productSpecificDiscount,omitempty"`
}

type NewShippingMethodParams struct {
	DisplayName        string     `json:"displayName"`
	DeliveryCharge     int        `json:"deliveryCharge"`
	DeliveryTimeInDays int        `json:"deliveryTimeInDays"`
	WeightUnit         WeightUnit `json:"WeightUnit"`
	IsFlat             bool       `json:"isFlat"`
	IsActive           bool       `json:"isActive"`
}

type NewStoreBanner struct {
	Image       string  `json:"image"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	BtnValue    *string `json:"btnValue,omitempty"`
	BtnURL      *string `json:"btnUrl,omitempty"`
	Tag         *string `json:"tag,omitempty"`
	IsPublished bool    `json:"isPublished"`
	Position    int     `json:"position"`
}

type NewStoreMenu struct {
	Name         string  `json:"name"`
	URL          string  `json:"url"`
	Tag          *string `json:"tag,omitempty"`
	IsPublished  bool    `json:"isPublished"`
	Position     int     `json:"position"`
	ParentMenuID *string `json:"parentMenuId,omitempty"`
}

type NewStorePageParams struct {
	Title       string  `json:"title"`
	Slug        *string `json:"slug,omitempty"`
	Content     string  `json:"content"`
	IsPublished bool    `json:"isPublished"`
}

type NewStoreParams struct {
	Name                     string          `json:"name"`
	Title                    *string         `json:"title,omitempty"`
	Description              *string         `json:"description,omitempty"`
	Tags                     []string        `json:"tags,omitempty"`
	MetaName                 *string         `json:"metaName,omitempty"`
	MetaDescription          *string         `json:"metaDescription,omitempty"`
	MetaTags                 []string        `json:"metaTags,omitempty"`
	Logo                     *graphql.Upload `json:"logo,omitempty"`
	Favicon                  *graphql.Upload `json:"favicon,omitempty"`
	BannerImage              *graphql.Upload `json:"bannerImage,omitempty"`
	IsOpen                   *bool           `json:"isOpen,omitempty"`
	IsCustomerLoyaltyEnabled *bool           `json:"isCustomerLoyaltyEnabled,omitempty"`
	Currency                 *Currency       `json:"currency,omitempty"`
	Website                  *string         `json:"website,omitempty"`
	SupportEmail             *string         `json:"supportEmail,omitempty"`
	SupportPhone             *string         `json:"supportPhone,omitempty"`
	Street                   *string         `json:"street,omitempty"`
	StreetOptional           *string         `json:"streetOptional,omitempty"`
	City                     *string         `json:"city,omitempty"`
	State                    *string         `json:"state,omitempty"`
	Postcode                 *string         `json:"postcode,omitempty"`
	LocationID               *string         `json:"locationID,omitempty"`
}

type NewStoreSecretParams struct {
	SecretType SecretType `json:"secretType"`
}

type Order struct {
	ID                   string             `json:"id"`
	Hash                 string             `json:"hash"`
	ShippingCharge       int                `json:"shippingCharge"`
	PaymentProcessingFee int                `json:"paymentProcessingFee"`
	Subtotal             int                `json:"subtotal"`
	GrandTotal           int                `json:"grandTotal"`
	DiscountedAmount     int                `json:"discountedAmount"`
	Status               OrderStatus        `json:"status"`
	PaymentStatus        OrderPaymentStatus `json:"paymentStatus"`
	CreatedAt            string             `json:"createdAt"`
	UpdatedAt            *string            `json:"updatedAt,omitempty"`
	BillingAddress       Address            `json:"billingAddress"`
	ShippingAddress      *Address           `json:"shippingAddress,omitempty"`
	Cart                 Cart               `json:"cart"`
	Customer             Customer           `json:"customer"`
	Shop                 PStore             `json:"shop"`
	PaymentMethod        *PaymentMethod     `json:"paymentMethod,omitempty"`
	ShippingMethod       *ShippingMethod    `json:"shippingMethod,omitempty"`
	CouponCode           *UserCouponCode    `json:"couponCode,omitempty"`
	Payments             []*Payment         `json:"payments"`
	Feedback             *Feedback          `json:"feedback,omitempty"`
	Note                 *string            `json:"note,omitempty"`
	SalesChannel         string             `json:"salesChannel"`
}

type OrderGenerateDigitalContent struct {
	Type       DigitalContentType `json:"type"`
	Content    *string            `json:"content,omitempty"`
	ContentURL *string            `json:"contentUrl,omitempty"`
}

type OrderPaymentParams struct {
	PayableAmount int `json:"payableAmount"`
}

type OrderSearchParams struct {
	CustomerEmail *string `json:"customerEmail,omitempty"`
	OrderHash     *string `json:"orderHash,omitempty"`
}

type OrderUpdateParams struct {
	Status        *OrderStatus          `json:"status,omitempty"`
	PaymentStatus *OrderPaymentStatus   `json:"paymentStatus,omitempty"`
	Payments      []*OrderPaymentParams `json:"payments,omitempty"`
}

type PBlogPost struct {
	ID              string             `json:"id"`
	Title           string             `json:"title"`
	Slug            *string            `json:"slug,omitempty"`
	BannerImage     *string            `json:"bannerImage,omitempty"`
	BannerImageFull *string            `json:"bannerImageFull,omitempty"`
	Content         string             `json:"content"`
	Tags            []string           `json:"tags,omitempty"`
	IsPublished     bool               `json:"isPublished"`
	IsFeatured      bool               `json:"isFeatured"`
	Views           int                `json:"views"`
	Favourites      int                `json:"favourites"`
	Comments        []*BlogPostComment `json:"comments"`
	CreatedAt       string             `json:"createdAt"`
	UpdatedAt       *string            `json:"updatedAt,omitempty"`
}

type PCart struct {
	ID                 string       `json:"id"`
	IsShippingRequired bool         `json:"isShippingRequired"`
	CartItems          []*PCartItem `json:"cartItems"`
}

type PCartItem struct {
	ID            int                     `json:"id"`
	Product       PProduct                `json:"product"`
	Quantity      int                     `json:"quantity"`
	PurchasePrice int                     `json:"purchasePrice"`
	Attributes    []*CartProductAttribute `json:"attributes"`
	Variation     *PProductVariation      `json:"variation,omitempty"`
}

type PCategory struct {
	ID           string  `json:"id"`
	Name         string  `json:"name"`
	Slug         string  `json:"slug"`
	Description  *string `json:"description,omitempty"`
	Image        *string `json:"image,omitempty"`
	FullImage    *string `json:"fullImage,omitempty"`
	ProductCount int     `json:"productCount"`
	Position     int     `json:"position"`
}

type PCollection struct {
	ID           string     `json:"id"`
	Name         string     `json:"name"`
	Slug         string     `json:"slug"`
	Description  *string    `json:"description,omitempty"`
	Image        *string    `json:"image,omitempty"`
	FullImage    *string    `json:"fullImage,omitempty"`
	Products     []*Product `json:"products,omitempty"`
	ProductCount int        `json:"productCount"`
	Position     int        `json:"position"`
}

type PDigitalItem struct {
	ID          string            `json:"id"`
	Title       string            `json:"title"`
	Description *string           `json:"description,omitempty"`
	Position    int               `json:"position"`
	Contents    []*DigitalContent `json:"contents"`
}

type POrder struct {
	ID                   string             `json:"id"`
	Hash                 string             `json:"hash"`
	ShippingCharge       int                `json:"shippingCharge"`
	PaymentProcessingFee int                `json:"paymentProcessingFee"`
	Subtotal             int                `json:"subtotal"`
	GrandTotal           int                `json:"grandTotal"`
	DiscountedAmount     int                `json:"discountedAmount"`
	Status               OrderStatus        `json:"status"`
	PaymentStatus        OrderPaymentStatus `json:"paymentStatus"`
	CreatedAt            string             `json:"createdAt"`
	UpdatedAt            *string            `json:"updatedAt,omitempty"`
	BillingAddress       Address            `json:"billingAddress"`
	ShippingAddress      *Address           `json:"shippingAddress,omitempty"`
	Cart                 PCart              `json:"cart"`
	Customer             Customer           `json:"customer"`
	Shop                 PStore             `json:"shop"`
	PaymentMethod        *PaymentMethod     `json:"paymentMethod,omitempty"`
	ShippingMethod       *ShippingMethod    `json:"shippingMethod,omitempty"`
	CouponCode           *UserCouponCode    `json:"couponCode,omitempty"`
	Payments             []*Payment         `json:"payments"`
	Feedback             *Feedback          `json:"feedback,omitempty"`
	Note                 *string            `json:"note,omitempty"`
}

type POrderSearchParams struct {
	ShopName  *string `json:"shopName,omitempty"`
	OrderHash *string `json:"orderHash,omitempty"`
}

type PProduct struct {
	ID                      string               `json:"id"`
	Name                    string               `json:"name"`
	Slug                    string               `json:"slug"`
	Description             string               `json:"description"`
	Sku                     *string              `json:"sku,omitempty"`
	Stock                   *int                 `json:"stock,omitempty"`
	MaxItemPerOrder         *int                 `json:"maxItemPerOrder,omitempty"`
	Price                   int                  `json:"price"`
	Images                  []string             `json:"images"`
	FullImages              []string             `json:"fullImages"`
	IsDigitalProduct        bool                 `json:"isDigitalProduct"`
	Views                   int                  `json:"views"`
	ProductUnit             *ProductUnit         `json:"productUnit,omitempty"`
	CreatedAt               string               `json:"createdAt"`
	UpdatedAt               *string              `json:"updatedAt,omitempty"`
	Category                *PCategory           `json:"category,omitempty"`
	Attributes              []*ProductAttribute  `json:"attributes"`
	Variations              []*PProductVariation `json:"variations"`
	DigitalItems            []*PDigitalItem      `json:"digitalItems"`
	Feedbacks               []*Feedback          `json:"feedbacks,omitempty"`
	ProductSpecificDiscount int                  `json:"productSpecificDiscount"`
}

type PProductVariation struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Price int     `json:"price"`
	Sku   *string `json:"sku,omitempty"`
	Stock *int    `json:"stock,omitempty"`
}

type PStore struct {
	Name             string    `json:"name"`
	Title            *string   `json:"title,omitempty"`
	LinklyThemeColor *string   `json:"linklyThemeColor,omitempty"`
	Description      *string   `json:"description,omitempty"`
	Tags             []string  `json:"tags,omitempty"`
	MetaName         *string   `json:"metaName,omitempty"`
	MetaDescription  *string   `json:"metaDescription,omitempty"`
	MetaTags         []string  `json:"metaTags,omitempty"`
	Logo             *string   `json:"logo,omitempty"`
	LogoPath         *string   `json:"logoPath,omitempty"`
	Favicon          *string   `json:"favicon,omitempty"`
	FaviconPath      *string   `json:"faviconPath,omitempty"`
	BannerImage      *string   `json:"bannerImage,omitempty"`
	BannerImagePath  *string   `json:"bannerImagePath,omitempty"`
	IsOpen           bool      `json:"isOpen"`
	Currency         Currency  `json:"currency"`
	Website          *string   `json:"website,omitempty"`
	SupportEmail     *string   `json:"supportEmail,omitempty"`
	SupportPhone     *string   `json:"supportPhone,omitempty"`
	CreatedAt        string    `json:"createdAt"`
	UpdatedAt        *string   `json:"updatedAt,omitempty"`
	Street           *string   `json:"street,omitempty"`
	StreetOptional   *string   `json:"streetOptional,omitempty"`
	City             *string   `json:"city,omitempty"`
	State            *string   `json:"state,omitempty"`
	Postcode         *string   `json:"postcode,omitempty"`
	Location         *Location `json:"location,omitempty"`
}

type PStoreBanner struct {
	ImagePath   string  `json:"imagePath"`
	ImageURL    string  `json:"imageUrl"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	BtnValue    *string `json:"btnValue,omitempty"`
	BtnURL      *string `json:"btnUrl,omitempty"`
	Tag         *string `json:"tag,omitempty"`
	Position    int     `json:"position"`
}

type PStoreMenu struct {
	ID         string        `json:"id"`
	Name       string        `json:"name"`
	URL        string        `json:"url"`
	Tag        *string       `json:"tag,omitempty"`
	Position   int           `json:"position"`
	ParentMenu *StoreMenu    `json:"parentMenu,omitempty"`
	SubMenus   []*PStoreMenu `json:"subMenus,omitempty"`
}

type PStorePage struct {
	Title       string  `json:"title"`
	Slug        *string `json:"slug,omitempty"`
	Content     string  `json:"content"`
	IsPublished bool    `json:"isPublished"`
	Views       int     `json:"views"`
	CreatedAt   string  `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt,omitempty"`
}

type Pagination struct {
	PerPage int `json:"perPage"`
	Page    int `json:"page"`
}

type Payment struct {
	IsPaid        bool   `json:"isPaid"`
	PayableAmount int    `json:"payableAmount"`
	GatewayName   string `json:"gatewayName"`
}

type PaymentMethod struct {
	ID               string `json:"id"`
	DisplayName      string `json:"displayName"`
	CurrencyName     string `json:"currencyName"`
	CurrencySymbol   string `json:"currencySymbol"`
	IsDigitalPayment bool   `json:"isDigitalPayment"`
}

type PaymentRequestOverrides struct {
	SuccessCallback *string `json:"SuccessCallback,omitempty"`
	FailureCallback *string `json:"FailureCallback,omitempty"`
}

type PlaceOrderByAdminParams struct {
	CartID           string         `json:"cartId"`
	BillingAddress   AddressParams  `json:"billingAddress"`
	ShippingAddress  *AddressParams `json:"shippingAddress,omitempty"`
	PaymentMethodID  *string        `json:"paymentMethodId,omitempty"`
	ShippingMethodID *string        `json:"shippingMethodId,omitempty"`
	CouponCode       *string        `json:"couponCode,omitempty"`
	CustomerID       string         `json:"customerId"`
	Note             *string        `json:"note,omitempty"`
}

type PlaceOrderParams struct {
	CartID           string         `json:"cartId"`
	BillingAddress   AddressParams  `json:"billingAddress"`
	ShippingAddress  *AddressParams `json:"shippingAddress,omitempty"`
	PaymentMethodID  *string        `json:"paymentMethodId,omitempty"`
	ShippingMethodID *string        `json:"shippingMethodId,omitempty"`
	CouponCode       *string        `json:"couponCode,omitempty"`
	Note             *string        `json:"note,omitempty"`
}

type PlaceOrderResponse struct {
	Order Order `json:"order"`
}

type Product struct {
	ID                      string              `json:"id"`
	Name                    string              `json:"name"`
	Slug                    string              `json:"slug"`
	Description             string              `json:"description"`
	IsPublished             bool                `json:"isPublished"`
	Sku                     *string             `json:"sku,omitempty"`
	Stock                   *int                `json:"stock,omitempty"`
	MaxItemPerOrder         *int                `json:"maxItemPerOrder,omitempty"`
	Price                   int                 `json:"price"`
	Cost                    int                 `json:"cost"`
	Images                  []string            `json:"images"`
	FullImages              []string            `json:"fullImages"`
	IsDigitalProduct        bool                `json:"isDigitalProduct"`
	Views                   int                 `json:"views"`
	CreatedAt               string              `json:"createdAt"`
	Weight                  *float64            `json:"weight,omitempty"`
	WeightUnit              *WeightUnit         `json:"weightUnit,omitempty"`
	ProductUnit             *ProductUnit        `json:"productUnit,omitempty"`
	UpdatedAt               *string             `json:"updatedAt,omitempty"`
	Category                *Category           `json:"category,omitempty"`
	Attributes              []*ProductAttribute `json:"attributes"`
	Variations              []*ProductVariation `json:"variations"`
	DigitalItems            []*DigitalItem      `json:"digitalItems"`
	Feedbacks               []*Feedback         `json:"feedbacks,omitempty"`
	ProductSpecificDiscount int                 `json:"productSpecificDiscount"`
	Histories               []*ProductHistory   `json:"histories"`
}

type ProductAttribute struct {
	ID         string   `json:"id"`
	Name       string   `json:"name"`
	Values     []string `json:"values"`
	IsRequired bool     `json:"isRequired"`
	CreatedAt  string   `json:"createdAt"`
	UpdateAt   *string  `json:"updateAt,omitempty"`
}

type ProductHistory struct {
	Message     string  `json:"message"`
	OldStock    int     `json:"oldStock"`
	NewStock    int     `json:"newStock"`
	VariationID *string `json:"variationID,omitempty"`
	OrderHash   *string `json:"orderHash,omitempty"`
	CreatedAt   string  `json:"createdAt"`
}

type ProductVariation struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Price int     `json:"price"`
	Cost  int     `json:"cost"`
	Sku   *string `json:"sku,omitempty"`
	Stock *int    `json:"stock,omitempty"`
}

type RegisterCustomerParams struct {
	Email          string  `json:"email"`
	Password       string  `json:"password"`
	Phone          *string `json:"phone,omitempty"`
	FirstName      string  `json:"firstName"`
	LastName       string  `json:"lastName"`
	ProfilePicture *string `json:"profilePicture,omitempty"`
}

type RegisterCustomerResponse struct {
	Customer    Customer `json:"customer"`
	AccessToken string   `json:"accessToken"`
}

type RegisterUserParams struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

type RegisterUserResponse struct {
	User User `json:"user"`
}

type RemoveAttributeFromProductParams struct {
	ProductID   string `json:"productId"`
	AttributeID string `json:"attributeId"`
}

type RemoveProductsFromCollectionParams struct {
	CollectionID string   `json:"collectionId"`
	ProductIds   []string `json:"productIds"`
}

type RemoveVariationFromProductParams struct {
	ProductID   string `json:"productId"`
	VariationID string `json:"variationId"`
}

type Report struct {
	TotalSale          int `json:"totalSale"`
	TotalSalePending   int `json:"totalSalePending"`
	TotalCost          int `json:"totalCost"`
	TotalOrders        int `json:"totalOrders"`
	TotalOrdersPending int `json:"totalOrdersPending"`
	TotalCustomers     int `json:"totalCustomers"`
	TotalDiscount      int `json:"totalDiscount"`
	TotalDue           int `json:"totalDue"`
}

type ReportParams struct {
	StartDate *string `json:"startDate,omitempty"`
	EndDate   *string `json:"endDate,omitempty"`
}

type SCustomer struct {
	ID                 string  `json:"id"`
	Email              string  `json:"email"`
	Phone              *string `json:"phone,omitempty"`
	FirstName          string  `json:"firstName"`
	LastName           string  `json:"lastName"`
	ProfilePicture     *string `json:"profilePicture,omitempty"`
	ProfilePictureFull *string `json:"profilePictureFull,omitempty"`
	Due                int     `json:"due"`
}

type Search struct {
	Query   *string        `json:"query,omitempty"`
	Filters []*FilterQuery `json:"filters"`
}

type ShippingMethod struct {
	ID                 string     `json:"id"`
	DisplayName        string     `json:"displayName"`
	DeliveryCharge     int        `json:"deliveryCharge"`
	DeliveryTimeInDays int        `json:"deliveryTimeInDays"`
	WeightUnit         WeightUnit `json:"WeightUnit"`
	IsFlat             bool       `json:"isFlat"`
	IsActive           bool       `json:"isActive"`
}

type ShopMedia struct {
	Path         string `json:"path"`
	URL          string `json:"url"`
	PermanentURL string `json:"permanentUrl"`
}

type ShopSecretsResponse struct {
	Secrets []*StoreSecret `json:"secrets"`
}

type ShopsResponse struct {
	Shops []*Store `json:"shops"`
}

type Sort struct {
	By        *SortBy        `json:"by,omitempty"`
	Direction *SortDirection `json:"direction,omitempty"`
}

type Store struct {
	ID                       string    `json:"id"`
	Name                     string    `json:"name"`
	Title                    *string   `json:"title,omitempty"`
	LinklyThemeColor         *string   `json:"linklyThemeColor,omitempty"`
	Description              *string   `json:"description,omitempty"`
	Tags                     []string  `json:"tags,omitempty"`
	MetaName                 *string   `json:"metaName,omitempty"`
	MetaDescription          *string   `json:"metaDescription,omitempty"`
	MetaTags                 []string  `json:"metaTags,omitempty"`
	Logo                     *string   `json:"logo,omitempty"`
	LogoPath                 *string   `json:"logoPath,omitempty"`
	Favicon                  *string   `json:"favicon,omitempty"`
	FaviconPath              *string   `json:"faviconPath,omitempty"`
	BannerImage              *string   `json:"bannerImage,omitempty"`
	BannerImagePath          *string   `json:"bannerImagePath,omitempty"`
	IsOpen                   bool      `json:"isOpen"`
	IsCustomerLoyaltyEnabled bool      `json:"isCustomerLoyaltyEnabled"`
	Currency                 Currency  `json:"currency"`
	Website                  *string   `json:"website,omitempty"`
	SupportEmail             *string   `json:"supportEmail,omitempty"`
	SupportPhone             *string   `json:"supportPhone,omitempty"`
	CreatedAt                string    `json:"createdAt"`
	UpdatedAt                *string   `json:"updatedAt,omitempty"`
	Street                   *string   `json:"street,omitempty"`
	StreetOptional           *string   `json:"streetOptional,omitempty"`
	City                     *string   `json:"city,omitempty"`
	State                    *string   `json:"state,omitempty"`
	Postcode                 *string   `json:"postcode,omitempty"`
	Location                 *Location `json:"location,omitempty"`
}

type StoreBanner struct {
	ID          string  `json:"id"`
	ImagePath   string  `json:"imagePath"`
	ImageURL    string  `json:"imageUrl"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	BtnValue    *string `json:"btnValue,omitempty"`
	BtnURL      *string `json:"btnUrl,omitempty"`
	Tag         *string `json:"tag,omitempty"`
	IsPublished bool    `json:"isPublished"`
	Position    int     `json:"position"`
}

type StoreMenu struct {
	ID          string       `json:"id"`
	Name        string       `json:"name"`
	URL         string       `json:"url"`
	Tag         *string      `json:"tag,omitempty"`
	IsPublished bool         `json:"isPublished"`
	Position    int          `json:"position"`
	ParentMenu  *StoreMenu   `json:"parentMenu,omitempty"`
	SubMenus    []*StoreMenu `json:"subMenus,omitempty"`
}

type StorePage struct {
	ID          string  `json:"id"`
	Title       string  `json:"title"`
	Slug        *string `json:"slug,omitempty"`
	Content     string  `json:"content"`
	IsPublished bool    `json:"isPublished"`
	Views       int     `json:"views"`
	CreatedAt   string  `json:"createdAt"`
	UpdatedAt   *string `json:"updatedAt,omitempty"`
}

type StoreSecret struct {
	ID         string     `json:"id"`
	Key        string     `json:"key"`
	Secret     string     `json:"secret"`
	SecretType SecretType `json:"secretType"`
}

type Subscription struct {
	ProductCreated Product `json:"productCreated"`
	ProductUpdated Product `json:"productUpdated"`
	CartCreated    Cart    `json:"cartCreated"`
	CartUpdated    Cart    `json:"cartUpdated"`
	OrderCreated   Order   `json:"orderCreated"`
	OrderUpdated   Order   `json:"orderUpdated"`
}

type UpdateAttributeParams struct {
	Name       string   `json:"name"`
	Values     []string `json:"values"`
	IsRequired bool     `json:"isRequired"`
}

type UpdateAttributeResponse struct {
	Attribute ProductAttribute `json:"attribute"`
}

type UpdateBlogPostComment struct {
	Content string `json:"content"`
}

type UpdateBlogPostCommentResponse struct {
	Comment BlogPostComment `json:"comment"`
}

type UpdateBlogPostParams struct {
	Title       string   `json:"title"`
	Slug        *string  `json:"slug,omitempty"`
	BannerImage *string  `json:"bannerImage,omitempty"`
	Content     string   `json:"content"`
	Tags        []string `json:"tags,omitempty"`
	IsPublished bool     `json:"isPublished"`
	IsFeatured  bool     `json:"isFeatured"`
}

type UpdateBlogPostResponse struct {
	Post BlogPost `json:"post"`
}

type UpdateCartParams struct {
	CartItems []*CartItemParams `json:"cartItems"`
}

type UpdateCartResponse struct {
	Cart Cart `json:"cart"`
}

type UpdateCategoryParams struct {
	Name        string  `json:"name"`
	Slug        *string `json:"slug,omitempty"`
	IsPublished bool    `json:"isPublished"`
	Description *string `json:"description,omitempty"`
	Image       *string `json:"image,omitempty"`
	Position    *int    `json:"position,omitempty"`
}

type UpdateCategoryResponse struct {
	Category Category `json:"category"`
}

type UpdateCollectionParams struct {
	Name        string  `json:"name"`
	Slug        *string `json:"slug,omitempty"`
	IsPublished bool    `json:"isPublished"`
	Description *string `json:"description,omitempty"`
	Image       *string `json:"image,omitempty"`
	Position    *int    `json:"position,omitempty"`
}

type UpdateCollectionResponse struct {
	Collection Collection `json:"collection"`
}

type UpdateCouponCodeParams struct {
	Code              string       `json:"code"`
	Amount            int          `json:"amount"`
	MinOrderAmount    *int         `json:"minOrderAmount,omitempty"`
	MaxDiscountAmount *int         `json:"maxDiscountAmount,omitempty"`
	IsActive          bool         `json:"isActive"`
	IsFlatDiscount    bool         `json:"isFlatDiscount"`
	IsForNewUsersOnly bool         `json:"isForNewUsersOnly"`
	IsUserSpecific    bool         `json:"isUserSpecific"`
	MaxUsage          *int         `json:"maxUsage,omitempty"`
	MaxUsagePerUser   *int         `json:"maxUsagePerUser,omitempty"`
	DiscountType      DiscountType `json:"discountType"`
	Description       *string      `json:"description,omitempty"`
	Image             *string      `json:"image,omitempty"`
	StartAt           *string      `json:"startAt,omitempty"`
	EndAt             *string      `json:"endAt,omitempty"`
	Customers         []string     `json:"customers,omitempty"`
}

type UpdateCouponCodeResponse struct {
	Coupon CouponCode `json:"coupon"`
}

type UpdateCustomerParams struct {
	Phone          *string `json:"phone,omitempty"`
	FirstName      string  `json:"firstName"`
	LastName       string  `json:"lastName"`
	ProfilePicture *string `json:"profilePicture,omitempty"`
}

type UpdateDigitalContentParams struct {
	Title          string             `json:"title"`
	ContentType    DigitalContentType `json:"contentType"`
	IsTrialAllowed bool               `json:"isTrialAllowed"`
	ContentText    *string            `json:"contentText,omitempty"`
	ContentFile    *graphql.Upload    `json:"contentFile,omitempty"`
	Position       *int               `json:"position,omitempty"`
}

type UpdateDigitalItemParams struct {
	Title       string  `json:"title"`
	Description *string `json:"description,omitempty"`
	Position    *int    `json:"position,omitempty"`
}

type UpdateProduct struct {
	Name                    string       `json:"name"`
	Slug                    *string      `json:"slug,omitempty"`
	Description             string       `json:"description"`
	IsPublished             bool         `json:"isPublished"`
	Sku                     *string      `json:"sku,omitempty"`
	Stock                   *int         `json:"stock,omitempty"`
	MaxItemPerOrder         *int         `json:"maxItemPerOrder,omitempty"`
	Price                   int          `json:"price"`
	Cost                    int          `json:"cost"`
	Weight                  *float64     `json:"weight,omitempty"`
	WeightUnit              *WeightUnit  `json:"weightUnit,omitempty"`
	ProductUnit             *ProductUnit `json:"productUnit,omitempty"`
	Images                  []string     `json:"images"`
	IsDigitalProduct        bool         `json:"isDigitalProduct"`
	CategoryID              *string      `json:"categoryId,omitempty"`
	ProductSpecificDiscount *int         `json:"productSpecificDiscount,omitempty"`
}

type UpdateProductResponse struct {
	Product Product `json:"product"`
}

type UpdateShippingMethodParams struct {
	DisplayName        string     `json:"displayName"`
	DeliveryCharge     int        `json:"deliveryCharge"`
	DeliveryTimeInDays int        `json:"deliveryTimeInDays"`
	WeightUnit         WeightUnit `json:"WeightUnit"`
	IsFlat             bool       `json:"isFlat"`
	IsActive           bool       `json:"isActive"`
}

type UpdateShippingMethodResponse struct {
	Method ShippingMethod `json:"method"`
}

type UpdateStoreBanner struct {
	Image       string  `json:"image"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	BtnValue    *string `json:"btnValue,omitempty"`
	BtnURL      *string `json:"btnUrl,omitempty"`
	Tag         *string `json:"tag,omitempty"`
	IsPublished bool    `json:"isPublished"`
	Position    int     `json:"position"`
}

type UpdateStoreMenu struct {
	Name         string  `json:"name"`
	URL          string  `json:"url"`
	Tag          *string `json:"tag,omitempty"`
	IsPublished  bool    `json:"isPublished"`
	Position     int     `json:"position"`
	ParentMenuID *string `json:"parentMenuId,omitempty"`
}

type UpdateStorePageParams struct {
	Title       string  `json:"title"`
	Slug        *string `json:"slug,omitempty"`
	Content     string  `json:"content"`
	IsPublished bool    `json:"isPublished"`
}

type UpdateStoreParams struct {
	Name                     string    `json:"name"`
	Title                    *string   `json:"title,omitempty"`
	Description              *string   `json:"description,omitempty"`
	Tags                     []string  `json:"tags,omitempty"`
	MetaName                 *string   `json:"metaName,omitempty"`
	MetaDescription          *string   `json:"metaDescription,omitempty"`
	MetaTags                 []string  `json:"metaTags,omitempty"`
	Logo                     *string   `json:"logo,omitempty"`
	Favicon                  *string   `json:"favicon,omitempty"`
	BannerImage              *string   `json:"bannerImage,omitempty"`
	IsOpen                   *bool     `json:"isOpen,omitempty"`
	IsCustomerLoyaltyEnabled *bool     `json:"isCustomerLoyaltyEnabled,omitempty"`
	Currency                 *Currency `json:"currency,omitempty"`
	Website                  *string   `json:"website,omitempty"`
	SupportEmail             *string   `json:"supportEmail,omitempty"`
	SupportPhone             *string   `json:"supportPhone,omitempty"`
	Street                   *string   `json:"street,omitempty"`
	StreetOptional           *string   `json:"streetOptional,omitempty"`
	City                     *string   `json:"city,omitempty"`
	State                    *string   `json:"state,omitempty"`
	Postcode                 *string   `json:"postcode,omitempty"`
	LocationID               *string   `json:"locationID,omitempty"`
}

type UpdateVariationParams struct {
	Name       string      `json:"name"`
	Price      int         `json:"price"`
	Cost       int         `json:"cost"`
	Sku        *string     `json:"sku,omitempty"`
	Stock      *int        `json:"stock,omitempty"`
	Weight     *float64    `json:"weight,omitempty"`
	WeightUnit *WeightUnit `json:"weightUnit,omitempty"`
}

type UpdateVariationResponse struct {
	Variation ProductVariation `json:"variation"`
}

type User struct {
	FirstName string  `json:"firstName"`
	LastName  string  `json:"lastName"`
	Email     string  `json:"email"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

type UserCouponCode struct {
	Code              string       `json:"code"`
	Amount            int          `json:"amount"`
	MinOrderAmount    *int         `json:"minOrderAmount,omitempty"`
	MaxDiscountAmount *int         `json:"maxDiscountAmount,omitempty"`
	IsFlatDiscount    bool         `json:"isFlatDiscount"`
	IsForNewUsersOnly bool         `json:"isForNewUsersOnly"`
	MaxUsagePerUser   *int         `json:"maxUsagePerUser,omitempty"`
	DiscountType      DiscountType `json:"discountType"`
	Description       *string      `json:"description,omitempty"`
	Image             *string      `json:"image,omitempty"`
	StartAt           *string      `json:"startAt,omitempty"`
	EndAt             *string      `json:"endAt,omitempty"`
}

type Currency string

const (
	CurrencyUsd Currency = "USD"
	CurrencyBdt Currency = "BDT"
	CurrencyEur Currency = "EUR"
)

var AllCurrency = []Currency{
	CurrencyUsd,
	CurrencyBdt,
	CurrencyEur,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyUsd, CurrencyBdt, CurrencyEur:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DigitalContentType string

const (
	DigitalContentTypeFile  DigitalContentType = "File"
	DigitalContentTypeText  DigitalContentType = "Text"
	DigitalContentTypeVideo DigitalContentType = "Video"
	DigitalContentTypeAudio DigitalContentType = "Audio"
	DigitalContentTypeURL   DigitalContentType = "Url"
)

var AllDigitalContentType = []DigitalContentType{
	DigitalContentTypeFile,
	DigitalContentTypeText,
	DigitalContentTypeVideo,
	DigitalContentTypeAudio,
	DigitalContentTypeURL,
}

func (e DigitalContentType) IsValid() bool {
	switch e {
	case DigitalContentTypeFile, DigitalContentTypeText, DigitalContentTypeVideo, DigitalContentTypeAudio, DigitalContentTypeURL:
		return true
	}
	return false
}

func (e DigitalContentType) String() string {
	return string(e)
}

func (e *DigitalContentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DigitalContentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DigitalContentType", str)
	}
	return nil
}

func (e DigitalContentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DiscountType string

const (
	DiscountTypeProduct  DiscountType = "Product"
	DiscountTypeShipping DiscountType = "Shipping"
	DiscountTypeOverall  DiscountType = "Overall"
)

var AllDiscountType = []DiscountType{
	DiscountTypeProduct,
	DiscountTypeShipping,
	DiscountTypeOverall,
}

func (e DiscountType) IsValid() bool {
	switch e {
	case DiscountTypeProduct, DiscountTypeShipping, DiscountTypeOverall:
		return true
	}
	return false
}

func (e DiscountType) String() string {
	return string(e)
}

func (e *DiscountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DiscountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DiscountType", str)
	}
	return nil
}

func (e DiscountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FilterKey string

const (
	FilterKeyCollection FilterKey = "collection"
	FilterKeyCategory   FilterKey = "category"
	FilterKeyEmail      FilterKey = "email"
)

var AllFilterKey = []FilterKey{
	FilterKeyCollection,
	FilterKeyCategory,
	FilterKeyEmail,
}

func (e FilterKey) IsValid() bool {
	switch e {
	case FilterKeyCollection, FilterKeyCategory, FilterKeyEmail:
		return true
	}
	return false
}

func (e FilterKey) String() string {
	return string(e)
}

func (e *FilterKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilterKey", str)
	}
	return nil
}

func (e FilterKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderBy string

const (
	OrderByID        OrderBy = "ID"
	OrderByCreatedAt OrderBy = "CreatedAt"
	OrderByUpdatedAt OrderBy = "UpdatedAt"
	OrderByPrice     OrderBy = "Price"
	OrderByView      OrderBy = "View"
	OrderByStock     OrderBy = "Stock"
)

var AllOrderBy = []OrderBy{
	OrderByID,
	OrderByCreatedAt,
	OrderByUpdatedAt,
	OrderByPrice,
	OrderByView,
	OrderByStock,
}

func (e OrderBy) IsValid() bool {
	switch e {
	case OrderByID, OrderByCreatedAt, OrderByUpdatedAt, OrderByPrice, OrderByView, OrderByStock:
		return true
	}
	return false
}

func (e OrderBy) String() string {
	return string(e)
}

func (e *OrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderBy", str)
	}
	return nil
}

func (e OrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "Asc"
	OrderDirectionDesc OrderDirection = "Desc"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderPaymentStatus string

const (
	OrderPaymentStatusPending  OrderPaymentStatus = "Pending"
	OrderPaymentStatusPaid     OrderPaymentStatus = "Paid"
	OrderPaymentStatusFailed   OrderPaymentStatus = "Failed"
	OrderPaymentStatusRefunded OrderPaymentStatus = "Refunded"
	OrderPaymentStatusLending  OrderPaymentStatus = "Lending"
)

var AllOrderPaymentStatus = []OrderPaymentStatus{
	OrderPaymentStatusPending,
	OrderPaymentStatusPaid,
	OrderPaymentStatusFailed,
	OrderPaymentStatusRefunded,
	OrderPaymentStatusLending,
}

func (e OrderPaymentStatus) IsValid() bool {
	switch e {
	case OrderPaymentStatusPending, OrderPaymentStatusPaid, OrderPaymentStatusFailed, OrderPaymentStatusRefunded, OrderPaymentStatusLending:
		return true
	}
	return false
}

func (e OrderPaymentStatus) String() string {
	return string(e)
}

func (e *OrderPaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderPaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderPaymentStatus", str)
	}
	return nil
}

func (e OrderPaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderStatus string

const (
	OrderStatusPending    OrderStatus = "Pending"
	OrderStatusProcessing OrderStatus = "Processing"
	OrderStatusShipping   OrderStatus = "Shipping"
	OrderStatusDelivered  OrderStatus = "Delivered"
	OrderStatusCompleted  OrderStatus = "Completed"
	OrderStatusCancelled  OrderStatus = "Cancelled"
	OrderStatusReturned   OrderStatus = "Returned"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusPending,
	OrderStatusProcessing,
	OrderStatusShipping,
	OrderStatusDelivered,
	OrderStatusCompleted,
	OrderStatusCancelled,
	OrderStatusReturned,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusPending, OrderStatusProcessing, OrderStatusShipping, OrderStatusDelivered, OrderStatusCompleted, OrderStatusCancelled, OrderStatusReturned:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentGateway string

const (
	PaymentGatewayStripe     PaymentGateway = "Stripe"
	PaymentGatewaySSLCommerz PaymentGateway = "SSLCommerz"
)

var AllPaymentGateway = []PaymentGateway{
	PaymentGatewayStripe,
	PaymentGatewaySSLCommerz,
}

func (e PaymentGateway) IsValid() bool {
	switch e {
	case PaymentGatewayStripe, PaymentGatewaySSLCommerz:
		return true
	}
	return false
}

func (e PaymentGateway) String() string {
	return string(e)
}

func (e *PaymentGateway) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentGateway(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentGateway", str)
	}
	return nil
}

func (e PaymentGateway) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductUnit string

const (
	ProductUnitPiece ProductUnit = "Piece"
	ProductUnitKg    ProductUnit = "KG"
	ProductUnitLiter ProductUnit = "Liter"
	ProductUnitTk    ProductUnit = "Tk"
)

var AllProductUnit = []ProductUnit{
	ProductUnitPiece,
	ProductUnitKg,
	ProductUnitLiter,
	ProductUnitTk,
}

func (e ProductUnit) IsValid() bool {
	switch e {
	case ProductUnitPiece, ProductUnitKg, ProductUnitLiter, ProductUnitTk:
		return true
	}
	return false
}

func (e ProductUnit) String() string {
	return string(e)
}

func (e *ProductUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductUnit", str)
	}
	return nil
}

func (e ProductUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SecretType string

const (
	SecretTypeApp         SecretType = "App"
	SecretTypeAdmin       SecretType = "Admin"
	SecretTypeTelegramBot SecretType = "TelegramBot"
)

var AllSecretType = []SecretType{
	SecretTypeApp,
	SecretTypeAdmin,
	SecretTypeTelegramBot,
}

func (e SecretType) IsValid() bool {
	switch e {
	case SecretTypeApp, SecretTypeAdmin, SecretTypeTelegramBot:
		return true
	}
	return false
}

func (e SecretType) String() string {
	return string(e)
}

func (e *SecretType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SecretType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SecretType", str)
	}
	return nil
}

func (e SecretType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortBy string

const (
	SortByID         SortBy = "Id"
	SortByCreatedAt  SortBy = "CreatedAt"
	SortByPrice      SortBy = "Price"
	SortByTotal      SortBy = "Total"
	SortByGrandTotal SortBy = "GrandTotal"
	SortByQuantity   SortBy = "Quantity"
	SortByStock      SortBy = "Stock"
	SortByPosition   SortBy = "Position"
)

var AllSortBy = []SortBy{
	SortByID,
	SortByCreatedAt,
	SortByPrice,
	SortByTotal,
	SortByGrandTotal,
	SortByQuantity,
	SortByStock,
	SortByPosition,
}

func (e SortBy) IsValid() bool {
	switch e {
	case SortByID, SortByCreatedAt, SortByPrice, SortByTotal, SortByGrandTotal, SortByQuantity, SortByStock, SortByPosition:
		return true
	}
	return false
}

func (e SortBy) String() string {
	return string(e)
}

func (e *SortBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortBy", str)
	}
	return nil
}

func (e SortBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "Asc"
	SortDirectionDesc SortDirection = "Desc"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusRegistered UserStatus = "Registered"
	UserStatusActive     UserStatus = "Active"
	UserStatusBanned     UserStatus = "Banned"
	UserStatusSuspended  UserStatus = "Suspended"
)

var AllUserStatus = []UserStatus{
	UserStatusRegistered,
	UserStatusActive,
	UserStatusBanned,
	UserStatusSuspended,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusRegistered, UserStatusActive, UserStatusBanned, UserStatusSuspended:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WeightUnit string

const (
	WeightUnitGram WeightUnit = "Gram"
)

var AllWeightUnit = []WeightUnit{
	WeightUnitGram,
}

func (e WeightUnit) IsValid() bool {
	switch e {
	case WeightUnitGram:
		return true
	}
	return false
}

func (e WeightUnit) String() string {
	return string(e)
}

func (e *WeightUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WeightUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WeightUnit", str)
	}
	return nil
}

func (e WeightUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
